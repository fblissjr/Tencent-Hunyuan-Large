<documents>
<document index="1">
<source>./README.md</source>
<document_content>
<p align="left">
    <a href="README_CN.md">‰∏≠Êñá</a>&nbsp ÔΩú English</a>
</p>
<br><br>

<p align="center">
 <img src="https://dscache.tencent-cloud.cn/upload/uploader/hunyuan-64b418fd052c033b228e04bc77bbc4b54fd7f5bc.png" width="400"/> <br>
</p><p></p>

<p align="center">
    ü´£&nbsp<a href="https://huggingface.co/tencent/Tencent-Hunyuan-Large"><b>Hugging Face</b></a>&nbsp&nbsp |  &nbsp&nbspüñ•Ô∏è&nbsp&nbsp<a href="https://llm.hunyuan.tencent.com/" style="color: red;"><b>official website</b></a>&nbsp&nbspÔΩú&nbsp&nbspüïñ&nbsp&nbsp <a href="https://cloud.tencent.com/product/hunyuan" ><b>HunyuanAPI</b></a>&nbsp&nbspÔΩú&nbsp&nbspüê≥&nbsp&nbsp <a href="https://gitee.com/Tencent/Tencent-Hunyuan-Large" ><b>Gitee</b></a>
</p><p align="center">
    <a href="https://arxiv.org/abs/2411.02265" style="color: red;"><b>Technical Report</b></a>&nbsp&nbspÔΩú&nbsp&nbsp <a href="https://huggingface.co/spaces/tencent/Hunyuan-Large"><b>Demo</b></a>&nbsp&nbsp&nbspÔΩú&nbsp&nbsp <a href="https://cloud.tencent.com/document/product/851/112032" style="color: red;"><b>Tencent Cloud TI</b></a>&nbsp&nbsp&nbsp</p>
<p><br></p>
<p>
    <table align="center">
        <tbody>
            <tr>
                <td align="center" colspan="3"><strong>Download Models</strong></td>
            </tr>
            <tr>
                <td align="center" style="width: 100px;" >Models</td>
                <td align="center" style="width: 500px;">Huggingface Download URL</td>
                <td align="center" style="width: 500px;">Tencent Cloud Download URL</td>
            </tr>
            <tr>
                <td style="width: 100px;">Hunyuan-A52B-Instruct-FP8</td>
                <td style="width: 500px;"><a href="https://huggingface.co/tencent/Tencent-Hunyuan-Large/tree/main/Hunyuan-A52B-Instruct-FP8" style="color: red;">Hunyuan-A52B-Instruct-FP8</a></td>
                <td style="width: 500px;"><a href="https://cdn-large-model.hunyuan.tencent.com/Hunyuan-A52B-Instruct-128k-fp8-20241116.zip" style="color: red;">Hunyuan-A52B-Instruct-FP8</a></td>
            </tr>
            <tr>
                <td style="width: 100px;">Hunyuan-A52B-Instruct</td>
                <td style="width: 500px;"><a href="https://huggingface.co/tencent/Tencent-Hunyuan-Large/tree/main/Hunyuan-A52B-Instruct" style="color: red;">Hunyuan-A52B-Instruct</a></td>
                <td style="width: 500px;"><a href="https://cdn-large-model.hunyuan.tencent.com/Hunyuan-A52B-Instruct-128k-20241116.zip" style="color: red;">Hunyuan-A52B-Instruct</a></td>
            </tr>
            <tr>
                <td style="width: 100px;">Hunyuan-A52B-Pretrain</td>
                <td style="width: 500px;"><a href="https://huggingface.co/tencent/Tencent-Hunyuan-Large/tree/main/Hunyuan-A52B-Pretrain" style="color: red;">Hunyuan-A52B-Pretrain</a></td>
                <td style="width: 500px;"><a href="https://cdn-large-model.hunyuan.tencent.com/Hunyuan-A52B-Pretrain-256k.zip" style="color: red;">Hunyuan-A52B-Pretrain</a></td>
            </tr>
        </tbody>
    </table>
</p>

<p></p>


## Model Introduction

With the rapid development of artificial intelligence technology, large language models (LLMs) have made significant progress in fields such as natural language processing, computer vision, and scientific tasks. However, as the scale of these models increases, optimizing resource consumption while maintaining high performance has become a key challenge. To address this challenge, we have explored Mixture of Experts (MoE) models. The currently unveiled Hunyuan-Large (Hunyuan-MoE-A52B) model is the largest open-source Transformer-based MoE model in the industry, featuring a total of 389 billion parameters and 52 billion active parameters. This is currently the largest open-source Transformer-based MoE model in the industry, featuring a total of 389 billion parameters and 52 billion active parameters. 

By open-sourcing the Hunyuan-Large model and revealing related technical details, we hope to inspire more researchers with innovative ideas and collectively advance the progress and application of AI technology. We welcome you to join our open-source community to explore and optimize future AI models together!
 
### Introduction to Technical Advantages

#### Model
- **High-Quality Synthetic Data**: By enhancing training with synthetic data, Hunyuan-Large can learn richer representations, handle long-context inputs, and generalize better to unseen data.

- **KV Cache Compression**: Utilizes Grouped Query Attention (GQA) and Cross-Layer Attention (CLA) strategies to significantly reduce memory usage and computational overhead of KV caches, improving inference throughput.

- **Expert-Specific Learning Rate Scaling**: Sets different learning rates for different experts to ensure each sub-model effectively learns from the data and contributes to overall performance.

- **Long-Context Processing Capability**: The pre-trained model supports text sequences up to 256K, and the Instruct model supports up to 128K, significantly enhancing the ability to handle long-context tasks.

- **Extensive Benchmarking**: Conducts extensive experiments across various languages and tasks to validate the practical effectiveness and safety of Hunyuan-Large.

#### Inference Framework
- This open-source release offers two inference backend options tailored for the Hunyuan-Large model: the popular [vLLM-backend](https://github.com/quinnrong94/vllm/tree/dev_hunyuan) and the TensorRT-LLM Backend. Both solutions include optimizations for enhanced performance. For instance, the introduction of a new CLA structure significantly reduces GPU memory usage, achieving a 50% savings in the KV-Cache portion, which ensures efficient handling of long text scenarios. Additionally, by employing FP8 quantization, we achieve a 50% reduction in memory usage compared to traditional FP16/BF16 quantization, while maintaining precision and resulting in a 70% increase in throughput. Meanwhile, by leveraging the efficient operators at the core of TRT-LLM, the performance of the TRT-LLM solution surpasses that of vLLM by over 30%. The TRT-LLM solution is widely used in Tencent's Hunyuan project. In this release, we are initially open-sourcing the vLLM solution, with plans to release the TRT-LLM solution in the near future.

#### Training Framework

- The Hunyuan-Large open-source model is fully compatible with the Hugging Face format, enabling researchers and developers to perform model fine-tuning using the hf-deepspeed framework. Additionally, we support training acceleration through the use of flash attention. To further assist in the adoption process, we have made the corresponding training scripts and model implementations publicly available to the community through this release, facilitating subsequent model training and fine-tuning operations based on these resources.

&nbsp;

## Related News
* 2024.11.25 Our self-developed long-context benchmark, i.e., PenguinScrolls, has been officially released! You can explore the project on [GitHub](https://github.com/Penguin-Scrolls/PenguinScrolls) and access the dataset on [Hugging Face](https://huggingface.co/datasets/Penguin-Scrolls/PenguinScrolls).
* 2024.11.18 **Hunyuan-A52B-Instruct** and **Hunyuan-A52B-Instruct-FP8** model update. 
* 2024.11.5 [TI Platform](https://cloud.tencent.com/product/ti) has integrated Hunyuan-Large model already, you can easily train and deploy it in just a few steps. Visit [Chat with Hunyuan-Large](https://console.cloud.tencent.com/tione/v2/aimarket/detail/hunyuan_series?PublicAlgoGroupId=hunyuan-large-chat&detailTab=demo) to experience real-time conversations with the model, and explore [Hunyuan-Large Best Practice on TI](https://cloud.tencent.com/document/product/851/112032) to create your own customized Hunyuan-Large model. 
* 2024.11.5 We have open-sourced **Hunyuan-A52B-Pretrain**, **Hunyuan-A52B-Instruct**, and **Hunyuan-A52B-Instruct-FP8** on Hugging Face. We also released a technical report and a training and inference operations manual, providing detailed information on the model's capabilities and the procedures for training and inference.




## Benchmark Evaluation
**Hunyuan-Large pre-trained model** achieves the best overall performance compared to both Dense and MoE based 
competitors having similar activated parameter sizes.  For aggregated benchmarks such as MMLU, MMLU-Pro, and CMMLU, 
Hunyuan-Large consistently achieves the best performance, confirming its comprehensive abilities on aggregated tasks.
Hunyuan-Large also shows superior performance in commonsense understanding and reasoning, and classical NLP tasks 
such as QA and reading comprehension tasks (e.g., CommonsenseQA, PIQA and TriviaQA).  
For the mathematics capability, Hunyuan-Large outperforms all baselines in math datasets of GSM8K and MATH, 
and also gains the best results on CMATH in Chinese.We also observe that Hunyuan-Large achieves the overall 
best performance in all Chinese tasks (e.g., CMMLU, C-Eval).

| Model            | LLama3.1-405B | LLama3.1-70B | Mixtral-8x22B | DeepSeek-V2 | Hunyuan-Large |
|------------------|---------------|--------------|---------------|-------------|---------------|
| MMLU             | 85.2          | 79.3         | 77.8          | 78.5        | **88.4**          |
| MMLU-Pro         | **61.6**          | 53.8         | 49.5          | -           | 60.2          |
| BBH              | 85.9          | 81.6         | 78.9          | 78.9        | **86.3**          |
| HellaSwag        | -             | -            | **88.7**      | 87.8        | 86.8          |
| CommonsenseQA    | 85.8          | 84.1         | 82.4          | -           | **92.9**          |
| WinoGrande       | 86.7          | 85.3         | 85.0          | 84.9        | **88.7**          |
| PIQA             | -             | -            | 83.6          | 83.7        | **88.3**          |
| NaturalQuestions | -             | -            | 39.6          | 38.7        | **52.8**          |
| DROP             | 84.8          | 79.6         | 80.4          | 80.1        | **88.9**          |
| ARC-C            | **96.1**          | 92.9         | 91.2          | 92.4        | 95.0          |
| TriviaQA         | -             | -            | 82.1          | 79.9        | **89.2**          |
| CMMLU            | -             | -            | 60.0          | 84.0        | **90.2**          |
| C-Eval           | -             | -            | 59.6          | 81.7        | **91.9**          |
| C3               | -             | -            | 71.4          | 77.4        | **82.3**          |
| GSM8K            | 89.0          | 83.7         | 83.7          | 79.2        | **92.8**          |
| MATH             | 53.8          | 41.4         | 42.5          | 43.6        | **69.8**          |
| CMATH            | -             | -            | 72.3          | 78.7        | **91.3**          |
| HumanEval        | 61.0          | 58.5         | 53.1          | 48.8        | **71.4**          |
| MBPP             | **73.4**          | 68.6         | 64.2          | 66.6        | 72.6          |

**Hunyuan-Large-Instruct** achieves consistent improvements on most types of tasks compared to LLMs having similar 
activated parameters, indicating the effectiveness of our post-training.    Delving into the model performance 
in different categories of benchmarks, we find that our instruct model achieves the best performance on MMLU and MATH dataset.  
Notably, on the MMLU dataset, our model demonstrates a significant improvement, outperforming the LLama3.1-405B model by 2.6%.   
This enhancement is not just marginal but indicative of the Hunyuan-Large-Instruct‚Äôs superior understanding and reasoning 
capabilities across a wide array of language understanding tasks. The model‚Äôs prowess is further underscored in its performance 
on the MATH dataset, where it surpasses the LLama3.1-405B by a notable margin of 3.6%.  
Remarkably, this leap in accuracy is achieved with only 52 billion activated parameters, underscoring the efficiency of our model.

| Model                | LLama3.1 405B Inst. | LLama3.1 70B Inst. | Mixtral 8x22B Inst. | DeepSeekV2.5 Chat | Hunyuan-Large Inst. |
|----------------------|---------------------|--------------------|---------------------|-------------------|---------------------|
| MMLU                 | 87.3                | 83.6               | 77.8                | 80.4              | **89.9**            |
| CMMLU                | -                   | -                  | 61.0                | -                 | **90.4**            |
| C-Eval               | -                   | -                  | 60.0                | -                 | **88.6**            |
| BBH                  | -                   | -                  | 78.4                | 84.3              | **89.5**            |
| HellaSwag            | -                   | -                  | 86.0                | **90.3**          | 88.5                |
| ARC-C                | **96.9**            | 94.8               | 90.0                | -                 | 94.6                |
| GPQA_diamond         | **51.1**            | 46.7               | -                   | -                 | 42.4                |
| MATH                 | 73.8                | 68.0               | 49.8                | 74.7              | **77.4**            |
| HumanEval            | 89.0                | 80.5               | 75.0                | 89.0              | **90.0**            |
| AlignBench           | 6.0                 | 5.9                | 6.2                 | 8.0               | **8.3**             |
| MT-Bench             | 9.1                 | 8.8                | 8.1                 | 9.0               | **9.4**             |
| IFEval strict-prompt | **86.0**            | 83.6               | 71.2                | -                 | 85.0                |
| Arena-Hard |  69.3            | 55.7               |  -                | 76.2                 | **81.8**            |
| AlpacaEval-2.0 | 39.3            | 34.3               | 30.9                | 50.5                 | **51.8**            |





&nbsp;

## Data

Hunyuan-Large provides model training-related processes. In this section, you can process the training data format for use in model training.

### Training Data Format and Processing

Training data is processed into a messages format as follows. The default system prompt for training and inference is "You are a helpful assistant." Below are examples of single-turn and multi-turn data:


```python
# Single-Turn Data Format

messages = [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Êµ∑Ê∞¥‰∏∫‰ªÄ‰πàÊòØÂí∏ÁöÑ" },
    {"role": "assistant", "content": "Êµ∑Ê∞¥ÊòØÂí∏ÁöÑ‰∏ªË¶ÅÊòØÂõ†‰∏∫ÂÖ∂‰∏≠Âê´ÊúâËÆ∏Â§öÊ∫∂Ëß£Âú®Ê∞¥‰∏≠ÁöÑÁõêÁ±ªÂíåÁüøÁâ©Ë¥®„ÄÇËøô‰∫õÁõêÁ±ªÂíåÁüøÁâ©Ë¥®Êù•Ëá™‰∫éÂú∞ÁêÉË°®Èù¢ÁöÑÂ≤©Áü≥ÂíåÂúüÂ£§‰∏≠ÁöÑÂåñÂ≠¶Áâ©Ë¥®ÔºåÈöèÁùÄÊó∂Èó¥ÁöÑÊé®ÁßªÔºåÂÆÉ‰ª¨Ë¢´Â∏¶Âà∞‰∫ÜÊµ∑Ê¥ã‰∏≠„ÄÇÂΩìÊµ∑Ê∞¥Ëí∏ÂèëÊó∂ÔºåÊ∞¥ÂàÜËí∏ÂèëÊéâ‰∫ÜÔºå‰ΩÜÁõêÁ±ªÂíåÁüøÁâ©Ë¥®‰ªçÁÑ∂ÁïôÂú®Ê∞¥‰∏≠ÔºåÂØºËá¥Êµ∑Ê∞¥ÂèòÂæóÊõ¥Âä†Âí∏Âë≥„ÄÇÂõ†Ê≠§ÔºåÊµ∑Ê∞¥ÁöÑÂí∏Â∫¶ÊòØÁî±ÂÖ∂‰∏≠ÁöÑÁõêÁ±ªÂíåÁüøÁâ©Ë¥®ÁöÑÂê´ÈáèÂÜ≥ÂÆöÁöÑ„ÄÇ"}
]

# Multi-Turn Data Format
messages = [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Áü•ÈÅìÈáçÂ∫ÜÊ£ÆÊûóËøôÈÉ®ÁîµÂΩ±ÂêóÔºü" },
    {"role": "assistant", "content": "Áü•ÈÅìÂëÄÔºåÊòØ‰∏ÄÈÉ®Áî±ÁéãÂÆ∂Âç´ÂØºÊºîÁöÑÁâáÂ≠ê„ÄÇ" },
    {"role": "user", "content": " ËÄå‰∏ªÊºîÈáåÊõ¥ÊòØÊúâÁéãËè≤Ôºå‰∏Ä‰∏äÊò†‰æøÂèóÂà∞ËøΩÊçß„ÄÇ" },
    {"role": "assistant", "content": "ÊâÄ‰ª•Ê≠§ÁâáËé∑Âæó‰∫ÜÁ¨¨14Â±äÈ¶ôÊ∏ØÁîµÂΩ±ÈáëÂÉèÂ•ñÊúÄ‰Ω≥ÂΩ±ÁâáÂ•ñ„ÄÇ"}
]

from tokenizers import ByteLevelBPETokenizer
from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("./models", use_fast=False, trust_remote_code=True)

ids = tokenizer.apply_chat_template(messages)

```



For more usage references, see the `./models/test.py` file.

&nbsp;

## Quick Start

You can quickly get started by referring to the content in the <a href="examples/README.md">Quick Start Guide</a>.

## Model Training

To simplify the Training process, HunyuanLLM provides a pre-built Docker image:

 [hunyuaninfer/hunyuan-large](https://hub.docker.com/repository/docker/hunyuaninfer/hunyuan-large/general). 

### Hardware Requirements

Tested on H20, without enabling `make_moe_param_leaf_module` and using `zero3+offload`, with a `max_seq_length` of 2048, full fine-tuning requires at least 32 GPUs, and LoRA fine-tuning requires at least 8 GPUs.

### Training Performance

With the minimum configuration (8 GPUs for LoRA fine-tuning), `per_device_train_batch_size` is set to 1, and `gradient_accumulation_steps` is set to 1, resulting in approximately 35 seconds per iteration.

### Launch Method

Refer to: [HuggingFace Transformers Trainer](https://huggingface.co/docs/transformers/v4.19.2/en/main_classes/trainer)

#### Single-Machine Training

In the `train` directory, execute:

```sh
pip install -r requirements.txt
bash train.sh
```

#### Multi-Machine Training

To start training on multiple machines, follow the steps below and ensure that all machines are within the same cluster.

##### Configure Passwordless SSH Login Between Machines

The following steps use two machines as an example, with their IPs represented as `${ip1}` and `${ip2}`. These operations are performed within a Docker container.

First, configure passwordless SSH between containers on each machine.


```sh
ssh-keygen			# Generate id_rsa and id_rsa.pub for passwordless login
ssh-keygen -t rsa -A    # Generate /etc/ssh/ssh_host_rsa_key and ssh_host_ecdsa_key for starting 'SSH listen' later
/usr/sbin/sshd -p 36005 -o ListenAddress=0.0.0.0        # Start SSH listen
echo "Port 36005" > ~/.ssh/config   # Change SSH connection port to 36005
passwd root    # Set root password to avoid alerts from monitoring platforms
```


Note: The `36005` here is an example. You can choose any port, but ensure that the port is **open** and **not occupied by other processes**.

Next, within the container on each machine, execute:

```sh
cat ~/.ssh/id_rsa.pub
```

**Copy the output SSH public key and paste it into the `~/.ssh/authorized_keys` file, with one public key per line. This must be done on every machine.** Ultimately, the `~/.ssh/authorized_keys` file on each machine should be identical and contain the public keys of all machines.

It's important to note that during multi-node training, the code executed on each node must be consistent. It is recommended to mount a shared network drive. If mounting a shared drive is not possible, you need to manually copy the dataset, scripts, and code to the same directory on all machines.

##### Start Multi-Machine Training

Once the preparation steps are completed and dependencies are confirmed to be installed (if not, execute `pip install -r requirements.txt` to install), you can add the following configuration at the beginning of `train.sh`:

```shell
export HOST_GPU_NUM=8
# Current machine IP
export LOCAL_IP=${ip1}
# Multi-node machine IPs, separated by commas
export NODE_IP_LIST="${ip1}:8,${ip2}:8"
# Number of machine nodes
export NODES=2
export NODE_NUM=$((${NODES} * ${HOST_GPU_NUM}))
```

Note: Replace `${ip1}` and `${ip2}` with the actual IP addresses!

Then, on the machine with `${ip1}`, execute `bash train.sh` in the `train/` directory. Note that on the first run, you might see the following output:

```ssh
The authenticity of host '[ip]:36005 ([ip]:36005)' can't be established.
ECDSA key fingerprint is xxxxxx.
ECDSA key fingerprint is MD5:xxxxxx.
Are you sure you want to continue connecting (yes/no)?
```

At this point, type `yes` to continue.

##### Key Parameters

The key parameters in the script are as follows:

- `--deepspeed`: This parameter should point to a DeepSpeed configuration file. The `train` folder provides three default DeepSpeed configuration files: `ds_zero2_no_offload.json`, `ds_zero3_no_offload.json`, `ds_zero3_offload.json`. The required GPU memory decreases in this order.
- `--model_name_or_path`: The path to the HF pre-trained model. Ensure this path contains the `modeling_hunyuan.py` and `configuration_hunyuan.py` files; otherwise, it cannot be loaded.
- `--tokenizer_name_or_path`: The path to the tokenizer folder. Ensure this path contains the `tokenization_hy.py` file; otherwise, it cannot be loaded.
- `--train_data_file`: The path to the training file, which should be a JSONL file.
- `--output_dir`: The output directory where logs, tensorboard files, and model weights will be stored.
- `--per_device_train_batch_size`: The batch size per GPU.
- `--gradient_accumulation_steps`: The number of gradient accumulation steps. The global batch size is `per_device_train_batch_size * gradient_accumulation_steps * dp_size`.
- `--max_steps`: The total number of training steps.
- `--save_steps`: The number of steps between saving checkpoints.
- `--use_lora`: Whether to use LoRA for training. This also accepts `--lora_rank`, `--lora_alpha`, and `--lora_dropout` parameters. LoRA is applied by default to the 'q_proj', 'k_proj', 'v_proj', 'o_proj' parameters. If you need to change this, modify it in the code. Note: **When using LoRA for training, only the LoRA weights are saved, not the base model weights**. If you need to merge LoRA weights, see the "LoRA Weight Merging" section below.
- `--make_moe_param_leaf_module`: When using zero3 and MoE training, treat the MoE module as a leaf module, meaning its parameters are not split by zero3. This option is expected to significantly increase memory usage.
- `--gradient_checkpointing`: Enable gradient checkpointing.
- `--train_attention_params_only`: Whether to train only the attention parameters.
- `--learning_rate`: The maximum learning rate during training.
- `--min_lr`: The minimum learning rate during training.
- `--use_flash_attn`: ÂºÄÂêØ flash-attention ËøõË°åËÆ≠ÁªÉÂä†ÈÄü

**Note:**

- If you want to continue training from a previously saved checkpoint instead of loading pre-trained weights, specify `--resume_from_checkpoint` with the path to the checkpoint from the previous training. Do not specify `--model_name_or_path`, as this will only load the weights and not the training state.
- When continuing training from a checkpoint, there might be slight deviations in loss due to randomness introduced by some non-deterministic algorithms, which is considered normal. Refer to: [HuggingFace Transformers Trainer Randomness](https://huggingface.co/docs/transformers/main/en/perf_train_gpu_one#randomness)
- When `--model_name_or_path` is specified, all model-related parameters will be ignored.
- Samples within a batch will be padded to align with the longest sample in the batch, with each sample having a maximum length of `max_seq_length`. Any excess will be truncated.
- If you encounter warnings about bias weights not being loaded, you can ignore them, as biases are not used in Hunyuan-Large.


#### What to Do If Out of Memory?

Refer to: [DeepSpeed Configuration](https://www.deepspeed.ai/docs/config-json/)

You can try modifying the DeepSpeed configuration by removing the auto attribute from these parameters and reducing their values:

- `stage3_param_persistence_threshold`
- `stage3_prefetch_bucket_size`
- `stage3_max_reuse_distance`
- `stage3_max_reuse_distance`

#### Merging LoRA Models

The saved LoRA weights cannot be merged into the zero3 model during training because, with zero3 enabled, model weights are split across different data parallel ranks. If you want to merge LoRA weights into the base model, you can do so offline to obtain the merged weight file. Execute `merge_lora_weight.sh` to merge the LoRA weights with the base model weights. The parameters include:

- `--base_model_path`: Directory of the base model weights
- `--adapter_model_path`: Directory of the LoRA weights
- `--output_path`: Directory to save the merged weights
- `--save_dtype`: Data format for storing the merged weights, available options include: fp16, bf16, fp32

&nbsp;

## Inference and Deployment

HunyuanLLM uses TRT-LLM and vLLM for deployment. We are open sourcing the [vLLM-backend](https://github.com/quinnrong94/vllm/tree/dev_hunyuan) deployment (see Reasoning with vLLM), and the TRT-LLM deployment (see Reasoning with TRT-LLM) will be available in the near future.

## Using TRT-LLM for Inference

To be opened

## Using vLLM for Inference

### Docker:

To simplify the deployment process, HunyuanLLM provides a pre-built Docker image:

 [hunyuaninfer/hunyuan-large](https://hub.docker.com/repository/docker/hunyuaninfer/hunyuan-large/general). You only need to download the model files and start the Docker container using the code below to begin model inference.

```shell
docker run --name hunyuanLLM_infer -itd --privileged --user root --net=host --ipc=host --gpus=8 hunyuaninfer/hunyuan-large:infer-open-source
```

Note: Docker container privilege management. The above code uses privileged mode (`--privileged`) to start the Docker container, which grants the container higher privileges, increasing the risk of data leakage and cluster security threats. It is recommended to avoid using privileged mode unless necessary to reduce security risks. For scenarios where privileged mode is required, conduct a thorough security assessment and implement appropriate security monitoring and hardening measures.

### Configure Passwordless SSH Login Between Machines

The following steps use two machines as an example, with their IPs represented as `${ip1}` and `${ip2}`. These operations are performed within a Docker container.

First, run `passwd` on both machines to set a password, for example: `Tmp123,./`

Copy `inference/login_ssh.py` into the container and execute the following command, ensuring the IP and password are correctly entered.

```shell
python3 login_ssh.py --ips ${ip1},${ip2} --port 36000 --password=Tmp123,./
```

**Note üì¢: Before starting, be sure to verify multi-machine communication using VLLM's debugging script: https://docs.vllm.ai/en/latest/getting_started/debugging.html**

### BF16 Deployment

BF16 requires 16 H20 GPUs for deployment. After verifying that multi-machine communication is correct, execute the following steps:

Before running the commands, set the following environment variables:

```shell
${LOCAL_IP}: The IP corresponding to bond1 on the current machine
${MODEL_PATH}: Path to the Hunyuan LLM model
```

#### Step 1: Start Ray

Ray is an open-source library for parallel and distributed Python. In this section, we use Ray to achieve multi-machine communication.

Ray Component Configuration Hardening: The default configuration of Ray components does not enable authentication mechanisms for service ports (e.g., 6379, 8265), posing risks of unauthorized access and command execution. It is recommended to deploy Ray components only in trusted internal network environments or ensure strict access control list (ACL) policies are implemented for these ports to prevent unauthorized network access.

First, start Ray on each node (either in the background or by keeping the terminal running):

On the head node:
```shell
export VLLM_HOST_IP=${LOCAL_IP}
export NCCL_SOCKET_IFNAME=bond1
export GLOO_SOCKET_IFNAME=bond1
ray start --block --head --node-ip-address=${LOCAL_IP} --port=6379
```

On all worker nodes:

Note: Replace `{HEAD NODE $LOCAL_IP}` with the actual `${LOCAL_IP}` of the head node.
```shell
export VLLM_HOST_IP=${LOCAL_IP}
export NCCL_SOCKET_IFNAME=bond1
export GLOO_SOCKET_IFNAME=bond1
ray start --block --address={HEAD NODE $LOCAL_IP}:6379 --node-ip-address=${LOCAL_IP}
```
If Ray fails to start, execute `ray stop` and then run the above commands again.

#### Step 2: Execute Inference

#### Method 1: Command Line Inference

Below is a code snippet demonstrating how to quickly request the chat model using `vLLM`:

Note: vLLM Component Remote Code Execution Protection. In the code below, if the `trust-remote-code` configuration option of the vLLM component is enabled, it will allow loading and executing code from remote model repositories, which may lead to the execution of malicious code. Unless explicitly required by business needs, it is recommended to keep this configuration option disabled to reduce potential security threats.

```python
import os
from vllm import LLM, SamplingParams

model_path=os.environ.get('MODEL_PATH')

llm = LLM(model=model_path,
        tokenizer=model_path,
        trust_remote_code=True,
        max_model_len=10240,
        dtype='bfloat16',
        tensor_parallel_size=16,
        pipeline_parallel_size=1,
        disable_log_stats=False,
        gpu_memory_utilization=0.98,
        disable_custom_all_reduce=True,
        #distributed_executor_backend='ray',
        enforce_eager=True,
        max_num_seqs=8,
        use_v2_block_manager=True,
        quantization=None)

prompts = ["Êµ∑Ê∞¥‰∏∫‰ªÄ‰πàÊòØÂí∏ÁöÑ"]

sampling_params = SamplingParams(
    temperature=0.7, top_p=0.6, max_tokens=200, top_k=20, repetition_penalty=1.05)

outputs = llm.generate(prompts, sampling_params)

# Print the outputs.
for output in outputs:
    prompt = output.prompt
    generated_text = output.outputs[0].text
    print(f"Prompt: {prompt!r}, Generated text: {generated_text!r}")
```

#### Method 2: Service-Based Inference

Below we demonstrate how to deploy the model using `vLLM` in a service-based manner and make requests.

Run the following on the head node:

```shell
export VLLM_HOST_IP=${LOCAL_IP}
export NCCL_SOCKET_IFNAME=bond1
export GLOO_SOCKET_IFNAME=bond1
```

Next, start the service by running:

```shell
cd inference
sh run_server.sh
```

*Tips*: Troubleshooting, if you encounter the following error:

```python
ray.exceptions.RaySystemError: System error: No module named 'transformers_modules' traceback: Traceback (most recent call last):
ModuleNotFoundError: No module named 'transformers_modules'
```

Copy the `~/.cache/huggingface/modules/` directory from the head node to the corresponding path on all worker nodes.

After successfully running `run_server.sh`, execute the request script:

```shell
sh openapi.sh
```

Be sure to modify `${LOCAL_IP}` and `${MODEL_PATH}` in `openapi.sh` to values match the corresponding service.


### Quantized Model Deployment:

This section describes the process of deploying a quantized model using vLLM.

Image: The deployment image is the same as for BF16.

#### Int8 Quantized Model Deployment:

To deploy the Int8-weight-only version of the Hunyuan-L model, simply set the environment variables in `run_server_int8.sh`:

```shell
${MODEL_PATH}: Path to the BF16 model
${LOCAL_IP}: The IP corresponding to bond1 on the current machine
```

Then, start the Int8 service by running:

```shell
sh run_server_int8.sh
```

After successfully running `run_server_int8.sh`, execute the request script:

```shell
sh openapi.sh
```

#### FP8 Quantized Model Deployment:

To deploy the W8A8C8 version of the Hunyuan-L model, simply set the environment variables in `run_server_fp8.sh`:

```shell
${MODEL_PATH}: Path to the FP8 model
${LOCAL_IP}: The IP corresponding to bond1 on the current machine
```

Then, start the FP8 service by running:

```shell
sh run_server_fp8.sh
```

After successfully running `run_server_fp8.sh`, execute the request script:

```shell
sh openapi.sh
```

#### FP8 BENCHMARK

This part introduces the Benchmark of Hunyuan Large Instruct FP8 quantitative model.

| Dataset | BF16 | W8A8C8-FP8 |
|---------|------|------------|
| ARC-C   | 94.6 | 94.2       |
| C-Eval  | 88.6 | 89.2       |
| CMMLU   | 90.4 | 89.8       |
| MMLU    | 89.9 | 88.9       |

### Inference Performance

This section presents the efficiency test results of deploying various models (original and quantized) using vLLM, including inference speed (tokens/s) under different batch sizes.

| Inference Framework | Model                                                                                                  | Number of GPUs (H20) | input_length | batch=1 | batch=4 |
| ------------------- | ------------------------------------------------------------------------------------------------------ | -------------------- | ------------ |---------|---------|
| vLLM                | Hunyuan-Large                                                                                              | 16                   | 2048         | 20.2    | 75.5    |
| vLLM                | Hunyuan-Large(int8 weight only)                                                                            | 8                    | 2048         | 19.3    | 73.6    |
| vLLM                | Hunyuan-Large(W8A8C8-FP8)                                                                                  | 8                    | 2048         | 19.8    | 74.9    |

## Tokenizer

The tokenizer used in the HunYuan-Large model balances compression rate and effectiveness, ensuring that embeddings are sufficiently trained. The vocabulary includes 100K tokens integrated from tiktoken. Additionally, we trained an extra 29K Chinese tokens using a large amount of high-quality Chinese training data to enhance the model's Chinese capabilities and the tokenizer's compression rate. Combined, our new tokenizer improves the compression rate compared to the LLaMA3 tokenizer, increasing from 2.78 characters/token to 3.13 characters/token.

## Hunyuan API

You can experience our Hunyuan-Large model on Tencent Cloud. For details, please visit: https://cloud.tencent.com/document/product/1729/97730.

## Interactive Demo Web

The Hunyuan-Large web demo is now open. Visit https://huggingface.co/spaces/tencent/Hunyuan-Large to easily experience our model.

## Training/Inference on TI
Tencent Cloud's [TI Platform](https://cloud.tencent.com/product/ti) is a comprehensive machine learning platform tailored for AI engineers. With the Hunyuan-Large model already integrated, you can easily train and deploy it in just a few steps. Visit [Chat with Hunyuan-Large](https://console.cloud.tencent.com/tione/v2/aimarket/detail/hunyuan_series?PublicAlgoGroupId=hunyuan-large-chat&detailTab=demo) to experience real-time conversations with the model, and explore [Hunyuan-Large Best Practice on TI](https://cloud.tencent.com/document/product/851/112032) to create your own customized Hunyuan-Large model. 


## Citation
If you find our work helpful, feel free to give us a cite.

```
@misc{sun2024hunyuanlargeopensourcemoemodel,
      title={Hunyuan-Large: An Open-Source MoE Model with 52 Billion Activated Parameters by Tencent}, 
      author={Xingwu Sun and Yanfeng Chen and Yiqing Huang and Ruobing Xie and Jiaqi Zhu and Kai Zhang and Shuaipeng Li and Zhen Yang and Jonny Han and Xiaobo Shu and Jiahao Bu and Zhongzhi Chen and Xuemeng Huang and Fengzong Lian and Saiyong Yang and Jianfeng Yan and Yuyuan Zeng and Xiaoqin Ren and Chao Yu and Lulu Wu and Yue Mao and Tao Yang and Suncong Zheng and Kan Wu and Dian Jiao and Jinbao Xue and Xipeng Zhang and Decheng Wu and Kai Liu and Dengpeng Wu and Guanghui Xu and Shaohua Chen and Shuang Chen and Xiao Feng and Yigeng Hong and Junqiang Zheng and Chengcheng Xu and Zongwei Li and Xiong Kuang and Jianglu Hu and Yiqi Chen and Yuchi Deng and Guiyang Li and Ao Liu and Chenchen Zhang and Shihui Hu and Zilong Zhao and Zifan Wu and Yao Ding and Weichao Wang and Han Liu and Roberts Wang and Hao Fei and Peijie She and Ze Zhao and Xun Cao and Hai Wang and Fusheng Xiang and Mengyuan Huang and Zhiyuan Xiong and Bin Hu and Xuebin Hou and Lei Jiang and Jiajia Wu and Yaping Deng and Yi Shen and Qian Wang and Weijie Liu and Jie Liu and Meng Chen and Liang Dong and Weiwen Jia and Hu Chen and Feifei Liu and Rui Yuan and Huilin Xu and Zhenxiang Yan and Tengfei Cao and Zhichao Hu and Xinhua Feng and Dong Du and Tinghao She and Yangyu Tao and Feng Zhang and Jianchen Zhu and Chengzhong Xu and Xirui Li and Chong Zha and Wen Ouyang and Yinben Xia and Xiang Li and Zekun He and Rongpeng Chen and Jiawei Song and Ruibin Chen and Fan Jiang and Chongqing Zhao and Bo Wang and Hao Gong and Rong Gan and Winston Hu and Zhanhui Kang and Yong Yang and Yuhong Liu and Di Wang and Jie Jiang},
      year={2024},
      eprint={2411.02265},
      archivePrefix={arXiv},
      primaryClass={cs.CL},
      url={https://arxiv.org/abs/2411.02265}, 
}
```
<br>

## Contact Us

If you would like to leave a message for our R&D and product teams, Welcome to contact our open-source team . You can also contact us via email (hunyuan_opensource@tencent.com).



</document_content>
</document>
<document index="2">
<source>./README_CN.md</source>
<document_content>
<p align="left">
   <a href="README.md">English</a>  ÔΩú ‰∏≠Êñá</a>&nbsp
</p>
<br><br>

<p align="center">
 <img src="https://dscache.tencent-cloud.cn/upload/uploader/hunyuan-64b418fd052c033b228e04bc77bbc4b54fd7f5bc.png" width="400"/> <br>
</p><p></p>

<p align="center">
    ü´£&nbsp<a href="https://huggingface.co/tencent/Tencent-Hunyuan-Large"><b>Hugging Face</b></a>&nbsp&nbsp |  &nbsp&nbspüñ•Ô∏è&nbsp&nbsp<a href="https://llm.hunyuan.tencent.com/" style="color: red;"><b>ÂÆòÁΩë</b></a>&nbsp&nbspÔΩú&nbsp&nbspüïñ&nbsp&nbsp <a href="https://cloud.tencent.com/product/hunyuan" ><b>Ê∑∑ÂÖÉAPI</b></a>ÔΩú&nbsp&nbspüê≥&nbsp&nbsp <a href="https://gitee.com/Tencent/Tencent-Hunyuan-Large" ><b>Gitee</b></a>
</p><p align="center">
    <a href="https://arxiv.org/abs/2411.02265" style="color: red;"><b>ÊäÄÊúØÊä•Âëä</b></a>&nbsp&nbspÔΩú&nbsp&nbsp <a href="https://huggingface.co/spaces/tencent/Hunyuan-Large"><b>Demo</b></a>&nbsp&nbsp&nbspÔΩú&nbsp&nbsp <a href="https://cloud.tencent.com/document/product/851/112032" style="color: red;"><b>Tencent Cloud TI</b></a>&nbsp&nbsp&nbsp</p>



## Ê®°Âûã‰ªãÁªç

ÈöèÁùÄ‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÁöÑÂø´ÈÄüÂèëÂ±ïÔºåÂ§ßÂûãËØ≠Ë®ÄÊ®°ÂûãÔºàLLMsÔºâÂú®Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ„ÄÅËÆ°ÁÆóÊú∫ËßÜËßâÂíåÁßëÂ≠¶‰ªªÂä°Á≠âÈ¢ÜÂüüÂèñÂæó‰∫ÜÊòæËëóËøõÂ±ï„ÄÇÁÑ∂ËÄåÔºåÈöèÁùÄÊ®°ÂûãËßÑÊ®°ÁöÑÊâ©Â§ßÔºåÂ¶Ç‰ΩïÂú®‰øùÊåÅÈ´òÊÄßËÉΩÁöÑÂêåÊó∂‰ºòÂåñËµÑÊ∫êÊ∂àËÄóÊàê‰∏∫‰∏Ä‰∏™ÂÖ≥ÈîÆÊåëÊàò„ÄÇ‰∏∫‰∫ÜÂ∫îÂØπËøô‰∏ÄÊåëÊàòÔºåÊàë‰ª¨Á†îÁ©∂‰∫ÜÊ∑∑Âêà‰∏ìÂÆ∂ÔºàMoEÔºâÊ®°ÂûãÔºåÂΩìÂâç‰∫ÆÁõ∏ÁöÑHunyuan-LargeÔºàHunyuan-MoE-A52BÔºâÊ®°ÂûãÔºåËøôÊòØÁõÆÂâç‰∏öÁïåÂ∑≤ÁªèÂºÄÊ∫êÁöÑÂü∫‰∫éTransformerÁöÑÊúÄÂ§ßMoEÊ®°ÂûãÔºåÊã•Êúâ3890‰∫øÊÄªÂèÇÊï∞Âíå520‰∫øÊøÄÊ¥ªÂèÇÊï∞„ÄÇ

Êú¨Ê¨°ÈÄöËøáÂºÄÊ∫êHunyuan-LargeÁöÑÊäÄÊúØÊàêÊûúÔºåÊàë‰ª¨Â∏åÊúõÊøÄÂèëÊõ¥Â§öÁ†îÁ©∂ËÄÖÁöÑÂàõÊñ∞ÁÅµÊÑüÔºåÂÖ±ÂêåÊé®Âä®AIÊäÄÊúØÁöÑËøõÊ≠•ÂíåÂ∫îÁî®„ÄÇÊ¨¢ËøéÂä†ÂÖ•Êàë‰ª¨ÁöÑÂºÄÊ∫êÁ§æÂå∫ÔºåÂÖ±ÂêåÊé¢Á¥¢Âíå‰ºòÂåñÊú™Êù•ÁöÑAIÊ®°ÂûãÔºÅ

### ÊäÄÊúØ‰ºòÂäø‰ªãÁªç

#### Ê®°Âûã  
- **È´òË¥®ÈáèÂêàÊàêÊï∞ÊçÆ**ÔºöÈÄöËøáÂêàÊàêÊï∞ÊçÆÂ¢ûÂº∫ËÆ≠ÁªÉÔºåHunyuan-LargeËÉΩÂ§üÂ≠¶‰π†Âà∞Êõ¥‰∏∞ÂØåÁöÑË°®Á§∫ÔºåÂ§ÑÁêÜÈïø‰∏ä‰∏ãÊñáËæìÂÖ•ÔºåÂπ∂Êõ¥Â•ΩÂú∞Ê≥õÂåñÂà∞Êú™ËßÅÊï∞ÊçÆ

- **KVÁºìÂ≠òÂéãÁº©**ÔºöÈááÁî®ÂàÜÁªÑÊü•ËØ¢Ê≥®ÊÑèÂäõÔºàGQAÔºâÂíåË∑®Â±ÇÊ≥®ÊÑèÂäõÔºàCLAÔºâÁ≠ñÁï•ÔºåÊòæËëóÂáèÂ∞ë‰∫ÜKVÁºìÂ≠òÁöÑÂÜÖÂ≠òÂç†Áî®ÂíåËÆ°ÁÆóÂºÄÈîÄÔºåÊèêÈ´ò‰∫ÜÊé®ÁêÜÂêûÂêê

- **‰∏ìÂÆ∂ÁâπÂÆöÂ≠¶‰π†ÁéáÁº©Êîæ**Ôºö‰∏∫‰∏çÂêå‰∏ìÂÆ∂ËÆæÁΩÆ‰∏çÂêåÁöÑÂ≠¶‰π†ÁéáÔºåÁ°Æ‰øùÊØè‰∏™Â≠êÊ®°ÂûãÈÉΩËÉΩÊúâÊïàÂú∞‰ªéÊï∞ÊçÆ‰∏≠Â≠¶‰π†ÔºåÂπ∂‰∏∫Êï¥‰ΩìÊÄßËÉΩÂÅöÂá∫Ë¥°ÁåÆ

- **Èïø‰∏ä‰∏ãÊñáÂ§ÑÁêÜËÉΩÂäõ**ÔºöÈ¢ÑËÆ≠ÁªÉÊ®°ÂûãÊîØÊåÅÈ´òËææ256KÁöÑÊñáÊú¨Â∫èÂàóÔºåInstructÊ®°ÂûãÊîØÊåÅ128KÁöÑÊñáÊú¨Â∫èÂàóÔºåÊòæËëóÊèêÂçá‰∫ÜÈïø‰∏ä‰∏ãÊñá‰ªªÂä°ÁöÑÂ§ÑÁêÜËÉΩÂäõ

- **ÂπøÊ≥õÁöÑÂü∫ÂáÜÊµãËØï**ÔºöÂú®Â§öÁßçËØ≠Ë®ÄÂíå‰ªªÂä°‰∏äËøõË°åÂπøÊ≥õÂÆûÈ™åÔºåÈ™åËØÅ‰∫ÜHunyuan-LargeÁöÑÂÆûÈôÖÂ∫îÁî®ÊïàÊûúÂíåÂÆâÂÖ®ÊÄß

#### Êé®ÁêÜÊ°ÜÊû∂
- Hunyuan-LargeÊ®°ÂûãÊîØÊåÅ TRT-LLM-backend Âíå [vLLM-backend](https://github.com/quinnrong94/vllm/tree/dev_hunyuan) Êé®ÁêÜÊ°ÜÊû∂„ÄÇÊàë‰ª¨Âú®ÂºÄÊ∫êÊ°ÜÊû∂ÁöÑÂü∫Á°Ä‰∏äÈÄÇÈÖç‰∫ÜHunyuan-LargeÊ®°ÂûãÔºåË≠¨Â¶ÇÔºåÊñ∞Â¢ûÁöÑCLAÁªìÊûÑÂèØ‰ª•ÂæàÂ§ßÁ®ãÂ∫¶ËäÇÁ∫¶ÊòæÂ≠ò(KV-CacheÈÉ®ÂàÜËäÇÁúÅ50%)Ôºå‰øùÈöúË∂ÖÈïøÊñáÊú¨Âú∫ÊôØ„ÄÇÊ≠§Â§ñÈÄöËøáFP8ÁöÑÈáèÂåñ‰ºòÂåñÔºåÁõ∏ÊØîFP16/BF16Â∏∏ËßÑÈáèÂåñÔºåÂú®ÊúÄÂ§ßÈôêÂ∫¶‰øùÈöúÁ≤æÂ∫¶ÁöÑÊù°‰ª∂‰∏ãÔºåËäÇÁúÅ50%ÊòæÂ≠òÔºåÂêûÂêêÊèêÂçá70%„ÄÇÂêåÊó∂ÔºåÂü∫‰∫éTRT-LLMÁöÑÂ∫ïÂ±ÇÈ´òÊïàÁÆóÂ≠êÔºåÂÖ∂ÊÄßËÉΩÁõ∏ÊØîvLLMÊèêÂçá30%‰ª•‰∏äÔºåÁõÆÂâçTRT-LLMÊñπÊ°àÂú®ËÖæËÆØÊ∑∑ÂÖÉÈ°πÁõÆÂπøÊ≥õ‰ΩøÁî®„ÄÇÊú¨Ê¨°‰ºòÂÖàÂºÄÊ∫êvLLMÊ°ÜÊû∂ÔºåTRT-LLMÂ∞ÜÂú®ËøëÊúüÊé®Âá∫„ÄÇ

#### ËÆ≠ÁªÉÊ°ÜÊû∂
- Hunyuan-LargeÂºÄÊ∫êÊ®°ÂûãÂ∑≤ÁªèÊîØÊåÅhuggingfaceÊ†ºÂºèÔºåÊîØÊåÅÁî®Êà∑ÈááÁî®hf-deepspeedÊ°ÜÊû∂ËøõË°åÊ®°ÂûãÁ≤æË∞ÉÔºå ÂêåÊó∂Êàë‰ª¨‰πüÊîØÊåÅÂà©Áî®flash-attnËøõË°åËÆ≠ÁªÉÂä†ÈÄüÔºå‰∏∫Ê≠§ÔºåÊàë‰ª¨ÊääÁõ∏ÂÖ≥ÁöÑËÆ≠ÁªÉËÑöÊú¨ÂíåÊ®°ÂûãÂÆûÁé∞‰πüÂºÄÊîæÁªôÂà∞Á§æÂå∫ÔºåÊñπ‰æøÁ†îÂèëËÄÖÂú®Ê≠§Âü∫Á°Ä‰∏äËøõË°åÂêéÁª≠ÁöÑÊ®°ÂûãËÆ≠ÁªÉÂíåÁ≤æË∞ÉÁöÑÊìç‰Ωú

&nbsp;

## Êñ∞Èóª
* 2024.11.25 Êàë‰ª¨Ëá™‰∏ªÂºÄÂèëÁöÑÈïø‰∏ä‰∏ãÊñáËØÑ‰º∞ÈõÜ‚Äî‚ÄîPenguinScrollsÔºåÂ∑≤ÁªèÊ≠£ÂºèÂèëÂ∏ÉÔºÅËØ¶ËßÅ[GitHub](https://github.com/Penguin-Scrolls/PenguinScrolls)Âíå [Hugging Face](https://huggingface.co/datasets/Penguin-Scrolls/PenguinScrolls)„ÄÇ  
* 2024.11.20 **Hunyuan-A52B-Instruct** Âíå**Hunyuan-A52B-Instruct-FP8**Ê®°ÂûãÊùÉÈáçÊõ¥Êñ∞„ÄÇ
* 2024.11.5 [TIÂπ≥Âè∞](https://cloud.tencent.com/product/ti) Â∑≤ÁªèÈõÜÊàê‰∫ÜHunyuan-LargeÊ®°ÂûãÔºåÊÇ®Âè™ÈúÄÂá†Ê≠•Âç≥ÂèØËΩªÊùæËøõË°åËÆ≠ÁªÉÂíåÈÉ®ÁΩ≤„ÄÇËÆøÈóÆ [Chat with Hunyuan-Large](https://console.cloud.tencent.com/tione/v2/aimarket/detail/hunyuan_series?PublicAlgoGroupId=hunyuan-large-chat&detailTab=demo) ‰∏éÊ®°ÂûãÁöÑÂÆûÊó∂ÂØπËØùÔºåÂπ∂Âú®TI‰∏äÊé¢Á¥¢ [Hunyuan-Large Best Practice on TI](https://cloud.tencent.com/document/product/851/112032) Âπ∂ÂàõÂª∫Ëá™Â∑±ÁöÑÂÆöÂà∂ÂåñHunyuan-Large„ÄÇ
* 2024.11.5 Êàë‰ª¨Âú®Hugging FaceÂºÄÊ∫ê‰∫Ü**Hunyuan-A52B-Pretrain** „ÄÅ **Hunyuan-A52B-Instruct** Âíå**Hunyuan-A52B-Instruct-FP8**„ÄÇÂπ∂ÂèëÂ∏É‰∫ÜÊäÄÊúØÊä•ÂëäÂíåËÆ≠ÁªÉÊé®ÁêÜÊìç‰ΩúÊâãÂÜåÔºåËØ¶ÁªÜ‰ªãÁªç‰∫ÜÊ®°ÂûãËÉΩÂäõÂíåËÆ≠ÁªÉ‰∏éÊé®ÁêÜÁöÑÊìç‰Ωú„ÄÇ
<br>


## BenchmarkËØÑ‰º∞Ê¶úÂçï 

**Hunyuan-Large È¢ÑËÆ≠ÁªÉÊ®°Âûã**‰∏éÂÖ∑ÊúâÁõ∏‰ººÊøÄÊ¥ªÂèÇÊï∞Â§ßÂ∞èÁöÑDenseÂíåMoEÁ´û‰∫âÂØπÊâãÁõ∏ÊØîÔºåÂÆûÁé∞‰∫ÜÊúÄ‰Ω≥ÁöÑÊï¥‰ΩìÊÄßËÉΩ„ÄÇ
ÂØπ‰∫éMMLU„ÄÅMMLU-pro„ÄÅCMMLUÁ≠âÂü∫ÂáÜËØÑÊµãÔºåHunyuan-LargeÁöÑÊÄßËÉΩÂßãÁªà‰øùÊåÅÂú®ÊúÄ‰Ω≥Ê∞¥ÂáÜÔºåËØÅÂÆû‰∫ÜÂÆÉÂú®ËÅöÂêà‰ªªÂä°‰∏äÁöÑÁªºÂêàËÉΩÂäõ„ÄÇ
Hunyuan-LargeÂú®Â∏∏ËØÜÁêÜËß£ÂíåÊé®ÁêÜ‰ª•ÂèäÁªèÂÖ∏ÁöÑNLP‰ªªÂä°ÔºåÂ¶ÇQAÂíåÈòÖËØªÁêÜËß£‰ªªÂä°ÔºàCommonsenseQAÔºå PIQAÔºåÂíåTriviaQAÔºâÊñπÈù¢‰πüË°®Áé∞Âá∫Ëâ≤„ÄÇ
Âú®Êï∞Â≠¶ËÉΩÂäõÊñπÈù¢ÔºåHunyuan-LargeÂú®GSM8KÂíåMathÊï∞Â≠¶Êï∞ÊçÆÈõÜ‰∏ä‰ºò‰∫éÊâÄÊúâÂü∫Á∫øÔºåÂú®CMATH‰∏≠ÊñáÊï∞ÊçÆÈõÜ‰∏ä‰πüÂèñÂæó‰∫ÜÊúÄÂ•ΩÁöÑÊàêÁª©„ÄÇ
ÂêåÊó∂Êàë‰ª¨ËßÇÂØüÂà∞Hunyuan-LargeÂú®ÊâÄÊúâ‰∏≠Êñá‰ªªÂä°Ôºà‰æãÂ¶ÇÔºåCMMLU, C-EvalÔºâ‰∏≠ÂÆûÁé∞‰∫ÜÊï¥‰ΩìÊúÄ‰Ω≥ÁöÑÊÄßËÉΩ„ÄÇ


| Model            | LLama3.1-405B | LLama3.1-70B | Mixtral-8x22B | DeepSeek-V2 | Hunyuan-Large |
|------------------|---------------|--------------|---------------|-------------|---------------|
| MMLU             | 85.2          | 79.3         | 77.8          | 78.5        | **88.4**          |
| MMLU-Pro         | **61.6**          | 53.8         | 49.5          | -           | 60.2          |
| BBH              | 85.9          | 81.6         | 78.9          | 78.9        | **86.3**          |
| HellaSwag        | -             | -            | **88.7**      | 87.8        | 86.8          |
| CommonsenseQA    | 85.8          | 84.1         | 82.4          | -           | **92.9**          |
| WinoGrande       | 86.7          | 85.3         | 85.0          | 84.9        | **88.7**          |
| PIQA             | -             | -            | 83.6          | 83.7        | **88.3**          |
| NaturalQuestions | -             | -            | 39.6          | 38.7        | **52.8**          |
| DROP             | 84.8          | 79.6         | 80.4          | 80.1        | **88.9**          |
| ARC-C            | **96.1**          | 92.9         | 91.2          | 92.4        | 95.0          |
| TriviaQA         | -             | -            | 82.1          | 79.9        | **89.2**          |
| CMMLU            | -             | -            | 60.0          | 84.0        | **90.2**          |
| C-Eval           | -             | -            | 59.6          | 81.7        | **91.9**          |
| C3               | -             | -            | 71.4          | 77.4        | **82.3**          |
| GSM8K            | 89.0          | 83.7         | 83.7          | 79.2        | **92.8**          |
| MATH             | 53.8          | 41.4         | 42.5          | 43.6        | **69.8**          |
| CMATH            | -             | -            | 72.3          | 78.7        | **91.3**          |
| HumanEval        | 61.0          | 58.5         | 53.1          | 48.8        | **71.4**          |
| MBPP             | **73.4**          | 68.6         | 64.2          | 66.6        | 72.6          |

**Hunyuan-Large-Instruct**‰∏éÂÖ∑ÊúâÁõ∏‰ººÊøÄÊ¥ªÂèÇÊï∞ÁöÑllmÁõ∏ÊØîÂú®Â§ßÂ§öÊï∞ÁöÑ‰ªªÂä°‰∏äÂÆûÁé∞‰∫Ü‰∏ÄËá¥ÁöÑÊÄßËÉΩÊèêÂçáÔºåË°®ÊòéÊàë‰ª¨ÁöÑpost-trainingÂçÅÂàÜÊúâÊïà„ÄÇ
Âú®‰∏çÂêåÁ±ªÂà´ÁöÑÂü∫ÂáÜÊµãËØï‰∏≠ÔºåÊàë‰ª¨ÂèëÁé∞Êàë‰ª¨ÁöÑInstructÊ®°ÂûãÂú®MMLUÂíåMATHÊï∞ÊçÆÈõÜ‰∏äÂèñÂæó‰∫ÜÊúÄÂ•ΩÁöÑÊÄßËÉΩ„ÄÇ
ÂÄºÂæóÊ≥®ÊÑèÁöÑÊòØÔºåÂú®MMLUÊï∞ÊçÆÈõÜ‰∏äÔºåÊàë‰ª¨ÁöÑÊ®°ÂûãË°®Áé∞Âá∫‰∫ÜÊòæËëóÁöÑÊèêÂçáÔºå Áõ∏ÊØî‰∏éLLama3.1-405BÊ®°ÂûãÈ´òÂá∫2.6%„ÄÇ
ËøôÁßçÂ¢ûÂº∫Ë°®ÊòéHunyuan-Large-InstructÂú®ÂπøÊ≥õÁöÑËØ≠Ë®ÄÁêÜËß£‰ªªÂä°‰∏≠ÂÖ∑Êúâ‰ºòË∂äÁöÑÁêÜËß£ÂíåÊé®ÁêÜËÉΩÂäõ„ÄÇ
ËØ•Ê®°ÂûãÂú®MATHÊï∞ÊçÆÈõÜ‰∏äÁöÑË°®Áé∞Ëøõ‰∏ÄÊ≠•Âº∫Ë∞É‰∫ÜÂÆÉÁöÑÂÆûÂäõÔºåÁõ∏ÊØî‰∫éLLama3.1-405BÈ´òÂá∫‰∫Ü3.6%ÁöÑÊåáÊ†á„ÄÇ
ÂÄºÂæóÊ≥®ÊÑèÁöÑÊòØÔºå‰ªÖÁî®520‰∫ø‰∏™ÊøÄÊ¥ªÂèÇÊï∞Â∞±ÂÆûÁé∞‰∫ÜÁ≤æÂ∫¶ÁöÑÈ£ûË∑ÉÔºåËØÅÊòé‰∫ÜHunyuan-Large-InstructÁöÑÂçìË∂äËÉΩÂäõ„ÄÇ

| Model                | LLama3.1 405B Inst. | LLama3.1 70B Inst. | Mixtral 8x22B Inst. | DeepSeekV2.5 Chat | Hunyuan-Large Inst. |
|----------------------|---------------------|--------------------|---------------------|-------------------|---------------------|
| MMLU                 | 87.3                | 83.6               | 77.8                | 80.4              | **89.9**            |
| CMMLU                | -                   | -                  | 61.0                | -                 | **90.4**            |
| C-Eval               | -                   | -                  | 60.0                | -                 | **88.6**            |
| BBH                  | -                   | -                  | 78.4                | 84.3              | **89.5**            |
| HellaSwag            | -                   | -                  | 86.0                | **90.3**          | 88.5                |
| ARC-C                | **96.9**            | 94.8               | 90.0                | -                 | 94.6                |
| GPQA_diamond         | **51.1**            | 46.7               | -                   | -                 | 42.4                |
| MATH                 | 73.8                | 68.0               | 49.8                | 74.7              | **77.4**            |
| HumanEval            | 89.0                | 80.5               | 75.0                | 89.0              | **90.0**            |
| AlignBench           | 6.0                 | 5.9                | 6.2                 | 8.0               | **8.3**             |
| MT-Bench             | 9.1                 | 8.8                | 8.1                 | 9.0               | **9.4**             |
| IFEval strict-prompt | **86.0**            | 83.6               | 71.2                | -                 | 85.0                |
| Arena-Hard |  69.3            | 55.7               |  -                | 76.2                 | **81.8**            |
| AlpacaEval-2.0 | 39.3            | 34.3               | 30.9                | 50.5                 | **51.8**            |

&nbsp;
## Êï∞ÊçÆ

Hunyuan-LargeÊèê‰æõ‰∫ÜÊ®°ÂûãËÆ≠ÁªÉÁõ∏ÂÖ≥ÊµÅÁ®ãÔºåÊÇ®ÂèØ‰ª•Âú®Ê≠§Á´†ËäÇÂØπËÆ≠ÁªÉÊï∞ÊçÆÊ†ºÂºèËøõË°åÂ§ÑÁêÜ‰ª•‰æõÊ®°ÂûãËÆ≠ÁªÉ‰ΩøÁî®„ÄÇ

### ËÆ≠ÁªÉÊï∞ÊçÆÊ†ºÂºèÂèäÂ§ÑÁêÜ 

ËÆ≠ÁªÉÊï∞ÊçÆÊåâÁÖß‰ª•‰∏ãÂΩ¢ÂºèÂ§ÑÁêÜ‰∏∫messagesÊ†ºÂºèÔºåËÆ≠ÁªÉÂíåÊé®ÁêÜÁöÑÈªòËÆ§system prompt‰∏∫"You are a helpful assistant."Ôºå‰ª•‰∏ãÂàÜÂà´‰∏∫ÂçïËΩÆÊï∞ÊçÆÂíåÂ§öËΩÆÊï∞ÊçÆÊ†∑‰æãÔºö

```python
# ÂçïËΩÆÊï∞ÊçÆÊ†ºÂºè
messages = [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Êµ∑Ê∞¥‰∏∫‰ªÄ‰πàÊòØÂí∏ÁöÑ" },
    {"role": "assistant", "content": "Êµ∑Ê∞¥ÊòØÂí∏ÁöÑ‰∏ªË¶ÅÊòØÂõ†‰∏∫ÂÖ∂‰∏≠Âê´ÊúâËÆ∏Â§öÊ∫∂Ëß£Âú®Ê∞¥‰∏≠ÁöÑÁõêÁ±ªÂíåÁüøÁâ©Ë¥®„ÄÇËøô‰∫õÁõêÁ±ªÂíåÁüøÁâ©Ë¥®Êù•Ëá™‰∫éÂú∞ÁêÉË°®Èù¢ÁöÑÂ≤©Áü≥ÂíåÂúüÂ£§‰∏≠ÁöÑÂåñÂ≠¶Áâ©Ë¥®ÔºåÈöèÁùÄÊó∂Èó¥ÁöÑÊé®ÁßªÔºåÂÆÉ‰ª¨Ë¢´Â∏¶Âà∞‰∫ÜÊµ∑Ê¥ã‰∏≠„ÄÇÂΩìÊµ∑Ê∞¥Ëí∏ÂèëÊó∂ÔºåÊ∞¥ÂàÜËí∏ÂèëÊéâ‰∫ÜÔºå‰ΩÜÁõêÁ±ªÂíåÁüøÁâ©Ë¥®‰ªçÁÑ∂ÁïôÂú®Ê∞¥‰∏≠ÔºåÂØºËá¥Êµ∑Ê∞¥ÂèòÂæóÊõ¥Âä†Âí∏Âë≥„ÄÇÂõ†Ê≠§ÔºåÊµ∑Ê∞¥ÁöÑÂí∏Â∫¶ÊòØÁî±ÂÖ∂‰∏≠ÁöÑÁõêÁ±ªÂíåÁüøÁâ©Ë¥®ÁöÑÂê´ÈáèÂÜ≥ÂÆöÁöÑ„ÄÇ"}
]

# Â§öËΩÆÊï∞ÊçÆÊ†ºÂºè
messages = [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Áü•ÈÅìÈáçÂ∫ÜÊ£ÆÊûóËøôÈÉ®ÁîµÂΩ±ÂêóÔºü" },
    {"role": "assistant", "content": "Áü•ÈÅìÂëÄÔºåÊòØ‰∏ÄÈÉ®Áî±ÁéãÂÆ∂Âç´ÂØºÊºîÁöÑÁâáÂ≠ê„ÄÇ" },
    {"role": "user", "content": " ËÄå‰∏ªÊºîÈáåÊõ¥ÊòØÊúâÁéãËè≤Ôºå‰∏Ä‰∏äÊò†‰æøÂèóÂà∞ËøΩÊçß„ÄÇ" },
    {"role": "assistant", "content": "ÊâÄ‰ª•Ê≠§ÁâáËé∑Âæó‰∫ÜÁ¨¨14Â±äÈ¶ôÊ∏ØÁîµÂΩ±ÈáëÂÉèÂ•ñÊúÄ‰Ω≥ÂΩ±ÁâáÂ•ñ„ÄÇ"}
]

from tokenizers import ByteLevelBPETokenizer
from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("./models", use_fast=False, trust_remote_code=True)

ids = tokenizer.apply_chat_template(messages)

```

Êõ¥Â§öË∞ÉÁî®ÂèÇËÄÉÂèÇËÄÉ`./models/test.py`Êñá‰ª∂„ÄÇ


&nbsp;

## Âø´ÈÄüÂºÄÂßã

ÊÇ®ÂèØ‰ª•ÂèÇÁÖß<a href="examples/README.md">Âø´ÈÄüÂºÄÂßãÊñáÊ°£</a>‰∏≠ÁöÑÂÜÖÂÆπËøõË°åÂø´ÈÄü‰∏äÊâã„ÄÇ

## Ê®°ÂûãËÆ≠ÁªÉ 

‰∏∫‰∫ÜÁÆÄÂåñÈÉ®ÁΩ≤ËøáÁ®ãÔºåHunyuanLLMÊèê‰æõ‰∫ÜÈ¢ÑÊûÑÂª∫dockerÈïúÂÉèÔºö
 [hunyuaninfer/hunyuan-large](https://hub.docker.com/repository/docker/hunyuaninfer/hunyuan-large/general) „ÄÇ

### Á°¨‰ª∂ÈúÄÊ±Ç

ÁªèËøáÂú® H20 ‰∏äÊµãËØïÔºå‰∏çÂºÄ make_moe_param_leaf_module ‰ª•Âèä zero3+offloadÔºåmax_seq_length ‰∏∫ 2048ÔºåÂÖ®ÈáèÂæÆË∞ÉÊúÄÂ∞ëÈúÄË¶Å 32 Âç°Ôºålora ÂæÆË∞ÉÊúÄÂ∞ëÈúÄË¶Å 8 Âç°„ÄÇ

### ËÆ≠ÁªÉÊÄßËÉΩ

ÊúÄ‰ΩéÈÖçÁΩÆÔºà8 Âç° lora Á≤æË∞ÉÔºâÊµãËØï‰∏ãÔºåper_device_train_batch_size ‰∏∫ 1Ôºågradient_accumulation_steps ‰∏∫ 1ÔºåÂ§ßÁ∫¶ 35s ‰∏Ä‰∏™ iteration„ÄÇ

### ÂêØÂä®ÊñπÂºè

ÂèÇËÄÉÔºö[HuggingFace Transformers Trainer](https://huggingface.co/docs/transformers/v4.19.2/en/main_classes/trainer)

#### ÂçïÊú∫ÂêØÂä®ËÆ≠ÁªÉ

Âú®`train`ÁõÆÂΩï‰∏ãÔºåÊâßË°åÔºö

```sh
pip install -r requirements.txt
bash train.sh
```

#### Â§öÊú∫ÂêØÂä®ËÆ≠ÁªÉ

Â¶ÇÊûúË¶ÅÁî®Â§öÂè∞Êú∫Âô®ÂêØÂä®ËÆ≠ÁªÉÔºåËØ∑ÊåâÁÖß‰ª•‰∏ãÊ≠•È™§ÊâßË°åÔºåÂπ∂‰øùËØÅÂ§öÂè∞Êú∫Âô®Âú®‰∏Ä‰∏™ÈõÜÁæ§ÂÜÖ„ÄÇ

##### ÈÖçÁΩÆÊú∫Âô®Èó¥ÂÖçÂØÜ ssh ÁôªÂΩï

‰ª•‰∏ãÊìç‰Ωú‰ª•‰∏§‰∏™Êú∫Âô®‰∏∫‰æãÔºå‰∏§Âè∞Êú∫Âô®ÁöÑ ip ÂàÜÂà´‰ª•`${ip1}`Âíå`${ip2}`Ê†áËØÜÔºå‰ª•‰∏ãÊìç‰ΩúÂùáÂú® docker container ÂÜÖÊâßË°å„ÄÇ

È¶ñÂÖàÔºåÈÖçÁΩÆÂ§öÊú∫containerÂÖçÂØÜÔºåÂú®ÊØèÂè∞Êú∫Âô®‰∏äÊâßË°å„ÄÇ

```sh
ssh-keygen			# ÁîüÊàêid_rsaÂíåid_rsa.pubÔºåÁî®‰∫éÂÖçÂØÜÁôªÂΩï
ssh-keygen -t rsa -A    # ÁîüÊàê/etc/ssh/ssh_host_rsa_keyÂíåssh_host_ecdsa_keyÔºå Áî®‰∫éÂêéÈù¢ÂêØÂä®ssh listen
/usr/sbin/sshd -p 36005 -o ListenAddress=0.0.0.0        # ÂêØÂä®Listen
echo "Port 36005" > ~/.ssh/config   # ssh ËøûÊé•Á´ØÂè£‰øÆÊîπ‰∏∫ 36005
passwd root    # ÈúÄË¶ÅÈÖçÁΩÆrootÂØÜÁ†ÅÔºåÂê¶ÂàôÁõëÊµãÂπ≥Âè∞‰ºöÊä•Ë≠¶
```

Ê≥®ÊÑèÔºöËøôÈáåÁöÑ`36005`ÊòØ‰∏Ä‰∏™Á§∫‰æãÁ´ØÂè£ÔºåÂèØ‰ª•ÈÄâÁî®‰ªªÊÑèÁ´ØÂè£Ôºå‰ΩÜÈúÄË¶Å‰øùËØÅ‰ΩøÁî®ÁöÑÁ´ØÂè£**ÂºÄÊîæ**‰∏î**‰∏çË¢´ÂÖ∂‰ªñÁöÑËøõÁ®ãÂç†Áî®**„ÄÇ

Êé•‰∏ãÊù•ÔºåÂú®ÊØèÂè∞Êú∫Âô®ÁöÑ container ÂÜÖÔºåÊâßË°åÔºö

```sh
cat ~/.ssh/id_rsa.pub
```

**Â∞ÜËæìÂá∫ÁöÑ ssh ÂÖ¨Èí•Â§çÂà∂Âπ∂Á≤òË¥¥Âà∞`~/.ssh/authorized_keys`Êñá‰ª∂‰∏≠ÔºåÊØèË°å‰∏Ä‰∏™ÂÖ¨Èí•ÔºåÊØèÂè∞Êú∫Âô®‰∏äÈÉΩË¶ÅÂÅöËøô‰∏™Êìç‰Ωú**„ÄÇÊúÄÁªàÊØèÂè∞Êú∫Âô®‰∏äÁöÑ`~/.ssh/authorized_keys`Êñá‰ª∂ÂÜÖÂÆπÂ∫îÂΩìÊòØ‰∏ÄËá¥ÁöÑÔºåÂπ∂‰∏îÂåÖÂê´‰∫ÜÊâÄÊúâÊú∫Âô®ÁöÑÂÖ¨Èí•„ÄÇ

ÈúÄË¶ÅÊ≥®ÊÑèÔºåÂ§öËäÇÁÇπËÆ≠ÁªÉÊó∂ÔºåÊØè‰∏™ËäÇÁÇπ‰∏äÊâßË°åÁöÑ‰ª£Á†ÅÈÉΩÂæó‰∏ÄËá¥ÔºåÂª∫ËÆÆÊåÇËΩΩ‰∏Ä‰∏™ÂÖ±‰∫´ÁöÑÁΩëÁªúÁõòÔºåÂ¶ÇÊûúÊó†Ê≥ïÊåÇËΩΩÂÖ±‰∫´ÁΩëÁõòÔºåÂàôÈúÄË¶ÅÊâãÂä®Â∞ÜÊï∞ÊçÆÈõÜ„ÄÅËÑöÊú¨„ÄÅ‰ª£Á†ÅÂ§çÂà∂Âú®Â§öÂè∞Êú∫Âô®ÁöÑÁõ∏ÂêåÁõÆÂΩï‰∏ã„ÄÇ

##### ÂêØÂä®Â§öÊú∫ËÆ≠ÁªÉ

Âú®‰ª•‰∏äÂáÜÂ§áÊ≠•È™§ÂáÜÂ§áÂ•Ω‰∫Ü‰πãÂêéÔºå‰ª•ÂèäÁ°ÆËÆ§‰æùËµñÂ∑≤ÁªèÂÆâË£ÖÂÆåÊàêÔºàÂ¶ÇÊú™ÂÆâË£ÖÔºåËØ∑ÊâßË°å`pip install -r requirements.txt`ÂÆâË£ÖÔºâÔºåÂ∞±ÂèØ‰ª•Âú®`train.sh`‰∏≠ÁöÑÂºÄÂ§¥Â¢ûÂä†‰ª•‰∏ãÈÖçÁΩÆÔºö

```shell
export HOST_GPU_NUM=8
# ÂΩìÂâçÊú∫Âô®ip
export LOCAL_IP=${ip1}
# Â§öËäÇÁÇπÊú∫Âô®ipÔºåÈÄóÂè∑ÈöîÂºÄ
export NODE_IP_LIST="${ip1}:8,${ip2}:8"
# Êú∫Âô®ËäÇÁÇπ‰∏™Êï∞
export NODES=2
export NODE_NUM=$((${NODES} * ${HOST_GPU_NUM}))
```

Ê≥®ÊÑèÔºöÂ∞Ü‰ª•‰∏äÁöÑ`${ip1}`Âíå`${ip2}`ÊõøÊç¢‰∏∫ÁúüÂÆûÁöÑ ip Âú∞ÂùÄÔºÅ

ÁÑ∂ÂêéÔºåÂú®`${ip1}`ÁöÑÊú∫Âô®‰∏äÔºåÂú®`train/`ÁõÆÂΩï‰∏ãÔºåÊâßË°å`bash train.sh`Âç≥ÂèØÔºåÊ≥®ÊÑèÁ¨¨‰∏ÄÊ¨°ÂêØÂä®Êó∂ÂèØËÉΩ‰ºöÁúãËßÅ‰ª•‰∏ãÁöÑËæìÂá∫Ôºö

```ssh
The authenticity of host '[ip]:36005 ([ip]:36005)' can't be established.
ECDSA key fingerprint is xxxxxx.
ECDSA key fingerprint is MD5:xxxxxx.
Are you sure you want to continue connecting (yes/no)?
```

Ê≠§Êó∂ËæìÂÖ•`yes`Âç≥ÂèØÁªßÁª≠„ÄÇ

##### ÂÖ≥ÈîÆÂèÇÊï∞

ËÑöÊú¨‰∏≠ÁöÑÂÖ≥ÈîÆÂèÇÊï∞Â¶Ç‰∏ãÔºö

- `--deepspeed`: Ê≠§ÂèÇÊï∞Â∫îÂΩìÊåáÂêë‰∏Ä‰∏™ deepspeed ÁöÑÈÖçÁΩÆÊñá‰ª∂Ôºå`train`Êñá‰ª∂Â§π‰∏ãÊèê‰æõ‰∫Ü‰∏âÁßç DeepSpeed ÁöÑÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂Ôºö`ds_zero2_no_offload.json`, `ds_zero3_no_offload.json`, `ds_zero3_offload.json`ÔºåËøô‰∏â‰∏™ÈÖçÁΩÆÊñá‰ª∂ÊâÄÈúÄÊòæÂ≠ò‰æùÊ¨°ÂáèÂ∞ë
- `--model_name_or_path`: Ë¶ÅÂä†ËΩΩÁöÑ HF È¢ÑËÆ≠ÁªÉÊ®°ÂûãÊùÉÈáçÔºåÁ°Æ‰øùËøô‰∏™Ë∑ØÂæÑ‰∏ãÂåÖÂê´‰∫Ü `modeling_hunyuan.py` Âíå `configuration_hunyuan.py` Êñá‰ª∂ÔºåÂê¶ÂàôÊó†Ê≥ïÂä†ËΩΩ
- `--tokenizer_name_or_path`: tokenizer Êñá‰ª∂Â§πË∑ØÂæÑÔºåÁ°Æ‰øùËøô‰∏™Ë∑ØÂæÑ‰∏ãÂåÖÂê´‰∫Ü`tokenization_hy.py` Êñá‰ª∂ÔºåÂê¶ÂàôÊó†Ê≥ïÂä†ËΩΩ
- `--train_data_file`: ËÆ≠ÁªÉÊñá‰ª∂Ë∑ØÂæÑÔºåÂ∫îËØ•‰∏∫‰∏Ä‰∏™ jsonl Êñá‰ª∂
- `--output_dir`: ËæìÂá∫Êñá‰ª∂Â§πÔºålog„ÄÅtensorboard ÂíåÊùÉÈáçÈÉΩ‰ºöÂ≠òÂÇ®Âú®Ëøô‰∏™Ë∑ØÂæÑ‰∏ã
- `--per_device_train_batch_size`: ÊØèÂº†Âç°‰∏äÁöÑ batch size
- `--gradient_accumulation_steps`: Ê¢ØÂ∫¶Á¥ØËÆ°Ê¨°Êï∞Ôºå`per_device_train_batch_size * gradient_accumulation_steps * dp_size`‰∏∫ global_batch_size
- `--max_steps`: ËÆ≠ÁªÉÁöÑÊÄªÊ≠•Êï∞
- `--save_steps`: ÊØèÂ§öÂ∞ë‰∏™ step Â≠òÂÇ®‰∏Ä‰∏™ checkpoint
- `--use_lora`: ÊòØÂê¶Áî® lora ËÆ≠ÁªÉÔºåÂêåÊó∂Êé•Êî∂`--lora_rank`Ôºå`--lora_alpha`Âíå`--lora_dropout`ÂèÇÊï∞„ÄÇlora ÈªòËÆ§Â∫îÁî®‰∫é "q_proj", "k_proj", "v_proj", "o_proj" Âõõ‰∏™ÂèÇÊï∞ÔºåÂ¶ÇÊûúÈúÄË¶ÅÊîπÂèòÁöÑËØùÂú®‰ª£Á†Å‰∏≠‰øÆÊîπÂç≥ÂèØ„ÄÇÊ≥®ÊÑèÔºö**‰ΩøÁî® lora ËÆ≠ÁªÉÊó∂ÔºåÂè™‰ºö‰øùÂ≠ò lora ÁöÑÊùÉÈáçÔºåËÄå‰∏ç‰ºö‰øùÂ≠ò base Ê®°ÂûãÁöÑÊùÉÈáç**ÔºåÂ¶ÇÊûúÈúÄË¶ÅÂêàÂπ∂ lora ÊùÉÈáçÔºåÁúã‰∏ãÈù¢ÁöÑ‚ÄúLora ÊùÉÈáçÂêàÂπ∂‚Äù‰∏ÄËäÇ
- `--make_moe_param_leaf_module`ÔºöÂΩìÁî® zero3 ‰ª•Âèä MoE ËÆ≠ÁªÉÊó∂ÔºåÂ∞Ü MoE Ê®°ÂùóËßÜ‰Ωú‰∏Ä‰∏™ leaf moduleÔºåÂç≥ÂÆÉÁöÑÂèÇÊï∞‰∏çËøõË°å zero3 ÂàáÂàÜÔºåËøô‰∏™ÈÄâÈ°πÈ¢ÑËÆ°‰ºöÊòæËëóÂ¢ûÂä†ÊòæÂ≠òÂç†Áî®
- `--gradient_checkpointing`ÔºöÂºÄÂêØÊ¢ØÂ∫¶ÈáçËÆ°ÁÆó
- `--train_attention_params_only`: ÊòØÂê¶Âè™ËÆ≠ÁªÉ attention ÂèÇÊï∞
- `--learning_rate`: ËÆ≠ÁªÉÊó∂ÁöÑÊúÄÂ§ßÂ≠¶‰π†Áéá
- `--min_lr`: ËÆ≠ÁªÉÊó∂ÁöÑÊúÄÂ∞èÂ≠¶‰π†Áéá
- `--use_flash_attn`: ÂºÄÂêØ flash-attention ËøõË°åËÆ≠ÁªÉÂä†ÈÄü

**Ê≥®ÊÑèÔºö**

- Â¶ÇÊûúÊÉ≥‰ªé‰∏Ä‰∏™‰∏≠ÈÄî‰øùÂ≠òÁöÑ ckpt ÁªßÁª≠ËÆ≠ÁªÉÔºåËÄå‰∏çÊòØÂä†ËΩΩ‰∏Ä‰∏™È¢ÑËÆ≠ÁªÉÁöÑÊùÉÈáçÔºåÁõ¥Êé•ÊåáÂÆö`--resume_from_checkpoint`‰∏∫‰πãÂâçËÆ≠ÁªÉ‰øùÂ≠òÁöÑ ckpt Ë∑ØÂæÑÔºå‰∏çË¶ÅÊåáÂÆö`--model_name_or_path`ÔºåËøôÊ†∑Âè™‰ºöÂä†ËΩΩÊùÉÈáçÔºåËÄå‰∏ç‰ºöÂä†ËΩΩËÆ≠ÁªÉÁä∂ÊÄÅ
- ‰ªé ckpt ÁªßÁª≠ËÆ≠ÁªÉÊó∂Ôºåloss ÂèØËÉΩ‰ºöÊúâÂæÆÂ∞èÁöÑÂÅèÂ∑ÆÔºåËøôÊòØÁî±‰∏Ä‰∫õÈùûÁ°ÆÂÆöÊÄßÁÆóÊ≥ïÂ∏¶Êù•ÁöÑÈöèÊú∫ÊÄßÔºåÊòØÊ≠£Â∏∏Áé∞Ë±°„ÄÇÂèÇËÄÉÔºö[HuggingFace Transformers Trainer Randomness 
- ÂΩì `--model_name_or_path` ÊúâÊïàÊó∂ÔºåÊâÄÊúâÊ®°ÂûãÁõ∏ÂÖ≥ÁöÑÂèÇÊï∞ÈÉΩ‰ºöË¢´ÂøΩÁï•
- ‰∏Ä‰∏™ batch ÂÜÖÁöÑÊ†∑Êú¨‰ºöÈÄöËøá padding ÂØπÈΩê batch ÂÜÖÊúÄÈïøÁöÑÊ†∑Êú¨ÔºåËÄåÊØèÊù°Ê†∑Êú¨ÁöÑÈïøÂ∫¶ÊúÄÈïø‰∏∫ max_seq_lengthÔºåË∂ÖÂá∫ÁöÑÈÉ®ÂàÜ‰ºöË¢´Ë£ÅÂâ™
- Â¶ÇÊûúÊä•Âá∫ bias ÊùÉÈáçÊ≤°Êúâ load ÁöÑ warningÔºåÂøΩÁï•Âç≥ÂèØÔºåHunyuan-Large ‰∏≠‰∏ç‰ºöÁî®Âà∞ bias

#### ÊòæÂ≠ò‰∏çË∂≥ÊÄé‰πàÂäûÔºü

ÂèÇËÄÉÔºö[DeepSpeed Configuration](https://www.deepspeed.ai/docs/config-json/)

ÂèØ‰ª•Â∞ùËØï‰øÆÊîπ ds configÔºåÂéªÊéâËøôÂá†‰∏™ÂèÇÊï∞ÁöÑ auto Â±ûÊÄßÔºåÊîπÂ∞èËØïËØïÁúãÔºö

- `stage3_param_persistence_threshold`
- `stage3_prefetch_bucket_size`
- `stage3_max_reuse_distance`
- `stage3_max_reuse_distance`


#### Lora Ê®°ÂûãÂêàÂπ∂

‰øùÂ≠ò‰∏ãÊù•ÁöÑ lora ÊùÉÈáçÊ≤°Ê≥ïÂú®ËÆ≠ÁªÉËøêË°åÊó∂ÂêàÂπ∂Âà∞ zero3 Ê®°Âûã‰∏≠ÔºåÂõ†‰∏∫ zero3 ÂºÄÂêØÊó∂Ê®°ÂûãÊùÉÈáç‰ºöÂàáÂàÜÂà∞ÂêÑ dp rank ‰∏ä„ÄÇÂõ†Ê≠§Â¶ÇÊûúÊÉ≥Êää lora ÊùÉÈáçÂêàÂπ∂Âà∞ base Ê®°Âûã‰∏äÔºåÂèØ‰ª•ÈÄöËøáÁ¶ªÁ∫øÁöÑÊñπÂºèÂêàÂπ∂ÂêéÂæóÂà∞ÊùÉÈáçÊñá‰ª∂„ÄÇÊâßË°å`merge_lora_weight.sh`Âç≥ÂèØÂÆåÊàê lora ÊùÉÈáçÂíå base Ê®°ÂûãÊùÉÈáçÁöÑÂêàÂπ∂ÔºåÂÖ∂‰∏≠ÁöÑÂèÇÊï∞ÊúâÔºö

- `--base_model_path`Ôºöbase Ê®°ÂûãÁöÑÊùÉÈáçÁõÆÂΩï
- `--adapter_model_path`Ôºölora ÊùÉÈáçÁõÆÂΩï
- `--output_path`ÔºöÂêàÂπ∂ÂêéÁöÑÊùÉÈáç‰øùÂ≠òÁõÆÂΩï
- `--save_dtype`Ôºö ‰ª•‰ªÄ‰πàÊï∞ÊçÆÊ†ºÂºèÂ≠òÂÇ®ÂêàÂπ∂ÂêéÁöÑÊùÉÈáçÔºåÂèØÈÄâÂÄºÔºöfp16Ôºåbf16Ôºåfp32

&nbsp;

## Êé®ÁêÜÂíåÈÉ®ÁΩ≤ 

HunyuanLLMÊîØÊåÅTRT-LLMÂíåvLLM‰∏§ÁßçÈÉ®ÁΩ≤ÊñπÂºè„ÄÇÊú¨Ê¨°Êàë‰ª¨ÂºÄÊ∫êvLLMÈÉ®ÁΩ≤ÊñπÂºè(ËØ¶ËßÅ'‰ΩøÁî®vLLMÊé®ÁêÜ'Á´†ËäÇ)ÔºåTRT-LLMÈÉ®ÁΩ≤ÊñπÂºè(ËØ¶ËßÅ'‰ΩøÁî®TRT-LLMÊé®ÁêÜ'Á´†ËäÇ)Â∞ÜÂú®ËøëÊúüÂºÄÊîæ„ÄÇ

## ‰ΩøÁî®TRT-LLMÊé®ÁêÜ
ÂæÖÂºÄÊîæ

## ‰ΩøÁî®vLLMÊé®ÁêÜ
### Docker:

‰∏∫‰∫ÜÁÆÄÂåñÈÉ®ÁΩ≤ËøáÁ®ãÔºåHunyuanLLMÊèê‰æõ‰∫ÜÈ¢ÑÊûÑÂª∫dockerÈïúÂÉèÔºö

 [hunyuaninfer/hunyuan-large](https://hub.docker.com/repository/docker/hunyuaninfer/hunyuan-large/general) „ÄÇÊÇ®Âè™ÈúÄË¶Å‰∏ãËΩΩÊ®°ÂûãÊñá‰ª∂Âπ∂Áî®‰∏ãÈù¢‰ª£Á†ÅÂêØÂä®dockerÂç≥ÂèØÂºÄÂßãÊé®ÁêÜÊ®°Âûã„ÄÇ
```shell
docker run --name hunyuanLLM_infer -itd --privileged --user root  --net=host --ipc=host --gpus=8 hunyuaninfer/hunyuan-large:infer-open-source
```

Ê≥®: DockerÂÆπÂô®ÊùÉÈôêÁÆ°ÁêÜ„ÄÇ‰ª•‰∏ä‰ª£Á†ÅÈááÁî®ÁâπÊùÉÊ®°ÂºèÔºà--privilegedÔºâÂêØÂä®DockerÂÆπÂô®‰ºöËµã‰∫àÂÆπÂô®ËæÉÈ´òÁöÑÊùÉÈôêÔºåÂ¢ûÂä†Êï∞ÊçÆÊ≥ÑÈú≤ÂíåÈõÜÁæ§ÂÆâÂÖ®È£éÈô©„ÄÇÂª∫ËÆÆÂú®ÈùûÂøÖË¶ÅÊÉÖÂÜµ‰∏ãÈÅøÂÖç‰ΩøÁî®ÁâπÊùÉÊ®°ÂºèÔºå‰ª•Èôç‰ΩéÂÆâÂÖ®Â®ÅËÉÅ„ÄÇÂØπ‰∫éÂøÖÈ°ª‰ΩøÁî®ÁâπÊùÉÊ®°ÂºèÁöÑÂú∫ÊôØÔºåÂ∫îËøõË°å‰∏•Ê†ºÁöÑÂÆâÂÖ®ËØÑ‰º∞ÔºåÂπ∂ÂÆûÊñΩÁõ∏Â∫îÁöÑÂÆâÂÖ®ÁõëÊéß„ÄÅÂä†Âõ∫Êé™ÊñΩ„ÄÇ


### ÈÖçÁΩÆÊú∫Âô®Èó¥ÂÖçÂØÜ ssh ÁôªÂΩï

‰ª•‰∏ãÊìç‰Ωú‰ª•‰∏§‰∏™Êú∫Âô®‰∏∫‰æãÔºå‰∏§Âè∞Êú∫Âô®ÁöÑ ip ÂàÜÂà´‰ª•`${ip1}`Âíå`${ip2}`Ê†áËØÜÔºå‰ª•‰∏ãÊìç‰ΩúÂùáÂú® docker container ÂÜÖÊâßË°å„ÄÇ

È¶ñÂÖàÂú®‰∏§Âè∞Êú∫Âô®‰∏äÈù¢ËøêË°åÔºö`passwd`ËÆæÁΩÆÂØÜÁ†ÅÔºå‰æãÂ¶ÇÔºö`Tmp123,./`

Â∞Ü`inference/login_ssh.py`Êã∑Ë¥ùÂà∞ÂÆπÂô®‰∏≠ÔºåÊâßË°åÂ¶Ç‰∏ãÂëΩ‰ª§ÔºåÊ≥®ÊÑèIPÂíåÂØÜÁ†ÅÂ°´ÂÖ•Ê≠£Á°ÆÂÄº„ÄÇ

```shell
python3 login_ssh.py --ips ${ip1},${ip2} --port 36000 --password=Tmp123,./
```

**Ê≥®ÊÑèüì¢ÔºöÂú®ÂêØÂä®ÂâçËØ∑Âä°ÂøÖÈÄöËøáVLLMÁöÑÂ§öÊú∫È™åËØÅËÑöÊú¨:https://docs.vllm.ai/en/latest/getting_started/debugging.html**

### BF16ÈÉ®ÁΩ≤

BF16ÈúÄË¶Å16Âç°H20ÈÉ®ÁΩ≤„ÄÇÈ™åËØÅÂ§öÊú∫ÈÄö‰ø°Êó†ËØØÂêéÔºåÊåâÂ¶Ç‰∏ãÊ≠•È™§ÊâßË°åÔºö

ËøêË°åÂëΩ‰ª§ÂâçËØ∑ÂÖàËÆæÁΩÆÂ¶Ç‰∏ãÁéØÂ¢ÉÂèòÈáèÔºö

```shell
${LOCAL_IP}ÔºöÂΩìÂâçÊú∫Âô®bond1ÂØπÂ∫îIP
${MODEL_PATH}ÔºöHunyuan LLMÊ®°ÂûãË∑ØÂæÑ
```

#### Step1ÔºöRayÂêØÂä®

Ray ÊòØ‰∏Ä‰∏™Âπ∂Ë°åÂíåÂàÜÂ∏ÉÂºè Python ÁöÑÂºÄÊ∫êÂ∫ìÔºåÊú¨Á´†ËäÇÊàë‰ª¨ÈááÁî®RayÊù•ÂÆûÁé∞Â§öÊú∫ÈÄö‰ø°„ÄÇ

RayÁªÑ‰ª∂ÈÖçÁΩÆÂä†Âõ∫ÔºöRayÁªÑ‰ª∂ÈªòËÆ§ÈÖçÁΩÆ‰∏≠ÊúçÂä°Á´ØÂè£ÔºàÂ¶Ç6379„ÄÅ8265ÔºâÊú™ÂêØÁî®Ë∫´‰ªΩÈ™åËØÅÊú∫Âà∂ÔºåÂ≠òÂú®Êú™ÊéàÊùÉËÆøÈóÆÂíåÂëΩ‰ª§ÊâßË°åÁöÑÈ£éÈô©„ÄÇÂª∫ËÆÆÂú®ÈÉ®ÁΩ≤RayÁªÑ‰ª∂Êó∂Ôºå‰ªÖÂú®Âèó‰ø°‰ªªÁöÑÂÜÖÈÉ®ÁΩëÁªúÁéØÂ¢É‰∏≠ËøõË°åÔºåÊàñÁ°Æ‰øùÂØπËøô‰∫õÁ´ØÂè£ÂÆûÊñΩ‰∏•Ê†ºÁöÑËÆøÈóÆÊéßÂà∂ÂàóË°®ÔºàACLÔºâÁ≠ñÁï•ÔºåÁ¶ÅÊ≠¢ÈùûÊéàÊùÉÁΩëÁªúËÆøÈóÆ„ÄÇ

È¶ñÂÖàÊàë‰ª¨Âú®ÂêÑ‰∏™ËäÇÁÇπ‰∏äÂêØÂä®rayÔºàÊîæÂú®ÂêéÂè∞ÂêØÂä®ÊàñËÄÖ‰øùÊåÅÁªàÁ´ØËøêË°åÁä∂ÊÄÅÔºâ:

‰∏ªËäÇÁÇπ‰∏äÔºö
```shell
export VLLM_HOST_IP=${LOCAL_IP}
export NCCL_SOCKET_IFNAME=bond1
export GLOO_SOCKET_IFNAME=bond1
ray start --block  --head --node-ip-address=${LOCAL_IP} --port=6379
```

ÊâÄÊúâÂ≠êËäÇÁÇπÔºö

Ê≥®ÊÑèÔºö{‰∏ªËäÇÁÇπ$LOCAL_IP}ÈúÄÂ°´ÂÖ•‰∏ªËäÇÁÇπÁöÑ${LOCAL_IP}
```shell
export VLLM_HOST_IP=${LOCAL_IP}
export NCCL_SOCKET_IFNAME=bond1
export GLOO_SOCKET_IFNAME=bond1
ray start --block --address={‰∏ªËäÇÁÇπ$LOCAL_IP}:6379  --node-ip-address=${LOCAL_IP} 
```
Â¶ÇÊûúÂêØÂä®rayÂ§±Ë¥•ÔºåÊâßË°å`ray stop`ÂêéÂÜçÊ¨°ÊâßË°å‰∏äËø∞ÂëΩ‰ª§„ÄÇ


#### Step2ÔºöÊâßË°åÊé®ÁêÜ

#### ÊñπÂºè1ÔºöÂëΩ‰ª§Ë°åÊé®ÁêÜ

‰∏ãÈù¢Êàë‰ª¨Â±ïÁ§∫‰∏Ä‰∏™‰ª£Á†ÅÁâáÊÆµÔºåÈááÁî®`vLLM`Âø´ÈÄüËØ∑Ê±Çchat modelÔºö

Ê≥®: vLLMÁªÑ‰ª∂ËøúÁ®ã‰ª£Á†ÅÊâßË°åÈò≤Êä§„ÄÇ‰∏ãÂàó‰ª£Á†Å‰∏≠vLLMÁªÑ‰ª∂ÁöÑtrust-remote-codeÈÖçÁΩÆÈ°πËã•Ë¢´ÂêØÁî®ÔºåÂ∞ÜÂÖÅËÆ∏Âä†ËΩΩÂπ∂ÊâßË°åÊù•Ëá™ËøúÁ®ãÊ®°Âûã‰ªìÂ∫ìÁöÑ‰ª£Á†ÅÔºåËøôÂèØËÉΩÂØºËá¥ÊÅ∂ÊÑè‰ª£Á†ÅÁöÑÊâßË°å„ÄÇÈô§Èùû‰∏öÂä°ÈúÄÊ±ÇÊòéÁ°ÆË¶ÅÊ±ÇÔºåÂê¶ÂàôÂª∫ËÆÆËØ•ÈÖçÁΩÆÈ°πÂ§Ñ‰∫éÁ¶ÅÁî®Áä∂ÊÄÅÔºå‰ª•Èôç‰ΩéÊΩúÂú®ÁöÑÂÆâÂÖ®Â®ÅËÉÅ„ÄÇ


```python
import os
from vllm import LLM, SamplingParams

model_path=os.environ.get('MODEL_PATH')

llm = LLM(model=model_path,
        tokenizer=model_path,
        trust_remote_code=True,
        max_model_len=10240,
        dtype='bfloat16',
        tensor_parallel_size=16,
        pipeline_parallel_size=1,
        disable_log_stats=False,
        gpu_memory_utilization=0.98,
        disable_custom_all_reduce=True,
        #distributed_executor_backend='ray',
        enforce_eager=True,
        max_num_seqs=8,
        use_v2_block_manager=True,
        quantization=None)

prompts = ["Êµ∑Ê∞¥‰∏∫‰ªÄ‰πàÊòØÂí∏ÁöÑ"]

sampling_params = SamplingParams(
    temperature=0.7, top_p=0.6, max_tokens=200, top_k=20, repetition_penalty=1.05)

outputs = llm.generate(prompts, sampling_params)

# Print the outputs.
for output in outputs:
    prompt = output.prompt
    generated_text = output.outputs[0].text
    print(f"Prompt: {prompt!r}, Generated text: {generated_text!r}")
```

#### ÊñπÂºè2ÔºöÊúçÂä°ÂåñÊé®ÁêÜ

‰∏ãÈù¢Êàë‰ª¨Â±ïÁ§∫‰ΩøÁî®`vLLM`ÊúçÂä°ÂåñÁöÑÊñπÂºèÈÉ®ÁΩ≤Ê®°ÂûãÂπ∂ËØ∑Ê±Ç

Âú®‰∏ªËäÇÁÇπ‰∏äËøêË°åÔºö

```shell
export VLLM_HOST_IP=${LOCAL_IP}
export NCCL_SOCKET_IFNAME=bond1
export GLOO_SOCKET_IFNAME=bond1
```
Êé•ÁùÄÊàë‰ª¨ÂêØÂä®ÊúçÂä°ÔºåËøêË°å :
```shell
cd inference
sh run_server.sh
```

*Tips*ÔºöÊïÖÈöúÂ§ÑÁêÜÔºåÂ¶ÇÊûúÈÅáÂà∞
```python
ray, exceptions.RaySystemError: System error: No module named 'transformers_modules' traceback: Traceback (most recent call last):
ModuleNotFoundError: No module named 'transformers modules'
```
Â∞Ü‰∏ªËäÇÁÇπ‰∏äÁöÑ ~/.cache/huggingface/modules/Êã∑Ë¥ùÂà∞ÊâÄÊúâÂ≠êËäÇÁÇπÁõ∏Â∫îË∑ØÂæÑ„ÄÇ

ËøêË°å`run_server.sh`ÊàêÂäüÂêé, ËøêË°åËØ∑Ê±ÇËÑöÊú¨Ôºö
```shell
sh openapi.sh
```

Ê≥®ÊÑè‰øÆÊîπ`openapi.sh`‰∏≠ÁöÑ`${LOCAL_IP}`Âíå`${MODEL_PATH}`‰∏∫ÊúçÂä°ÂØπÂ∫îÂÄº„ÄÇ


### ÈáèÂåñÊ®°ÂûãÈÉ®ÁΩ≤Ôºö

Êú¨ÈÉ®ÂàÜ‰ªãÁªçÈááÁî®vLLMÈÉ®ÁΩ≤ÈáèÂåñÂêéÊ®°ÂûãÁöÑÊµÅÁ®ã„ÄÇ

ÈïúÂÉèÔºöÈÉ®ÁΩ≤ÈïúÂÉèÂêåBF16„ÄÇ


#### Int8ÈáèÂåñÊ®°ÂûãÈÉ®ÁΩ≤Ôºö
ÈÉ®ÁΩ≤Int8-weight-onlyÁâàÊú¨Hunyuan-LÊ®°ÂûãÂè™ÈúÄËÆæÁΩÆ`run_server_int8.sh`‰∏≠ÁöÑÁéØÂ¢ÉÂèòÈáèÔºö
```SHELL
${MODEL_PATH} : BF16Ê®°ÂûãË∑ØÂæÑ
${LOCAL_IP} : ÂΩìÂâçÊú∫Âô®bond1ÂØπÂ∫îIP
```

Êé•ÁùÄÊàë‰ª¨ÂêØÂä®Int8ÊúçÂä°„ÄÇËøêË°åÔºö
```shell
sh run_server_int8.sh
```

ËøêË°å`run_server_int8.sh`ÊàêÂäüÂêé, ËøêË°åËØ∑Ê±ÇËÑöÊú¨Ôºö
```shell
sh openapi.sh
```

#### FP8ÈáèÂåñÊ®°ÂûãÈÉ®ÁΩ≤Ôºö
ÈÉ®ÁΩ≤W8A8C8ÁâàÊú¨Hunyuan-LÊ®°ÂûãÂè™ÈúÄËÆæÁΩÆ`run_server_int8.sh`‰∏≠ÁöÑÁéØÂ¢ÉÂèòÈáèÔºö
```shell
${MODEL_PATH} : FP8Ê®°ÂûãË∑ØÂæÑ
${LOCAL_IP} : ÂΩìÂâçÊú∫Âô®bond1ÂØπÂ∫îIP
```

Êé•ÁùÄÊàë‰ª¨ÂêØÂä®FP8ÊúçÂä°„ÄÇËøêË°åÔºö
```shell
sh run_server_fp8.sh
```

ËøêË°å`run_server_fp8.sh`ÊàêÂäüÂêé, ËøêË°åËØ∑Ê±ÇËÑöÊú¨Ôºö
```shell
sh openapi.sh
```

#### FP8 BENCHMARK

Êú¨ÈÉ®ÂàÜ‰ªãÁªçHunyuan Large Instruct FP8ÈáèÂåñÊ®°ÂûãÁöÑÊïàÊûúËØÑ‰º∞„ÄÇ

| Dataset | BF16 | W8A8C8-FP8 |
|---------|------|------------|
| ARC-C   | 94.6 | 94.2       |
| C-Eval  | 88.6 | 89.2       |
| CMMLU   | 90.4 | 89.8       |
| MMLU    | 89.9 | 88.9       |

### ÊÄßËÉΩËØÑ‰º∞Ôºö

Êú¨ÈÉ®ÂàÜ‰ªãÁªçÈááÁî®vLLMÈÉ®ÁΩ≤ÂêÑ‰∏™Ê®°ÂûãÔºàÂéüÂßãÊ®°ÂûãÂíåÈáèÂåñÊ®°ÂûãÔºâÁöÑÊïàÁéáÊµãËØïÁªìÊûúÔºåÂåÖÊã¨‰∏çÂêåBatchsize‰∏ãÁöÑÊé®ÁêÜÈÄüÂ∫¶(tokens/s)„ÄÇ

| Inference Framework | Model                                                                                                  | Number of GPUs (H20) | input_length | batch=1 | batch=4 |
| ------------------- | ------------------------------------------------------------------------------------------------------ | -------------------- | ------------ |---------|---------|
| vLLM                | Hunyuan-Large                                                                                              | 16                   | 2048         | 20.2    | 75.5    |
| vLLM                | Hunyuan-Large(int8 weight only)                                                                            | 8                    | 2048         | 19.3    | 73.6    |
| vLLM                | Hunyuan-Large(W8A8C8-FP8)                                                                                  | 8                    | 2048         | 19.8    | 74.9    |
## Tokenizer

HunYuan-LargeÊ®°Âûã‰∏≠ÈááÁî®ÁöÑtokenizerÂπ≥Ë°°‰∫ÜÂéãÁº©ÁéáÂíåÊïàÊûú‰∏§‰∏™Âõ†Á¥†Ôºå‰øùËØÅembeddingÂèØ‰ª•ÂæóÂà∞ÂÖÖÂàÜÁöÑËÆ≠ÁªÉ„ÄÇËØçË°®ÂåÖÂê´‰∫Ü‰ªétiktoken‰∏≠ÈõÜÊàêÁöÑ100K‰∏™tokenÔºåÂú®Ê≠§Âü∫Á°Ä‰∏äÔºåÊàë‰ª¨‰ΩøÁî®Â§ßÈáèÁöÑ‰ºòË¥®‰∏≠ÊñáËÆ≠ÁªÉÊï∞ÊçÆÔºåËÆ≠ÁªÉ‰∫ÜÈ¢ùÂ§ñÁöÑ29KÁöÑ‰∏≠ÊñátokenÔºå‰ª•Â¢ûÂº∫Ê®°ÂûãÁöÑ‰∏≠ÊñáËÉΩÂäõÂíåtokenizerÂØπÊñáÊú¨ÁöÑÂéãÁº©ÁéáÔºå‰∫åËÄÖÁªìÂêàÂêéÔºå‰∏éLLaMA3ÂàÜËØçÂô®Áõ∏ÊØîÔºåÊàë‰ª¨ÁöÑÊñ∞ÂàÜËØçÂô®Âú®ÂéãÁº©Áéá‰∏äÊúâÊâÄÊîπÂñÑÔºå‰ªé2.78‰∏™Â≠óÁ¨¶/tokenÊèêÈ´òÂà∞3.13‰∏™Â≠óÁ¨¶/token„ÄÇ


## Ê∑∑ÂÖÉAPI
ÊÇ®ÂèØ‰ª•Âú®ËÖæËÆØ‰∫ë‰ΩìÈ™åÊàë‰ª¨ÁöÑhunyuan-largeÊ®°ÂûãÔºåÂÖ∑‰ΩìËØ∑ËßÅÔºöhttps://cloud.tencent.com/document/product/1729/97730„ÄÇ

## ‰∫§‰∫íÂºèDemo Web 
Hunyuan-LargeÁé∞Â∑≤ÂºÄÊîæÁΩëÈ°µdemo„ÄÇËÆøÈóÆ https://huggingface.co/spaces/tencent/Hunyuan-Large Âç≥ÂèØÁÆÄÂçï‰ΩìÈ™åÊàë‰ª¨ÁöÑÊ®°Âûã„ÄÇ

<br>

## ‰ΩøÁî®TIËÆ≠ÁªÉ/Êé®ÁêÜ 
ËÖæËÆØ‰∫ëÁöÑ [TIÂπ≥Âè∞](https://cloud.tencent.com/product/ti) ÊòØ‰∏ìÈó®‰∏∫AIÂ∑•Á®ãÂ∏àËÆæËÆ°ÁöÑÂÖ®Èù¢ÁöÑÊú∫Âô®Â≠¶‰π†Âπ≥Âè∞„ÄÇÈÄöËøáÈõÜÊàêHunyuan-LargeÊ®°ÂûãÔºåÊÇ®Âè™ÈúÄÂá†Ê≠•Âç≥ÂèØËΩªÊùæËøõË°åËÆ≠ÁªÉÂíåÈÉ®ÁΩ≤„ÄÇËÆøÈóÆ [Chat with Hunyuan-Large](https://console.cloud.tencent.com/tione/v2/aimarket/detail/hunyuan_series?PublicAlgoGroupId=hunyuan-large-chat&detailTab=demo) Ê®°ÂùóÔºå‰ΩìÈ™å‰∏éÊ®°ÂûãÁöÑÂÆûÊó∂ÂØπËØùÔºåÂπ∂Âú®TI‰∏äÊé¢Á¥¢ [Hunyuan-Large Best Practice](https://cloud.tencent.com/document/product/851/112032) ÔºåÂàõÂª∫Ëá™Â∑±ÁöÑÂÆöÂà∂Hunyuan-LargeÊ®°Âûã„ÄÇ

## ÂºïÁî®
Â¶ÇÊûú‰Ω†ËßâÂæóÊàë‰ª¨ÁöÑÂ∑•‰ΩúÂØπ‰Ω†ÊúâÂ∏ÆÂä©ÔºåÊ¨¢ËøéÂºïÁî®Êàë‰ª¨ÔºÅ

```
@misc{sun2024hunyuanlargeopensourcemoemodel,
      title={Hunyuan-Large: An Open-Source MoE Model with 52 Billion Activated Parameters by Tencent}, 
      author={Xingwu Sun and Yanfeng Chen and Yiqing Huang and Ruobing Xie and Jiaqi Zhu and Kai Zhang and Shuaipeng Li and Zhen Yang and Jonny Han and Xiaobo Shu and Jiahao Bu and Zhongzhi Chen and Xuemeng Huang and Fengzong Lian and Saiyong Yang and Jianfeng Yan and Yuyuan Zeng and Xiaoqin Ren and Chao Yu and Lulu Wu and Yue Mao and Tao Yang and Suncong Zheng and Kan Wu and Dian Jiao and Jinbao Xue and Xipeng Zhang and Decheng Wu and Kai Liu and Dengpeng Wu and Guanghui Xu and Shaohua Chen and Shuang Chen and Xiao Feng and Yigeng Hong and Junqiang Zheng and Chengcheng Xu and Zongwei Li and Xiong Kuang and Jianglu Hu and Yiqi Chen and Yuchi Deng and Guiyang Li and Ao Liu and Chenchen Zhang and Shihui Hu and Zilong Zhao and Zifan Wu and Yao Ding and Weichao Wang and Han Liu and Roberts Wang and Hao Fei and Peijie She and Ze Zhao and Xun Cao and Hai Wang and Fusheng Xiang and Mengyuan Huang and Zhiyuan Xiong and Bin Hu and Xuebin Hou and Lei Jiang and Jiajia Wu and Yaping Deng and Yi Shen and Qian Wang and Weijie Liu and Jie Liu and Meng Chen and Liang Dong and Weiwen Jia and Hu Chen and Feifei Liu and Rui Yuan and Huilin Xu and Zhenxiang Yan and Tengfei Cao and Zhichao Hu and Xinhua Feng and Dong Du and Tinghao She and Yangyu Tao and Feng Zhang and Jianchen Zhu and Chengzhong Xu and Xirui Li and Chong Zha and Wen Ouyang and Yinben Xia and Xiang Li and Zekun He and Rongpeng Chen and Jiawei Song and Ruibin Chen and Fan Jiang and Chongqing Zhao and Bo Wang and Hao Gong and Rong Gan and Winston Hu and Zhanhui Kang and Yong Yang and Yuhong Liu and Di Wang and Jie Jiang},
      year={2024},
      eprint={2411.02265},
      archivePrefix={arXiv},
      primaryClass={cs.CL},
      url={https://arxiv.org/abs/2411.02265}, 
}
```
<br>

## ËÅîÁ≥ªÊàë‰ª¨
Â¶ÇÊûú‰Ω†ÊÉ≥ÁªôÊàë‰ª¨ÁöÑÁ†îÂèëÂíå‰∫ßÂìÅÂõ¢ÈòüÁïôË®ÄÔºåÊ¨¢ËøéËÅîÁ≥ªÊàë‰ª¨ËÖæËÆØÊ∑∑ÂÖÉLLMÂõ¢Èòü„ÄÇ‰Ω†ÂèØ‰ª•ÈÄöËøáÈÇÆ‰ª∂Ôºàhunyuan_opensource@tencent.comÔºâËÅîÁ≥ªÊàë‰ª¨„ÄÇ

</document_content>
</document>
<document index="3">
<source>./benchmark/README.md</source>
<document_content>

</document_content>
</document>
<document index="4">
<source>./models/README.md</source>
<document_content>

</document_content>
</document>
<document index="5">
<source>./models/__init__.py</source>
<document_content>

</document_content>
</document>
<document index="6">
<source>./models/configuration_hunyuan.py</source>
<document_content>
# coding=utf-8
# Copyright (C) 2024 THL A29 Limited, a Tencent company.  All rights reserved.
""" HunYuan model configuration"""

from transformers.configuration_utils import PretrainedConfig
from transformers.utils import logging


logger = logging.get_logger(__name__)


class HunYuanConfig(PretrainedConfig):
    r"""
    This is the configuration class to store the configuration of a [`HunYuanModel`]. It is used to instantiate an
    HunYuan model according to the specified arguments, defining the model architecture. Instantiating a configuration
    with the defaults will yield a similar configuration to that of the HunYuan-7B.

    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the
    documentation from [`PretrainedConfig`] for more information.


    Args:
        vocab_size (`int`, *optional*, defaults to 32000):
            Vocabulary size of the HunYuan model. Defines the number of different tokens that can be represented by the
            `inputs_ids` passed when calling [`HunYuanModel`]
        hidden_size (`int`, *optional*, defaults to 4096):
            Dimension of the hidden representations.
        intermediate_size (`int`, *optional*, defaults to 11008):
            Dimension of the MLP representations.
        num_hidden_layers (`int`, *optional*, defaults to 32):
            Number of hidden layers in the Transformer decoder.
        num_attention_heads (`int`, *optional*, defaults to 32):
            Number of attention heads for each attention layer in the Transformer decoder.
        num_key_value_heads (`int`, *optional*):
            This is the number of key_value heads that should be used to implement Grouped Query Attention. If
            `num_key_value_heads=num_attention_heads`, the model will use Multi Head Attention (MHA), if
            `num_key_value_heads=1 the model will use Multi Query Attention (MQA) otherwise GQA is used. When
            converting a multi-head checkpoint to a GQA checkpoint, each group key and value head should be constructed
            by meanpooling all the original heads within that group. For more details checkout [this
            paper](https://arxiv.org/pdf/2305.13245.pdf). If it is not specified, will default to
            `num_attention_heads`.
        hidden_act (`str` or `function`, *optional*, defaults to `"silu"`):
            The non-linear activation function (function or string) in the decoder.
        max_position_embeddings (`int`, *optional*, defaults to 2048):
            The maximum sequence length that this model might ever be used with.
        initializer_range (`float`, *optional*, defaults to 0.02):
            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.
        rms_norm_eps (`float`, *optional*, defaults to 1e-06):
            The epsilon used by the rms normalization layers.
        use_cache (`bool`, *optional*, defaults to `True`):
            Whether or not the model should return the last key/values attentions (not used by all models). Only
            relevant if `config.is_decoder=True`.
        pad_token_id (`int`, *optional*):
            Padding token id.
        bos_token_id (`int`, *optional*, defaults to 1):
            Beginning of stream token id.
        eos_token_id (`int`, *optional*, defaults to 2):
            End of stream token id.
        pretraining_tp (`int`, *optional*, defaults to 1):
            Experimental feature. Tensor parallelism rank used during pretraining. Please refer to [this
            document](https://huggingface.co/docs/transformers/parallelism) to understand more about it. This value is
            necessary to ensure exact reproducibility of the pretraining results. Please refer to [this
            issue](https://github.com/pytorch/pytorch/issues/76232).
        tie_word_embeddings (`bool`, *optional*, defaults to `False`):
            Whether to tie weight embeddings
        rope_theta (`float`, *optional*, defaults to 10000.0):
            The base period of the RoPE embeddings.
        rope_scaling (`Dict`, *optional*):
            Dictionary containing the scaling configuration for the RoPE embeddings. Currently supports two scaling
            strategies: linear and dynamic. Their scaling factor must be a float greater than 1. The expected format is
            `{"type": strategy name, "factor": scaling factor}`. When using this flag, don't update
            `max_position_embeddings` to the expected new maximum. See the following thread for more information on how
            these scaling strategies behave:
            https://www.reddit.com/r/LocalLLaMA/comments/14mrgpr/dynamically_scaled_rope_further_increases/. This is an
            experimental feature, subject to breaking API changes in future versions.
        attention_bias (`bool`, defaults to `False`, *optional*, defaults to `False`):
            Whether to use a bias in the query, key, value and output projection layers during self-attention.
        attention_dropout (`float`, *optional*, defaults to 0.0):
            The dropout ratio for the attention probabilities.
        use_qk_norm (`bool`, *optional*, defaults to `False`):
            Whether query and key in attention use norm
        use_cla (`bool`, *optional*, defaults to `False`):
            Whether to use CLA in attention
        cla_share_factor (`int`, *optional*, defaults to 1):
            The share factor of CLA
    """

    model_type = "hunyuan"
    keys_to_ignore_at_inference = ["past_key_values"]

    def __init__(
        self,
        vocab_size=290943,
        hidden_size=4096,
        intermediate_size=11008,
        num_hidden_layers=32,
        num_attention_heads=32,
        num_key_value_heads=None,
        hidden_act="silu",
        max_position_embeddings=2048,
        initializer_range=0.02,
        rms_norm_eps=1e-5,
        use_cache=True,
        pad_token_id=0,
        bos_token_id=1,
        eos_token_id=2,
        pretraining_tp=1,
        tie_word_embeddings=False,
        rope_theta=10000.0,
        rope_scaling=None,
        attention_bias=False,
        attention_dropout=0.0,
        use_qk_norm=False,
        use_cla=False,
        cla_share_factor=1,
        num_experts=1,
        use_mixed_mlp_moe=False,
        num_shared_expert=1,
        moe_topk=1,
        capacity_factor=1.0,
        moe_drop_tokens=False,
        moe_random_routing_dropped_token=False,
        **kwargs,
    ):
        self.vocab_size = vocab_size
        self.max_position_embeddings = max_position_embeddings
        self.hidden_size = hidden_size
        self.intermediate_size = intermediate_size
        self.num_hidden_layers = num_hidden_layers
        self.num_attention_heads = num_attention_heads
        self.num_experts = num_experts
        self.use_mixed_mlp_moe = use_mixed_mlp_moe
        self.num_shared_expert = num_shared_expert
        self.moe_topk = moe_topk
        self.capacity_factor = capacity_factor
        self.moe_drop_tokens = moe_drop_tokens
        self.moe_random_routing_dropped_token = moe_random_routing_dropped_token

        # for backward compatibility
        if num_key_value_heads is None:
            num_key_value_heads = num_attention_heads

        self.num_key_value_heads = num_key_value_heads
        self.hidden_act = hidden_act
        self.initializer_range = initializer_range
        self.rms_norm_eps = rms_norm_eps
        self.pretraining_tp = pretraining_tp
        self.use_cache = use_cache
        self.rope_theta = rope_theta
        self.rope_scaling = rope_scaling
        # self._rope_scaling_validation()   # TODO: Need validation?
        self.attention_bias = attention_bias
        self.attention_dropout = attention_dropout
        self.use_qk_norm = use_qk_norm
        self.use_cla = use_cla
        self.cla_share_factor = cla_share_factor

        super().__init__(
            pad_token_id=pad_token_id,
            bos_token_id=bos_token_id,
            eos_token_id=eos_token_id,
            tie_word_embeddings=tie_word_embeddings,
            **kwargs,
        )

    def _rope_scaling_validation(self):
        """
        Validate the `rope_scaling` configuration.
        """
        if self.rope_scaling is None:
            return

        if not isinstance(self.rope_scaling, dict) or len(self.rope_scaling) != 2:
            raise ValueError(
                "`rope_scaling` must be a dictionary with with two fields, `type` and `factor` or `type` and `alpha`, "
                f"got {self.rope_scaling}"
            )
        rope_scaling_type = self.rope_scaling.get("type", None)
        rope_scaling_factor = self.rope_scaling.get("factor", None)
        rope_scaling_alpha = self.rope_scaling.get("alpha", None)
        if rope_scaling_type is None or rope_scaling_type not in ["linear", "dynamic"]:
            raise ValueError(
                f"`rope_scaling`'s type field must be one of ['linear', 'dynamic'], got {rope_scaling_type}"
            )
        if rope_scaling_factor is None and rope_scaling_alpha is None:
            raise ValueError("`rope_scaling`'s factor or alpha field must be have one, got both of none")
        if rope_scaling_factor is not None:
            if not isinstance(rope_scaling_factor, float) or rope_scaling_factor <= 1.0:
                raise ValueError(f"`rope_scaling`'s factor field must be a float > 1.0, got {rope_scaling_factor}")
        if rope_scaling_alpha is not None:
            if not isinstance(rope_scaling_alpha, float) or rope_scaling_alpha <= 1.0:
                raise ValueError(f"`rope_scaling`'s alpha field must be a float > 1.0, got {rope_scaling_alpha}")

</document_content>
</document>
<document index="7">
<source>./models/generation_config.json</source>
<document_content>
{
  "eos_token_id": [127960, 127967],
  "pad_token_id": 127961,
  "do_sample": true,
  "top_k": 20,
  "top_p": 0.6,
  "repetition_penalty": 1.05,
  "temperature": 0.7,
  "transformers_version": "4.31.0"
}
</document_content>
</document>
<document index="8">
<source>./models/modeling_hunyuan.py</source>
<document_content>
# coding=utf-8
# Copyright (C) 2024 THL A29 Limited, a Tencent company.  All rights reserved.
#
""" PyTorch HunYuan model."""

import math
import warnings
from typing import List, Optional, Tuple, Union

import torch
from torch import Tensor
import torch.nn.functional as F
import torch.utils.checkpoint
from torch import nn
from torch.nn import BCEWithLogitsLoss, CrossEntropyLoss, MSELoss

from transformers.activations import ACT2FN
from transformers.cache_utils import Cache, DynamicCache
from transformers.modeling_attn_mask_utils import (
    AttentionMaskConverter,
    _prepare_4d_attention_mask,
    _prepare_4d_causal_attention_mask,
    _prepare_4d_causal_attention_mask_for_sdpa,
)
from transformers.modeling_outputs import (
    BaseModelOutputWithPast,
    CausalLMOutputWithPast,
    SequenceClassifierOutputWithPast
)
from transformers.modeling_utils import PreTrainedModel
from transformers.pytorch_utils import ALL_LAYERNORM_LAYERS, is_torch_greater_or_equal_than_1_13
from transformers.utils import (
    add_start_docstrings,
    add_start_docstrings_to_model_forward,
    is_flash_attn_2_available,
    is_flash_attn_greater_or_equal_2_10,
    logging,
    replace_return_docstrings,
)
from transformers.utils.import_utils import is_torch_fx_available
from .configuration_hunyuan import HunYuanConfig


if is_flash_attn_2_available():
    from flash_attn import flash_attn_func, flash_attn_varlen_func
    from flash_attn.bert_padding import index_first_axis, pad_input, unpad_input  # noqa


# This makes `_prepare_4d_causal_attention_mask` a leaf function in the FX graph.
# It means that the function will not be traced through and simply appear as a node in the graph.
if is_torch_fx_available():
    if not is_torch_greater_or_equal_than_1_13:
        import torch.fx

    _prepare_4d_causal_attention_mask = torch.fx.wrap(_prepare_4d_causal_attention_mask)


logger = logging.get_logger(__name__)

_CONFIG_FOR_DOC = "HunYuanConfig"


def topkgating(logits: Tensor, topk: int):
    logits = logits.float()
    gates = F.softmax(logits, dim=1)
    expert_capacity = topk * gates.shape[0]
    num_experts = int(gates.shape[1])
    # Top-k router probability and corresponding expert indices for each token.
    # Shape: [tokens_per_group, num_selected_experts].
    expert_gate, expert_index = torch.topk(gates, topk)
    expert_mask = F.one_hot(expert_index, num_experts)
    # For a given token, determine if it was routed to a given expert.
    # Shape: [tokens_per_group, num_experts]
    expert_mask_aux = expert_mask.max(dim=-2)[0]
    tokens_per_group_and_expert = torch.mean(expert_mask_aux.float(), dim=-2)
    router_prob_per_group_and_expert = torch.mean(gates.float(), dim=-2)
    l_aux = num_experts**2 * torch.mean(tokens_per_group_and_expert * router_prob_per_group_and_expert)

    gates_s = torch.clamp(
        torch.matmul(expert_mask.float(), gates.unsqueeze(-1)).sum(dim=1), min=torch.finfo(gates.dtype).eps
    )
    router_probs = gates / gates_s
    # Make num_selected_experts the leading axis to ensure that top-1 choices
    # have priority over top-2 choices, which have priority over top-3 choices,
    # etc.
    expert_index = torch.transpose(expert_index, 0, 1)
    # Shape: [num_selected_experts * tokens_per_group]
    expert_index = expert_index.reshape(-1)

    # Create mask out of indices.
    # Shape: [tokens_per_group * num_selected_experts, num_experts].
    expert_mask = F.one_hot(expert_index, num_experts).to(torch.int32)
    exp_counts = torch.sum(expert_mask, dim=0).detach()

    # Experts have a fixed capacity that we cannot exceed. A token's priority
    # within the expert's buffer is given by the masked, cumulative capacity of
    # its target expert.
    # Shape: [tokens_per_group * num_selected_experts, num_experts].
    token_priority = torch.cumsum(expert_mask, dim=0) * expert_mask - 1
    # Shape: [num_selected_experts, tokens_per_group, num_experts].
    token_priority = token_priority.reshape((topk, -1, num_experts))
    # Shape: [tokens_per_group, num_selected_experts, num_experts].
    token_priority = torch.transpose(token_priority, 0, 1)
    # For each token, across all selected experts, select the only non-negative
    # (unmasked) priority. Now, for group G routing to expert E, token T has
    # non-negative priority (i.e. token_priority[G,T,E] >= 0) if and only if E
    # is its targeted expert.
    # Shape: [tokens_per_group, num_experts].
    token_priority = torch.max(token_priority, dim=1)[0]

    # Token T can only be routed to expert E if its priority is positive and
    # less than the expert capacity. One-hot matrix will ignore indices outside
    # the range [0, expert_capacity).
    # Shape: [tokens_per_group, num_experts, expert_capacity].
    valid_mask = torch.logical_and(token_priority >= 0, token_priority < expert_capacity)
    token_priority = torch.masked_fill(token_priority, ~valid_mask, 0)
    dispatch_mask = F.one_hot(token_priority, expert_capacity).to(torch.bool)
    valid_mask = valid_mask.unsqueeze(-1).expand(-1, -1, expert_capacity)
    dispatch_mask = torch.masked_fill(dispatch_mask, ~valid_mask, 0)

    # The combine array will be used for combining expert outputs, scaled by the
    # router probabilities. Shape: [num_groups, tokens_per_group, num_experts,
    # expert_capacity].
    combine_weights = torch.einsum("...te,...tec->...tec", router_probs, dispatch_mask)
    exp_counts_capacity = torch.sum(dispatch_mask)
    exp_capacity_rate = exp_counts_capacity / (logits.shape[0]*topk)

    return [l_aux, exp_capacity_rate], combine_weights, dispatch_mask, exp_counts


def top1gating(logits: Tensor, random_routing_dropped_token: bool = False):
    """Implements Top1Gating on logits."""
    # everything is in fp32 in this function
    logits = logits.float()
    gates = F.softmax(logits, dim=1)
    capacity = gates.shape[0]

    # Create a mask for 1st's expert per token
    # noisy gating
    indices1_s = torch.argmax(gates, dim=1)
    num_experts = int(gates.shape[1])
    mask1 = F.one_hot(indices1_s, num_classes=num_experts)

    # gating decisions
    # exp_counts = torch.sum(mask1, dim=0).detach().to('cpu')
    exp_counts = torch.sum(mask1, dim=0).detach()

    # Compute l_aux
    me = torch.mean(gates, dim=0)
    ce = torch.mean(mask1.float(), dim=0)
    l_aux = torch.sum(me * ce) * num_experts
    mask1_rand = mask1

    top_idx = torch.topk(mask1_rand, k=capacity, dim=0)[1]

    new_mask1 = mask1 * torch.zeros_like(mask1).scatter_(0, top_idx, 1)
    mask1 = new_mask1
    mask1_bk = mask1
    if random_routing_dropped_token:
        not_full = capacity - new_mask1.sum(dim=0)
        sorted_notfull, indices_notfull = torch.sort(not_full, descending=True)
        sorted_notfull = sorted_notfull.to(torch.int64)
        not_full_experts_ids = torch.repeat_interleave(indices_notfull, sorted_notfull)
        shuffle_not_full_ids = torch.randperm(not_full_experts_ids.shape[0])
        not_full_experts_ids = not_full_experts_ids[shuffle_not_full_ids]
        indices1_s_after_drop = torch.argmax(new_mask1, dim=1)
        # get drop idx
        drop_mask = 1 - new_mask1.sum(dim=1)
        drop_mask = drop_mask.bool()
        drop_idx = drop_mask.nonzero().view(-1)
        drop_num = drop_mask.sum().to(torch.int64)
        indices1_s_after_drop.scatter_(0, drop_idx, not_full_experts_ids[:drop_num])
        nodrop_mask1 = F.one_hot(indices1_s_after_drop, num_classes=num_experts)
        mask1 = nodrop_mask1

    # Compute locations in capacity buffer
    locations1 = torch.cumsum(mask1, dim=0) - 1

    # Store the capacity location for each token
    locations1_s = torch.sum(locations1 * mask1, dim=1)

    # Normalize gate probabilities
    mask1_float = mask1.float()
    gates = gates * mask1_float

    locations1_sc = F.one_hot(locations1_s, num_classes=capacity).float()   # one hot to float
    combine_weights = torch.einsum("se,sc->sec", gates, locations1_sc)

    dispatch_mask = combine_weights.bool()

    exp_counts_capacity = torch.sum(mask1_bk)
    exp_capacity_rate = exp_counts_capacity / (logits.shape[0])
    return [l_aux, exp_capacity_rate], combine_weights, dispatch_mask, exp_counts


def _get_unpad_data(attention_mask):
    seqlens_in_batch = attention_mask.sum(dim=-1, dtype=torch.int32)
    indices = torch.nonzero(attention_mask.flatten(), as_tuple=False).flatten()
    max_seqlen_in_batch = seqlens_in_batch.max().item()
    cu_seqlens = F.pad(torch.cumsum(seqlens_in_batch, dim=0, dtype=torch.torch.int32), (1, 0))
    return (
        indices,
        cu_seqlens,
        max_seqlen_in_batch,
    )


def _expand_mask(mask: torch.Tensor, dtype: torch.dtype, tgt_len: Optional[int] = None):
    warnings.warn(
        "Calling `transformers.models.llama.modeling_llama._prepare_4d_attention_mask` is deprecated and will be "
        "removed in v4.37. Use `transformers.modeling_attn_mask_utils._prepare_4d_attention_mask"
    )
    return _prepare_4d_attention_mask(mask=mask, dtype=dtype, tgt_len=tgt_len)


def _make_causal_mask(
    input_ids_shape: torch.Size, dtype: torch.dtype, device: torch.device, past_key_values_length: int = 0
):
    warnings.warn(
        "Calling `transformers.models.llama.modeling_llama._make_causal_mask` is deprecated and will be removed in "
        "v4.37. Use `transformers.models.llama.modeling_llama.AttentionMaskConverter._make_causal_mask"
    )
    return AttentionMaskConverter._make_causal_mask(
        input_ids_shape=input_ids_shape, dtype=dtype, device=device, past_key_values_length=past_key_values_length
    )


class HunYuanRMSNorm(nn.Module):
    def __init__(self, hidden_size, eps=1e-6):
        """
        HunYuanRMSNorm is equivalent to T5LayerNorm
        """
        super().__init__()
        self.weight = nn.Parameter(torch.ones(hidden_size))
        self.variance_epsilon = eps

    def forward(self, hidden_states):
        input_dtype = hidden_states.dtype
        hidden_states = hidden_states.to(torch.float32)
        variance = hidden_states.pow(2).mean(-1, keepdim=True)
        hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)
        return self.weight * hidden_states.to(input_dtype)


ALL_LAYERNORM_LAYERS.append(HunYuanRMSNorm)


class HunYuanRotaryEmbedding(nn.Module):
    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None):
        super().__init__()

        self.dim = dim
        self.max_position_embeddings = max_position_embeddings
        self.base = base
        inv_freq = 1.0 / (self.base ** (torch.arange(0, self.dim, 2).float().to(device) / self.dim))
        inv_freq = inv_freq.bfloat16()
        self.register_buffer("inv_freq", inv_freq, persistent=False)

        # Build here to make `torch.jit.trace` work.
        self._set_cos_sin_cache(
            seq_len=max_position_embeddings, device=self.inv_freq.device, dtype=torch.get_default_dtype()
        )

    def _set_cos_sin_cache(self, seq_len, device, dtype):
        self.max_seq_len_cached = seq_len
        t = torch.arange(self.max_seq_len_cached, device=device, dtype=torch.float32)

        freqs = torch.outer(t, self.inv_freq)
        # Different from paper, but it uses a different permutation in order to obtain the same calculation
        emb = torch.cat((freqs, freqs), dim=-1).float()
        self.register_buffer("cos_cached", emb.cos().to(dtype), persistent=False)
        self.register_buffer("sin_cached", emb.sin().to(dtype), persistent=False)

    def forward(self, x, seq_len=None):
        # x: [bs, num_attention_heads, seq_len, head_size]
        if seq_len > self.max_seq_len_cached:
            self._set_cos_sin_cache(seq_len=seq_len, device=x.device, dtype=x.dtype)

        return (
            self.cos_cached[:seq_len].to(dtype=x.dtype),
            self.sin_cached[:seq_len].to(dtype=x.dtype),
        )


class HunYuanLinearScalingRotaryEmbedding(HunYuanRotaryEmbedding):
    """HunYuanRotaryEmbedding extended with linear scaling. Credits to the Reddit user /u/kaiokendev"""

    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None, scaling_factor=1.0):
        self.scaling_factor = scaling_factor
        super().__init__(dim, max_position_embeddings, base, device)

    def _set_cos_sin_cache(self, seq_len, device, dtype):
        self.max_seq_len_cached = seq_len
        t = torch.arange(self.max_seq_len_cached, device=device, dtype=self.inv_freq.dtype)
        t = t / self.scaling_factor

        freqs = torch.outer(t, self.inv_freq)
        # Different from paper, but it uses a different permutation in order to obtain the same calculation
        emb = torch.cat((freqs, freqs), dim=-1)
        self.register_buffer("cos_cached", emb.cos().to(dtype), persistent=False)
        self.register_buffer("sin_cached", emb.sin().to(dtype), persistent=False)


class HunYuanDynamicNTKScalingRotaryEmbedding(HunYuanRotaryEmbedding):
    """
    HunYuanRotaryEmbedding extended with Dynamic NTK scaling.
    Credits to the Reddit users /u/bloc97 and /u/emozilla
    """

    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None, scaling_factor=1.0):
        self.scaling_factor = scaling_factor
        super().__init__(dim, max_position_embeddings, base, device)

    def _set_cos_sin_cache(self, seq_len, device, dtype):
        self.max_seq_len_cached = seq_len

        if seq_len > self.max_position_embeddings:
            base = self.base * (
                (self.scaling_factor * seq_len / self.max_position_embeddings) - (self.scaling_factor - 1)
            ) ** (self.dim / (self.dim - 2))
            inv_freq = 1.0 / (base ** (torch.arange(0, self.dim, 2).float().to(device) / self.dim))
            self.register_buffer("inv_freq", inv_freq, persistent=False)

        t = torch.arange(self.max_seq_len_cached, device=device, dtype=self.inv_freq.dtype)

        freqs = torch.outer(t, self.inv_freq)
        # Different from paper, but it uses a different permutation in order to obtain the same calculation
        emb = torch.cat((freqs, freqs), dim=-1)
        self.register_buffer("cos_cached", emb.cos().to(dtype), persistent=False)
        self.register_buffer("sin_cached", emb.sin().to(dtype), persistent=False)


class HunYuanDynamicNTKAlphaRotaryEmbedding(HunYuanRotaryEmbedding):
    """
    HunYuanRotaryEmbedding extended with Dynamic NTK scaling.
    Credits to the Reddit users /u/bloc97 and /u/emozilla
    """

    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None, scaling_alpha=1.0):
        self.scaling_alpha = scaling_alpha
        super().__init__(dim, max_position_embeddings, base, device)

    def _set_cos_sin_cache(self, seq_len, device, dtype):
        self.max_seq_len_cached = seq_len
        base = self.base * self.scaling_alpha ** (self.dim / (self.dim-2))
        inv_freq = 1.0 / (base ** (torch.arange(0, self.dim, 2).float().to(device) / self.dim))

        self.register_buffer("inv_freq", inv_freq, persistent=False)

        t = torch.arange(self.max_seq_len_cached, device=device, dtype=self.inv_freq.dtype)

        freqs = torch.outer(t, self.inv_freq)
        # Different from paper, but it uses a different permutation in order to obtain the same calculation
        emb = torch.cat((freqs, freqs), dim=-1)
        self.register_buffer("cos_cached", emb.cos().to(dtype), persistent=False)
        self.register_buffer("sin_cached", emb.sin().to(dtype), persistent=False)


def rotate_half(x):
    """Rotates half the hidden dims of the input."""
    x1 = x[..., : x.shape[-1] // 2]
    x2 = x[..., x.shape[-1] // 2:]
    return torch.cat((-x2, x1), dim=-1)


def apply_rotary_pos_emb(q, k, cos, sin, position_ids, unsqueeze_dim=1):
    """Applies Rotary Position Embedding to the query and key tensors.

    Args:
        q (`torch.Tensor`): The query tensor.
        k (`torch.Tensor`): The key tensor.
        cos (`torch.Tensor`): The cosine part of the rotary embedding.
        sin (`torch.Tensor`): The sine part of the rotary embedding.
        position_ids (`torch.Tensor`):
            The position indices of the tokens corresponding to the query and key tensors. For example, this can be
            used to pass offsetted position ids when working with a KV-cache.
        unsqueeze_dim (`int`, *optional*, defaults to 1):
            The 'unsqueeze_dim' argument specifies the dimension along which to unsqueeze cos[position_ids] and
            sin[position_ids] so that they can be properly broadcasted to the dimensions of q and k. For example, note
            that cos[position_ids] and sin[position_ids] have the shape [batch_size, seq_len, head_dim]. Then, if q and
            k have the shape [batch_size, heads, seq_len, head_dim], then setting unsqueeze_dim=1 makes
            cos[position_ids] and sin[position_ids] broadcastable to the shapes of q and k. Similarly, if q and k have
            the shape [batch_size, seq_len, heads, head_dim], then set unsqueeze_dim=2.
    Returns:
        `tuple(torch.Tensor)` comprising of the query and key tensors rotated using the Rotary Position Embedding.
    """
    cos = cos[position_ids].unsqueeze(unsqueeze_dim)
    sin = sin[position_ids].unsqueeze(unsqueeze_dim)
    q_embed = (q * cos) + (rotate_half(q) * sin)
    k_embed = (k * cos) + (rotate_half(k) * sin)
    return q_embed, k_embed


class HunYuanMLP(nn.Module):
    def __init__(self, config: HunYuanConfig, layer_idx=None, is_shared_mlp=False):
        super().__init__()
        self.config = config
        self.layer_idx = layer_idx
        self.hidden_size = config.hidden_size
        if is_shared_mlp:
            self.intermediate_size = config.intermediate_size * config.num_shared_expert
        else:
            self.intermediate_size = config.intermediate_size
        self.gate_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=False)
        self.up_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=False)
        self.down_proj = nn.Linear(self.intermediate_size, self.hidden_size, bias=False)
        self.act_fn = ACT2FN[config.hidden_act]

    def forward(self, x):
        if self.config.pretraining_tp > 1:
            slice = self.intermediate_size // self.config.pretraining_tp
            gate_proj_slices = self.gate_proj.weight.split(slice, dim=0)
            up_proj_slices = self.up_proj.weight.split(slice, dim=0)
            down_proj_slices = self.down_proj.weight.split(slice, dim=1)

            gate_proj = torch.cat(
                [F.linear(x, gate_proj_slices[i]) for i in range(self.config.pretraining_tp)], dim=-1
            )
            up_proj = torch.cat([F.linear(x, up_proj_slices[i]) for i in range(self.config.pretraining_tp)], dim=-1)

            intermediate_states = (self.act_fn(gate_proj) * up_proj).split(slice, dim=2)
            down_proj = [
                F.linear(intermediate_states[i], down_proj_slices[i]) for i in range(self.config.pretraining_tp)
            ]
            down_proj = sum(down_proj)
        else:
            down_proj = self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))

        return down_proj


class HunYuanTopKGate(nn.Module):
    def __init__(self, config: HunYuanConfig, layer_idx: Optional[int] = None):
        super().__init__()
        self.config = config
        self.layer_idx = layer_idx
        self.moe_topk = config.moe_topk
        self.drop_tokens = config.moe_drop_tokens
        self.min_capacity = 8
        self.random_routing_dropped_token = config.moe_random_routing_dropped_token
        self.wg = nn.Linear(config.hidden_size, config.num_experts, bias=False, dtype=torch.float32)

    def forward(self, hidden_states):
        bsz, seq_len, hidden_size = hidden_states.shape
        hidden_states = hidden_states.reshape(-1, hidden_size)
        if self.wg.weight.dtype == torch.float32:
            hidden_states = hidden_states.float()
        logits = self.wg(hidden_states)
        if self.moe_topk == 1:
            gate_output = top1gating(logits, random_routing_dropped_token=self.random_routing_dropped_token)
        else:
            gate_output = topkgating(logits, self.moe_topk)

        return gate_output


class HunYuanMoE(nn.Module):
    def __init__(self, config: HunYuanConfig, layer_idx: Optional[int] = None):
        super().__init__()
        self.config = config
        self.layer_idx = layer_idx
        self.moe_topk = config.moe_topk
        self.num_experts = config.num_experts
        if config.use_mixed_mlp_moe:
            self.shared_mlp = HunYuanMLP(config, layer_idx=layer_idx, is_shared_mlp=True)
        self.gate = HunYuanTopKGate(config, layer_idx=layer_idx)
        self.experts = nn.ModuleList(
            [HunYuanMLP(config, layer_idx=layer_idx, is_shared_mlp=False) for _ in range(config.num_experts)]
        )

    def forward(self, hidden_states):
        bsz, seq_len, hidden_size = hidden_states.shape

        if self.config.use_mixed_mlp_moe:
            hidden_states_mlp = self.shared_mlp(hidden_states)

        l_moe, combine_weights, dispatch_mask, exp_counts = self.gate(hidden_states)

        reshaped_input = hidden_states.reshape(-1, hidden_size)

        dispatched_input = torch.einsum("sec,sm->ecm", dispatch_mask.type_as(hidden_states), reshaped_input)

        chunks = dispatched_input.chunk(self.num_experts, dim=0)
        expert_outputs = []
        for chunk, expert in zip(chunks, self.experts):
            expert_outputs.append(expert(chunk))

        expert_output = torch.cat(expert_outputs, dim=0)
        combined_output = torch.einsum("sec,ecm->sm", combine_weights.type_as(hidden_states), expert_output)
        combined_output = combined_output.reshape(bsz, seq_len, hidden_size)

        if self.config.use_mixed_mlp_moe:
            output = hidden_states_mlp + combined_output
        else:
            output = combined_output

        return output


def repeat_kv(hidden_states: torch.Tensor, n_rep: int) -> torch.Tensor:
    """
    This is the equivalent of torch.repeat_interleave(x, dim=1, repeats=n_rep). The hidden states go from (batch,
    num_key_value_heads, seqlen, head_dim) to (batch, num_attention_heads, seqlen, head_dim)
    """
    batch, num_key_value_heads, slen, head_dim = hidden_states.shape
    if n_rep == 1:
        return hidden_states
    hidden_states = hidden_states[:, :, None, :, :].expand(batch, num_key_value_heads, n_rep, slen, head_dim)
    return hidden_states.reshape(batch, num_key_value_heads * n_rep, slen, head_dim)


class HunYuanAttention(nn.Module):
    """Multi-headed attention from 'Attention Is All You Need' paper"""

    def __init__(self, config: HunYuanConfig, layer_idx: Optional[int] = None):
        super().__init__()
        self.config = config
        self.layer_idx = layer_idx
        # layer_idx ‰ªé 0 ÂºÄÂßã
        self.attention_type = 'cross' if config.use_cla and layer_idx % config.cla_share_factor != 0 else 'self'
        if layer_idx is None:
            logger.warning_once(
                f"Instantiating {self.__class__.__name__} without passing `layer_idx` is not recommended and will "
                "to errors during the forward call, if caching is used. Please make sure to provide a `layer_idx` "
                "when creating this class."
            )

        self.attention_dropout = config.attention_dropout
        self.hidden_size = config.hidden_size
        self.num_heads = config.num_attention_heads
        self.head_dim = self.hidden_size // self.num_heads
        self.num_key_value_heads = config.num_key_value_heads
        self.num_key_value_groups = self.num_heads // self.num_key_value_heads
        self.max_position_embeddings = config.max_position_embeddings
        self.rope_theta = config.rope_theta
        self.is_causal = True
        self.use_qk_norm = config.use_qk_norm

        if (self.head_dim * self.num_heads) != self.hidden_size:
            raise ValueError(
                f"hidden_size must be divisible by num_heads (got `hidden_size`: {self.hidden_size}"
                f" and `num_heads`: {self.num_heads})."
            )

        self.q_proj = nn.Linear(self.hidden_size, self.num_heads * self.head_dim, bias=config.attention_bias)
        if self.attention_type == 'self':
            self.k_proj = nn.Linear(
                self.hidden_size, self.num_key_value_heads * self.head_dim, bias=config.attention_bias
            )
            self.v_proj = nn.Linear(
                self.hidden_size, self.num_key_value_heads * self.head_dim, bias=config.attention_bias
            )
        self.o_proj = nn.Linear(self.num_heads * self.head_dim, self.hidden_size, bias=config.attention_bias)
        if self.use_qk_norm:
            self.query_layernorm = HunYuanRMSNorm(self.head_dim, eps=config.rms_norm_eps)
            self.key_layernorm = HunYuanRMSNorm(self.head_dim, eps=config.rms_norm_eps)
        self._init_rope()

    def _init_rope(self):
        if self.config.rope_scaling is None:
            self.rotary_emb = HunYuanRotaryEmbedding(
                self.head_dim,
                max_position_embeddings=self.max_position_embeddings,
                base=self.rope_theta,
            )
        else:
            scaling_type = self.config.rope_scaling["type"]
            scaling_factor = self.config.rope_scaling["factor"]
            scaling_alpha = self.config.rope_scaling["alpha"]
            if scaling_type == "linear":
                self.rotary_emb = HunYuanLinearScalingRotaryEmbedding(
                    self.head_dim,
                    max_position_embeddings=self.max_position_embeddings,
                    scaling_factor=scaling_factor,
                    base=self.rope_theta,
                )
            elif scaling_type == "dynamic":
                if scaling_alpha:
                    self.rotary_emb = HunYuanDynamicNTKAlphaRotaryEmbedding(
                        self.head_dim,
                        max_position_embeddings=self.max_position_embeddings,
                        scaling_alpha=scaling_alpha,
                        base=self.rope_theta,
                    )
                else:
                    self.rotary_emb = HunYuanDynamicNTKScalingRotaryEmbedding(
                        self.head_dim,
                        max_position_embeddings=self.max_position_embeddings,
                        scaling_factor=scaling_factor,
                        base=self.rope_theta,
                    )
            else:
                raise ValueError(f"Unknown RoPE scaling type {scaling_type}")

    def _shape(self, tensor: torch.Tensor, seq_len: int, bsz: int):
        return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()

    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_value: Optional[Cache] = None,
        output_attentions: bool = False,
        use_cache: bool = False,
        kv_states: torch.Tensor = None,
        **kwargs,
    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:
        if "padding_mask" in kwargs:
            warnings.warn(
                "Passing `padding_mask` is deprecated and will be removed in v4.37. Please make sure use "
                "`attention_mask` instead.`"
            )

        bsz, q_len, _ = hidden_states.size()

        if self.config.pretraining_tp > 1:
            query_slices = self.q_proj.weight.split(
                (self.num_heads * self.head_dim) // self.config.pretraining_tp, dim=0
            )
            query_states = [F.linear(hidden_states, query_slices[i]) for i in range(self.config.pretraining_tp)]
            query_states = torch.cat(query_states, dim=-1)

            if self.attention_type == "cross" and kv_states is not None and isinstance(kv_states, tuple):
                orig_key_states, orig_value_states = kv_states
                key_states, value_states = kv_states
            else:
                key_value_slicing = (self.num_key_value_heads * self.head_dim) // self.config.pretraining_tp
                key_slices = self.k_proj.weight.split(key_value_slicing, dim=0)
                value_slices = self.v_proj.weight.split(key_value_slicing, dim=0)

                key_states = [F.linear(hidden_states, key_slices[i]) for i in range(self.config.pretraining_tp)]
                key_states = torch.cat(key_states, dim=-1)

                value_states = [F.linear(hidden_states, value_slices[i]) for i in range(self.config.pretraining_tp)]
                value_states = torch.cat(value_states, dim=-1)
                orig_key_states, orig_value_states = key_states, value_states

        else:
            query_states = self.q_proj(hidden_states)
            if self.attention_type == "cross" and kv_states is not None and isinstance(kv_states, tuple):
                orig_key_states, orig_value_states = kv_states
                key_states, value_states = kv_states
            else:
                key_states = self.k_proj(hidden_states)
                value_states = self.v_proj(hidden_states)
                orig_key_states, orig_value_states = key_states, value_states

        query_states = query_states.view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)
        key_states = key_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)
        value_states = value_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)

        kv_seq_len = key_states.shape[-2]
        if past_key_value is not None:
            if self.layer_idx is None:
                raise ValueError(
                    f"The cache structure has changed since version v4.36. If you are using {self.__class__.__name__} "
                    "for auto-regressive decoding with k/v caching, please make sure to initialize the attention class "
                    "with a layer index."
                )
            kv_seq_len += past_key_value.get_usable_length(kv_seq_len, self.layer_idx)
        cos, sin = self.rotary_emb(value_states, seq_len=kv_seq_len)
        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)

        if self.use_qk_norm:
            query_states = self.query_layernorm(query_states)
            key_states = self.key_layernorm(key_states)

        if past_key_value is not None:
            cache_kwargs = {"sin": sin, "cos": cos}  # Specific to RoPE models
            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)

        key_states = repeat_kv(key_states, self.num_key_value_groups)
        value_states = repeat_kv(value_states, self.num_key_value_groups)

        attn_weights = torch.matmul(query_states, key_states.transpose(2, 3)) / math.sqrt(self.head_dim)

        if attn_weights.size() != (bsz, self.num_heads, q_len, kv_seq_len):
            raise ValueError(
                f"Attention weights should be of size {(bsz, self.num_heads, q_len, kv_seq_len)}, but is"
                f" {attn_weights.size()}"
            )

        if attention_mask is not None:
            if attention_mask.size() != (bsz, 1, q_len, kv_seq_len):
                raise ValueError(
                    f"Attention mask should be of size {(bsz, 1, q_len, kv_seq_len)}, but is {attention_mask.size()}"
                )
            attn_weights = attn_weights + attention_mask

        # upcast attention to fp32
        attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query_states.dtype)
        attn_weights = nn.functional.dropout(attn_weights, p=self.attention_dropout, training=self.training)
        attn_output = torch.matmul(attn_weights, value_states)

        if attn_output.size() != (bsz, self.num_heads, q_len, self.head_dim):
            raise ValueError(
                f"`attn_output` should be of size {(bsz, self.num_heads, q_len, self.head_dim)}, but is"
                f" {attn_output.size()}"
            )

        attn_output = attn_output.transpose(1, 2).contiguous()

        attn_output = attn_output.reshape(bsz, q_len, self.hidden_size)

        if self.config.pretraining_tp > 1:
            attn_output = attn_output.split(self.hidden_size // self.config.pretraining_tp, dim=2)
            o_proj_slices = self.o_proj.weight.split(self.hidden_size // self.config.pretraining_tp, dim=1)
            attn_output = sum([F.linear(attn_output[i], o_proj_slices[i]) for i in range(self.config.pretraining_tp)])
        else:
            attn_output = self.o_proj(attn_output)

        if not output_attentions:
            attn_weights = None

        return attn_output, attn_weights, past_key_value, (orig_key_states, orig_value_states)


class HunYuanFlashAttention2(HunYuanAttention):
    """
    HunYuan flash attention module. This module inherits from `HunYuanAttention` as the weights of the module stays
    untouched. The only required change would be on the forward pass where it needs to correctly call the public API of
    flash attention and deal with padding tokens in case the input contains any of them.
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self._flash_attn_uses_top_left_mask = not is_flash_attn_greater_or_equal_2_10()

    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.LongTensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_value: Optional[Cache] = None,
        output_attentions: bool = False,
        use_cache: bool = False,
        kv_states: torch.Tensor = None,
        **kwargs,
    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:
        # HunYuanFlashAttention2 attention does not support output_attentions
        if "padding_mask" in kwargs:
            warnings.warn(
                "Passing `padding_mask` is deprecated and will be removed in v4.37. Please make sure use "
                "`attention_mask` instead.`"
            )

            # overwrite attention_mask with padding_mask
            attention_mask = kwargs.pop("padding_mask")

        bsz, q_len, _ = hidden_states.size()

        query_states = self.q_proj(hidden_states)
        if self.attention_type == "cross" and kv_states is not None and isinstance(kv_states, tuple):
            orig_key_states, orig_value_states = kv_states
            key_states, value_states = kv_states
        else:
            key_states = self.k_proj(hidden_states)
            value_states = self.v_proj(hidden_states)
            orig_key_states, orig_value_states = key_states, value_states

        # Flash attention requires the input to have the shape
        # batch_size x seq_length x head_dim x hidden_dim
        # therefore we just need to keep the original shape
        query_states = query_states.view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)
        key_states = key_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)
        value_states = value_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)

        kv_seq_len = key_states.shape[-2]
        if past_key_value is not None:
            kv_seq_len += past_key_value.get_usable_length(kv_seq_len, self.layer_idx)
        cos, sin = self.rotary_emb(value_states, seq_len=kv_seq_len)
        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)

        if self.use_qk_norm:
            query_states = self.query_layernorm(query_states)
            key_states = self.key_layernorm(key_states)

        if past_key_value is not None:
            cache_kwargs = {"sin": sin, "cos": cos}  # Specific to RoPE models
            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)

        query_states = query_states.transpose(1, 2)
        key_states = key_states.transpose(1, 2)
        value_states = value_states.transpose(1, 2)

        dropout_rate = self.attention_dropout if self.training else 0.0

        # In PEFT, usually we cast the layer norms in float32 for training stability reasons
        # therefore the input hidden states gets silently casted in float32. Hence, we need
        # cast them back in the correct dtype just to be sure everything works as expected.
        # This might slowdown training & inference so it is recommended to not cast the LayerNorms
        # in fp32. (HunYuanRMSNorm handles it correctly)

        input_dtype = query_states.dtype
        if input_dtype == torch.float32:
            # Handle the case where the model is quantized
            if hasattr(self.config, "_pre_quantization_dtype"):
                target_dtype = self.config._pre_quantization_dtype
            else:
                target_dtype = self.q_proj.weight.dtype

            logger.warning_once(
                f"The input hidden states seems to be silently casted in float32, this might be related to"
                f" the fact you have upcasted embedding or layer norm layers in float32. We will cast back the input in"
                f" {target_dtype}."
            )

            query_states = query_states.to(target_dtype)
            key_states = key_states.to(target_dtype)
            value_states = value_states.to(target_dtype)

        attn_output = self._flash_attention_forward(
            query_states, key_states, value_states, attention_mask, q_len, dropout=dropout_rate
        )

        attn_output = attn_output.reshape(bsz, q_len, self.hidden_size).contiguous()
        attn_output = self.o_proj(attn_output)

        return attn_output, None, past_key_value, (orig_key_states, orig_value_states)

    def _flash_attention_forward(
        self, query_states, key_states, value_states, attention_mask, query_length, dropout=0.0, softmax_scale=None
    ):
        """
        Calls the forward method of Flash Attention - if the input hidden states contain at least one padding token
        first unpad the input, then computes the attention scores and pad the final attention scores.

        Args:
            query_states (`torch.Tensor`):
                Input query states to be passed to Flash Attention API
            key_states (`torch.Tensor`):
                Input key states to be passed to Flash Attention API
            value_states (`torch.Tensor`):
                Input value states to be passed to Flash Attention API
            attention_mask (`torch.Tensor`):
                The padding mask - corresponds to a tensor of size `(batch_size, seq_len)` where 0 stands for the
                position of padding tokens and 1 for the position of non-padding tokens.
            dropout (`int`, *optional*):
                Attention dropout
            softmax_scale (`float`, *optional*):
                The scaling of QK^T before applying softmax. Default to 1 / sqrt(head_dim)
        """
        if not self._flash_attn_uses_top_left_mask:
            causal = self.is_causal
        else:
            causal = self.is_causal and query_length != 1

        # Contains at least one padding token in the sequence
        if attention_mask is not None:
            batch_size = query_states.shape[0]
            query_states, key_states, value_states, indices_q, cu_seq_lens, max_seq_lens = self._upad_input(
                query_states, key_states, value_states, attention_mask, query_length
            )

            cu_seqlens_q, cu_seqlens_k = cu_seq_lens
            max_seqlen_in_batch_q, max_seqlen_in_batch_k = max_seq_lens

            attn_output_unpad = flash_attn_varlen_func(
                query_states,
                key_states,
                value_states,
                cu_seqlens_q=cu_seqlens_q,
                cu_seqlens_k=cu_seqlens_k,
                max_seqlen_q=max_seqlen_in_batch_q,
                max_seqlen_k=max_seqlen_in_batch_k,
                dropout_p=dropout,
                softmax_scale=softmax_scale,
                causal=causal,
            )

            attn_output = pad_input(attn_output_unpad, indices_q, batch_size, query_length)
        else:
            attn_output = flash_attn_func(
                query_states, key_states, value_states, dropout, softmax_scale=softmax_scale, causal=causal
            )

        return attn_output

    def _upad_input(self, query_layer, key_layer, value_layer, attention_mask, query_length):
        indices_k, cu_seqlens_k, max_seqlen_in_batch_k = _get_unpad_data(attention_mask)
        batch_size, kv_seq_len, num_key_value_heads, head_dim = key_layer.shape

        key_layer = index_first_axis(
            key_layer.reshape(batch_size * kv_seq_len, num_key_value_heads, head_dim), indices_k
        )
        value_layer = index_first_axis(
            value_layer.reshape(batch_size * kv_seq_len, num_key_value_heads, head_dim), indices_k
        )
        if query_length == kv_seq_len:
            query_layer = index_first_axis(
                query_layer.reshape(batch_size * kv_seq_len, self.num_heads, head_dim), indices_k
            )
            cu_seqlens_q = cu_seqlens_k
            max_seqlen_in_batch_q = max_seqlen_in_batch_k
            indices_q = indices_k
        elif query_length == 1:
            max_seqlen_in_batch_q = 1
            cu_seqlens_q = torch.arange(
                batch_size + 1, dtype=torch.int32, device=query_layer.device
            )  # There is a memcpy here, that is very bad.
            indices_q = cu_seqlens_q[:-1]
            query_layer = query_layer.squeeze(1)
        else:
            # The -q_len: slice assumes left padding.
            attention_mask = attention_mask[:, -query_length:]
            query_layer, indices_q, cu_seqlens_q, max_seqlen_in_batch_q = unpad_input(query_layer, attention_mask)

        return (
            query_layer,
            key_layer,
            value_layer,
            indices_q,
            (cu_seqlens_q, cu_seqlens_k),
            (max_seqlen_in_batch_q, max_seqlen_in_batch_k),
        )


class HunYuanSdpaAttention(HunYuanAttention):
    """
    HunYuan attention module using torch.nn.functional.scaled_dot_product_attention. This module inherits from
    `HunYuanAttention` as the weights of the module stays untouched. The only changes are on the forward pass to adapt
    to SDPA API.
    """

    # Adapted from HunYuanAttention.forward
    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_value: Optional[Cache] = None,
        output_attentions: bool = False,
        use_cache: bool = False,
        kv_states: torch.Tensor = None,
    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:
        if output_attentions:
            logger.warning_once(
                'HunYuanModel is using HunYuanSdpaAttention,'
                'but `torch.nn.functional.scaled_dot_product_attention`'
                'does not support `output_attentions=True`. Falling back to the manual attention implementation, '
                'but specifying the manual implementation will be required from Transformers version v5.0.0 onwards. '
                'This warning can be removed using the argument `attn_implementation="eager"` when loading the model.'
            )
            return super().forward(
                hidden_states=hidden_states,
                attention_mask=attention_mask,
                position_ids=position_ids,
                past_key_value=past_key_value,
                output_attentions=output_attentions,
                use_cache=use_cache,
            )

        bsz, q_len, _ = hidden_states.size()

        query_states = self.q_proj(hidden_states)
        if self.attention_type == "cross" and kv_states is not None and isinstance(kv_states, tuple):
            orig_key_states, orig_value_states = kv_states
            key_states, value_states = kv_states
        else:
            key_states = self.k_proj(hidden_states)
            value_states = self.v_proj(hidden_states)
            orig_key_states, orig_value_states = key_states, value_states

        query_states = query_states.view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)
        key_states = key_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)
        value_states = value_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)

        kv_seq_len = key_states.shape[-2]
        if past_key_value is not None:
            kv_seq_len += past_key_value.get_usable_length(kv_seq_len, self.layer_idx)
        cos, sin = self.rotary_emb(value_states, seq_len=kv_seq_len)

        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)

        if self.use_qk_norm:
            query_states = self.query_layernorm(query_states)
            key_states = self.key_layernorm(key_states)

        if past_key_value is not None:
            cache_kwargs = {"sin": sin, "cos": cos}  # Specific to RoPE models
            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)

        key_states = repeat_kv(key_states, self.num_key_value_groups)
        value_states = repeat_kv(value_states, self.num_key_value_groups)

        if attention_mask is not None:
            if attention_mask.size() != (bsz, 1, q_len, kv_seq_len):
                raise ValueError(
                    f"Attention mask should be of size {(bsz, 1, q_len, kv_seq_len)}, but is {attention_mask.size()}"
                )

        # SDPA with memory-efficient backend is currently (torch==2.1.2) bugged with non-contiguous inputs with
        # custom attn_mask,
        # Reference: https://github.com/pytorch/pytorch/issues/112577.
        if query_states.device.type == "cuda" and attention_mask is not None:
            query_states = query_states.contiguous()
            key_states = key_states.contiguous()
            value_states = value_states.contiguous()

        attn_output = torch.nn.functional.scaled_dot_product_attention(
            query_states,
            key_states,
            value_states,
            attn_mask=attention_mask,
            dropout_p=self.attention_dropout if self.training else 0.0,
            # The q_len > 1 is necessary to match with AttentionMaskConverter.to_causal_4d that does not create a
            # causal mask in case q_len == 1.
            is_causal=self.is_causal and attention_mask is None and q_len > 1,
        )

        attn_output = attn_output.transpose(1, 2).contiguous()
        attn_output = attn_output.reshape(bsz, q_len, self.hidden_size)

        attn_output = self.o_proj(attn_output)

        return attn_output, None, past_key_value, (orig_key_states, orig_value_states)


HUNYUAN_ATTENTION_CLASSES = {
    "eager": HunYuanAttention,
    "flash_attention_2": HunYuanFlashAttention2,
    "sdpa": HunYuanSdpaAttention,
}


class HunYuanDecoderLayer(nn.Module):
    def __init__(self, config: HunYuanConfig, layer_idx: int):
        super().__init__()
        self.hidden_size = config.hidden_size
        self.layer_idx = layer_idx

        self.self_attn = HUNYUAN_ATTENTION_CLASSES[config._attn_implementation](config=config, layer_idx=layer_idx)

        if config.num_experts > 1:
            self.mlp = HunYuanMoE(config, layer_idx=layer_idx)
        else:
            self.mlp = HunYuanMLP(config, layer_idx=layer_idx, is_shared_mlp=False)
        self.input_layernorm = HunYuanRMSNorm(config.hidden_size, eps=config.rms_norm_eps)
        self.post_attention_layernorm = HunYuanRMSNorm(config.hidden_size, eps=config.rms_norm_eps)

    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_value: Optional[Tuple[torch.Tensor]] = None,
        output_attentions: Optional[bool] = False,
        use_cache: Optional[bool] = False,
        kv_states: Optional[Tuple[torch.Tensor]] = None,
        **kwargs,
    ) -> Tuple[torch.FloatTensor, Optional[Tuple[torch.FloatTensor, torch.FloatTensor]]]:
        """
        Args:
            hidden_states (`torch.FloatTensor`): input to the layer of shape `(batch, seq_len, embed_dim)`
            attention_mask (`torch.FloatTensor`, *optional*):
                attention mask of size `(batch_size, sequence_length)` if flash attention is used or `(batch_size, 1,
                query_sequence_length, key_sequence_length)` if default attention is used.
            output_attentions (`bool`, *optional*):
                Whether or not to return the attentions tensors of all attention layers. See `attentions` under
                returned tensors for more detail.
            use_cache (`bool`, *optional*):
                If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding
                (see `past_key_values`).
            past_key_value (`Tuple(torch.FloatTensor)`, *optional*): cached past key and value projection states
            kv_states (`Tuple(torch.FloatTensor)`, *optional*): Used when CLA is enabled,
                key and value states from past attention blocks
        """
        if "padding_mask" in kwargs:
            warnings.warn(
                "Passing `padding_mask` is deprecated and will be removed in v4.37. Please make sure use "
                "`attention_mask` instead.`"
            )

        residual = hidden_states

        hidden_states = self.input_layernorm(hidden_states)

        # Self Attention
        hidden_states, self_attn_weights, present_key_value, kv_states = self.self_attn(
            hidden_states=hidden_states,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_value=past_key_value,
            output_attentions=output_attentions,
            use_cache=use_cache,
            kv_states=kv_states,
            **kwargs,
        )
        hidden_states = residual + hidden_states

        # Fully Connected
        residual = hidden_states
        hidden_states = self.post_attention_layernorm(hidden_states)
        hidden_states = self.mlp(hidden_states)
        hidden_states = residual + hidden_states

        outputs = (hidden_states,)

        if output_attentions:
            outputs += (self_attn_weights,)

        if use_cache:
            outputs += (present_key_value,)

        outputs += (kv_states,)

        return outputs


HUNYUAN_START_DOCSTRING = r"""
    This model inherits from [`PreTrainedModel`]. Check the superclass documentation for the generic methods the
    library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
    etc.)

    This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module) subclass.
    Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
    and behavior.

    Parameters:
        config ([`HunYuanConfig`]):
            Model configuration class with all the parameters of the model. Initializing with a config file does not
            load the weights associated with the model, only the configuration. Check out the
            [`~PreTrainedModel.from_pretrained`] method to load the model weights.
"""


@add_start_docstrings(
    "The bare HunYuan Model outputting raw hidden-states without any specific head on top.",
    HUNYUAN_START_DOCSTRING,
)
class HunYuanPreTrainedModel(PreTrainedModel):
    config_class = HunYuanConfig
    base_model_prefix = "model"
    supports_gradient_checkpointing = True
    _no_split_modules = ["HunYuanDecoderLayer"]
    _skip_keys_device_placement = "past_key_values"
    _supports_flash_attn_2 = True
    _supports_sdpa = True
    _supports_cache_class = True

    def _init_weights(self, module):
        std = self.config.initializer_range
        if isinstance(module, nn.Linear):
            module.weight.data.normal_(mean=0.0, std=std)
            if module.bias is not None:
                module.bias.data.zero_()
        elif isinstance(module, nn.Embedding):
            module.weight.data.normal_(mean=0.0, std=std)
            if module.padding_idx is not None:
                module.weight.data[module.padding_idx].zero_()


HUNYUAN_INPUTS_DOCSTRING = r"""
    Args:
        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):
            Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
            it.

            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and
            [`PreTrainedTokenizer.__call__`] for details.

            [What are input IDs?](../glossary#input-ids)
        attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):
            Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:

            - 1 for tokens that are **not masked**,
            - 0 for tokens that are **masked**.

            [What are attention masks?](../glossary#attention-mask)

            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and
            [`PreTrainedTokenizer.__call__`] for details.

            If `past_key_values` is used, optionally only the last `input_ids` have to be input (see
            `past_key_values`).

            If you want to change padding behavior, you should read [`modeling_opt._prepare_decoder_attention_mask`]
            and modify to your needs. See diagram 1 in [the paper](https://arxiv.org/abs/1910.13461) for more
            information on the default strategy.

            - 1 indicates the head is **not masked**,
            - 0 indicates the head is **masked**.
        position_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):
            Indices of positions of each input sequence tokens in the position embeddings. Selected in the range `[0,
            config.n_positions - 1]`.

            [What are position IDs?](../glossary#position-ids)
        past_key_values (`Cache` or `tuple(tuple(torch.FloatTensor))`, *optional*):
            Pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
            blocks) that can be used to speed up sequential decoding. This typically consists in the `past_key_values`
            returned by the model at a previous stage of decoding, when `use_cache=True` or `config.use_cache=True`.

            Two formats are allowed:
            - a [`~cache_utils.Cache`] instance;
            - Tuple of `tuple(torch.FloatTensor)` of length `config.n_layers`, with each tuple having 2 tensors of
            shape `(batch_size, num_heads, sequence_length, embed_size_per_head)`). This is also known as the legacy
            cache format.

            The model will output the same cache format that is fed as input. If no `past_key_values` are passed, the
            legacy cache format will be returned.

            If `past_key_values` are used, the user can optionally input only the last `input_ids` (those that don't
            have their past key value states given to this model) of shape `(batch_size, 1)` instead of all `input_ids`
            of shape `(batch_size, sequence_length)`.
        inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):
            Optionally, instead of passing `input_ids` you can choose to directly pass an embedded representation. This
            is useful if you want more control over how to convert `input_ids` indices into associated vectors than the
            model's internal embedding lookup matrix.
        use_cache (`bool`, *optional*):
            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
            `past_key_values`).
        output_attentions (`bool`, *optional*):
            Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
            tensors for more detail.
        output_hidden_states (`bool`, *optional*):
            Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
            more detail.
        return_dict (`bool`, *optional*):
            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
"""


@add_start_docstrings(
    "The bare HunYuan Model outputting raw hidden-states without any specific head on top.",
    HUNYUAN_START_DOCSTRING,
)
class HunYuanModel(HunYuanPreTrainedModel):
    """
    Transformer decoder consisting of *config.num_hidden_layers* layers. Each layer is a [`HunYuanDecoderLayer`]

    Args:
        config: HunYuanConfig
    """

    def __init__(self, config: HunYuanConfig):
        super().__init__(config)
        self.padding_idx = config.pad_token_id
        self.vocab_size = config.vocab_size

        self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.padding_idx)
        self.layers = nn.ModuleList(
            [HunYuanDecoderLayer(config, layer_idx) for layer_idx in range(config.num_hidden_layers)]
        )
        self._use_sdpa = config._attn_implementation == "sdpa"
        self._use_flash_attention_2 = config._attn_implementation == "flash_attention_2"
        self.norm = HunYuanRMSNorm(config.hidden_size, eps=config.rms_norm_eps)

        self.cla = config.use_cla
        self.cla_share_factor = config.cla_share_factor

        self.gradient_checkpointing = False
        # Initialize weights and apply final processing
        self.post_init()

    def get_input_embeddings(self):
        return self.embed_tokens

    def set_input_embeddings(self, value):
        self.embed_tokens = value

    @add_start_docstrings_to_model_forward(HUNYUAN_INPUTS_DOCSTRING)
    def forward(
        self,
        input_ids: torch.LongTensor = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[List[torch.FloatTensor]] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
    ) -> Union[Tuple, BaseModelOutputWithPast]:
        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
        output_hidden_states = (
            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
        )
        use_cache = use_cache if use_cache is not None else self.config.use_cache

        return_dict = return_dict if return_dict is not None else self.config.use_return_dict

        # retrieve input_ids and inputs_embeds
        if input_ids is not None and inputs_embeds is not None:
            raise ValueError("You cannot specify both input_ids and inputs_embeds at the same time")
        elif input_ids is not None:
            batch_size, seq_length = input_ids.shape[:2]
        elif inputs_embeds is not None:
            batch_size, seq_length = inputs_embeds.shape[:2]
        else:
            raise ValueError("You have to specify either input_ids or inputs_embeds")

        if self.gradient_checkpointing and self.training:
            if use_cache:
                logger.warning_once(
                    "`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`..."
                )
                use_cache = False

        past_key_values_length = 0
        if use_cache:
            use_legacy_cache = not isinstance(past_key_values, Cache)
            if use_legacy_cache:
                past_key_values = DynamicCache.from_legacy_cache(past_key_values)
            past_key_values_length = past_key_values.get_usable_length(seq_length)

        if position_ids is None:
            device = input_ids.device if input_ids is not None else inputs_embeds.device
            position_ids = torch.arange(
                past_key_values_length, seq_length + past_key_values_length, dtype=torch.long, device=device
            )
            position_ids = position_ids.unsqueeze(0)

        if inputs_embeds is None:
            inputs_embeds = self.embed_tokens(input_ids)
        
        # Fix lora with gradient checkpointing training
        if self.training and inputs_embeds.is_leaf:
            inputs_embeds.requires_grad = True

        if self._use_flash_attention_2:
            # 2d mask is passed through the layers
            attention_mask = attention_mask if (attention_mask is not None and 0 in attention_mask) else None
        elif self._use_sdpa and not output_attentions:
            # output_attentions=True can not be supported when using SDPA, and we fall back on
            # the manual implementation that requires a 4D causal mask in all cases.
            attention_mask = _prepare_4d_causal_attention_mask_for_sdpa(
                attention_mask,
                (batch_size, seq_length),
                inputs_embeds,
                past_key_values_length,
            )
        else:
            # 4d mask is passed through the layers
            attention_mask = _prepare_4d_causal_attention_mask(
                attention_mask, (batch_size, seq_length), inputs_embeds, past_key_values_length
            )

        # embed positions
        hidden_states = inputs_embeds

        # decoder layers
        all_hidden_states = () if output_hidden_states else None
        all_self_attns = () if output_attentions else None
        next_decoder_cache = None

        prev_kv_states = None
        for layer_idx, decoder_layer in enumerate(self.layers):
            if output_hidden_states:
                all_hidden_states += (hidden_states,)

            if self.gradient_checkpointing and self.training:
                layer_outputs = self._gradient_checkpointing_func(
                    decoder_layer.__call__,
                    hidden_states,
                    attention_mask,
                    position_ids,
                    past_key_values,
                    output_attentions,
                    use_cache,
                    prev_kv_states,
                )
            else:
                layer_outputs = decoder_layer(
                    hidden_states,
                    attention_mask=attention_mask,
                    position_ids=position_ids,
                    past_key_value=past_key_values,
                    output_attentions=output_attentions,
                    use_cache=use_cache,
                    kv_states=prev_kv_states
                )

            hidden_states = layer_outputs[0]

            if use_cache:
                next_decoder_cache = layer_outputs[2 if output_attentions else 1]

            if output_attentions:
                all_self_attns += (layer_outputs[1],)

            kv_states = layer_outputs[-1]

            if self.cla and layer_idx % self.cla_share_factor == 0:
                prev_kv_states = kv_states

        hidden_states = self.norm(hidden_states)

        # add hidden states from the last decoder layer
        if output_hidden_states:
            all_hidden_states += (hidden_states,)

        next_cache = None
        if use_cache:
            next_cache = next_decoder_cache.to_legacy_cache() if use_legacy_cache else next_decoder_cache
        if not return_dict:
            return tuple(v for v in [hidden_states, next_cache, all_hidden_states, all_self_attns] if v is not None)
        return BaseModelOutputWithPast(
            last_hidden_state=hidden_states,
            past_key_values=next_cache,
            hidden_states=all_hidden_states,
            attentions=all_self_attns,
        )


class HunYuanForCausalLM(HunYuanPreTrainedModel):
    _tied_weights_keys = ["lm_head.weight"]

    def __init__(self, config: HunYuanConfig):
        super().__init__(config)
        self.model = HunYuanModel(config)
        self.vocab_size = config.vocab_size
        self.lm_head = nn.Linear(config.hidden_size, config.vocab_size, bias=False)

        # Initialize weights and apply final processing
        self.post_init()

    def get_input_embeddings(self):
        return self.model.embed_tokens

    def set_input_embeddings(self, value):
        self.model.embed_tokens = value

    def get_output_embeddings(self):
        return self.lm_head

    def set_output_embeddings(self, new_embeddings):
        self.lm_head = new_embeddings

    def set_decoder(self, decoder):
        self.model = decoder

    def get_decoder(self):
        return self.model

    @add_start_docstrings_to_model_forward(HUNYUAN_INPUTS_DOCSTRING)
    @replace_return_docstrings(output_type=CausalLMOutputWithPast, config_class=_CONFIG_FOR_DOC)
    def forward(
        self,
        input_ids: torch.LongTensor = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[List[torch.FloatTensor]] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        labels: Optional[torch.LongTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
    ) -> Union[Tuple, CausalLMOutputWithPast]:
        r"""
        Args:
            labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):
                Labels for computing the masked language modeling loss. Indices should either be in `[0, ...,
                config.vocab_size]` or -100 (see `input_ids` docstring). Tokens with indices set to `-100` are ignored
                (masked), the loss is only computed for the tokens with labels in `[0, ..., config.vocab_size]`.

        Returns:

        Example:

        ```python
        >>> from transformers import AutoTokenizer, AutoModelForCausalLM

        >>> model = AutoModelForCausalLM.from_pretrained(PATH_TO_CONVERTED_WEIGHTS)
        >>> tokenizer = AutoTokenizer.from_pretrained(PATH_TO_CONVERTED_TOKENIZER)

        >>> prompt = "Hey, are you conscious? Can you talk to me?"
        >>> inputs = tokenizer(prompt, return_tensors="pt")

        >>> # Generate
        >>> generate_ids = model.generate(inputs.input_ids, max_length=30)
        >>> tokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]
        "Hey, are you conscious? Can you talk to me?\nI'm not conscious, but I can talk to you."
        ```"""
        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
        output_hidden_states = (
            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
        )
        return_dict = return_dict if return_dict is not None else self.config.use_return_dict

        # decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)
        outputs = self.model(
            input_ids=input_ids,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_values=past_key_values,
            inputs_embeds=inputs_embeds,
            use_cache=use_cache,
            output_attentions=output_attentions,
            output_hidden_states=output_hidden_states,
            return_dict=return_dict,
        )

        hidden_states = outputs[0]
        if self.config.pretraining_tp > 1:
            lm_head_slices = self.lm_head.weight.split(self.vocab_size // self.config.pretraining_tp, dim=0)
            logits = [F.linear(hidden_states, lm_head_slices[i]) for i in range(self.config.pretraining_tp)]
            logits = torch.cat(logits, dim=-1)
        else:
            logits = self.lm_head(hidden_states)
        logits = logits.float()

        loss = None
        if labels is not None:
            # Shift so that tokens < n predict n
            shift_logits = logits[..., :-1, :].contiguous()
            shift_labels = labels[..., 1:].contiguous()
            # Flatten the tokens
            loss_fct = CrossEntropyLoss()
            shift_logits = shift_logits.view(-1, self.config.vocab_size)
            shift_labels = shift_labels.view(-1)
            # Enable model parallelism
            shift_labels = shift_labels.to(shift_logits.device)
            loss = loss_fct(shift_logits, shift_labels)

        if not return_dict:
            output = (logits,) + outputs[1:]
            return (loss,) + output if loss is not None else output

        return CausalLMOutputWithPast(
            loss=loss,
            logits=logits,
            past_key_values=outputs.past_key_values,
            hidden_states=outputs.hidden_states,
            attentions=outputs.attentions,
        )

    def prepare_inputs_for_generation(
        self, input_ids, past_key_values=None, attention_mask=None, inputs_embeds=None, **kwargs
    ):
        if past_key_values is not None:
            if isinstance(past_key_values, Cache):
                cache_length = past_key_values.get_seq_length()
                past_length = past_key_values.seen_tokens
                max_cache_length = past_key_values.get_max_length()
            else:
                cache_length = past_length = past_key_values[0][0].shape[2]
                max_cache_length = None

            # Keep only the unprocessed tokens:
            # 1 - If the length of the attention_mask exceeds the length of input_ids, then we are in a setting where
            # some of the inputs are exclusivelly passed as part of the cache (e.g. when passing input_embeds as
            # input)
            if attention_mask is not None and attention_mask.shape[1] > input_ids.shape[1]:
                input_ids = input_ids[:, -(attention_mask.shape[1] - past_length):]
            # 2 - If the past_length is smaller than input_ids', then input_ids holds all input tokens. We can discard
            # input_ids based on the past_length.
            elif past_length < input_ids.shape[1]:
                input_ids = input_ids[:, past_length:]
            # 3 - Otherwise (past_length >= input_ids.shape[1]), let's assume input_ids only has unprocessed tokens.

            # If we are about to go beyond the maximum cache length, we need to crop the input attention mask.
            if (
                max_cache_length is not None
                and attention_mask is not None
                and cache_length + input_ids.shape[1] > max_cache_length
            ):
                attention_mask = attention_mask[:, -max_cache_length:]

        position_ids = kwargs.get("position_ids", None)
        if attention_mask is not None and position_ids is None:
            # create position_ids on the fly for batch generation
            position_ids = attention_mask.long().cumsum(-1) - 1
            position_ids.masked_fill_(attention_mask == 0, 1)
            if past_key_values:
                position_ids = position_ids[:, -input_ids.shape[1]:]

        # if `inputs_embeds` are passed, we only want to use them in the 1st generation step
        if inputs_embeds is not None and past_key_values is None:
            model_inputs = {"inputs_embeds": inputs_embeds}
        else:
            model_inputs = {"input_ids": input_ids}

        model_inputs.update(
            {
                "position_ids": position_ids,
                "past_key_values": past_key_values,
                "use_cache": kwargs.get("use_cache"),
                "attention_mask": attention_mask,
            }
        )
        return model_inputs

    @staticmethod
    def _reorder_cache(past_key_values, beam_idx):
        reordered_past = ()
        for layer_past in past_key_values:
            reordered_past += (
                tuple(past_state.index_select(0, beam_idx.to(past_state.device)) for past_state in layer_past),
            )
        return reordered_past


@add_start_docstrings(
    """
    The HunYuan Model transformer with a sequence classification head on top (linear layer).

    [`HunYuanForSequenceClassification`] uses the last token in order to do the classification, as other causal models
    (e.g. GPT-2) do.

    Since it does classification on the last token, it requires to know the position of the last token. If a
    `pad_token_id` is defined in the configuration, it finds the last token that is not a padding token in each row. If
    no `pad_token_id` is defined, it simply takes the last value in each row of the batch. Since it cannot guess the
    padding tokens when `inputs_embeds` are passed instead of `input_ids`, it does the same (take the last value in
    each row of the batch).
    """,
    HUNYUAN_START_DOCSTRING,
)
class HunYuanForSequenceClassification(HunYuanPreTrainedModel):
    def __init__(self, config):
        super().__init__(config)
        self.num_labels = config.num_labels
        self.model = HunYuanModel(config)
        self.score = nn.Linear(config.hidden_size, self.num_labels, bias=False)

        # Initialize weights and apply final processing
        self.post_init()

    def get_input_embeddings(self):
        return self.model.embed_tokens

    def set_input_embeddings(self, value):
        self.model.embed_tokens = value

    @add_start_docstrings_to_model_forward(HUNYUAN_INPUTS_DOCSTRING)
    def forward(
        self,
        input_ids: torch.LongTensor = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[List[torch.FloatTensor]] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        labels: Optional[torch.LongTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
    ) -> Union[Tuple, SequenceClassifierOutputWithPast]:
        r"""
        labels (`torch.LongTensor` of shape `(batch_size,)`, *optional*):
            Labels for computing the sequence classification/regression loss. Indices should be in `[0, ...,
            config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is computed (Mean-Square loss), If
            `config.num_labels > 1` a classification loss is computed (Cross-Entropy).
        """
        return_dict = return_dict if return_dict is not None else self.config.use_return_dict

        transformer_outputs = self.model(
            input_ids,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_values=past_key_values,
            inputs_embeds=inputs_embeds,
            use_cache=use_cache,
            output_attentions=output_attentions,
            output_hidden_states=output_hidden_states,
            return_dict=return_dict,
        )
        hidden_states = transformer_outputs[0]
        logits = self.score(hidden_states)

        if input_ids is not None:
            batch_size = input_ids.shape[0]
        else:
            batch_size = inputs_embeds.shape[0]

        if self.config.pad_token_id is None and batch_size != 1:
            raise ValueError("Cannot handle batch sizes > 1 if no padding token is defined.")
        if self.config.pad_token_id is None:
            sequence_lengths = -1
        else:
            if input_ids is not None:
                sequence_lengths = (torch.eq(input_ids, self.config.pad_token_id).int().argmax(-1) - 1).to(
                    logits.device
                )
            else:
                sequence_lengths = -1

        pooled_logits = logits[torch.arange(batch_size, device=logits.device), sequence_lengths]

        loss = None
        if labels is not None:
            labels = labels.to(logits.device)
            if self.config.problem_type is None:
                if self.num_labels == 1:
                    self.config.problem_type = "regression"
                elif self.num_labels > 1 and (labels.dtype == torch.long or labels.dtype == torch.int):
                    self.config.problem_type = "single_label_classification"
                else:
                    self.config.problem_type = "multi_label_classification"

            if self.config.problem_type == "regression":
                loss_fct = MSELoss()
                if self.num_labels == 1:
                    loss = loss_fct(pooled_logits.squeeze(), labels.squeeze())
                else:
                    loss = loss_fct(pooled_logits, labels)
            elif self.config.problem_type == "single_label_classification":
                loss_fct = CrossEntropyLoss()
                loss = loss_fct(pooled_logits.view(-1, self.num_labels), labels.view(-1))
            elif self.config.problem_type == "multi_label_classification":
                loss_fct = BCEWithLogitsLoss()
                loss = loss_fct(pooled_logits, labels)
        if not return_dict:
            output = (pooled_logits,) + transformer_outputs[1:]
            return ((loss,) + output) if loss is not None else output

        return SequenceClassifierOutputWithPast(
            loss=loss,
            logits=pooled_logits,
            past_key_values=transformer_outputs.past_key_values,
            hidden_states=transformer_outputs.hidden_states,
            attentions=transformer_outputs.attentions,
        )

</document_content>
</document>
<document index="9">
<source>./models/test.py</source>
<document_content>
from tokenizers import ByteLevelBPETokenizer
from transformers import AutoTokenizer

# Step 1: Initialize ByteLevelBPETokenizer
#tokenizer = ByteLevelBPETokenizer(
#    "vocab.json",
#    "merges.txt"
#)

# Step 2: Save the tokenizer configuration
#tokenizer.save_model("auto_model")

# Step 3: Load the tokenizer using AutoTokenizer
auto_tokenizer = AutoTokenizer.from_pretrained("./", use_fast=False, trust_remote_code=True)

# Test the tokenizer
text = "Hello, world!"
encoded = auto_tokenizer.encode(text)
decoded = auto_tokenizer.decode(encoded)

print("Encoded:", encoded)
print("Decoded:", decoded)

messages = [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Hello, how are you?"},
    {"role": "assistant", "content": "I'm good, thank you! How can I help you today?"},
    {"role": "user", "content": "Nothing"},
]

print('messages:', messages)
ids = auto_tokenizer.apply_chat_template(messages)
print(f"input_ids:\t{ids}")
text = auto_tokenizer.decode(ids)
print(f"input_text:\t[{text}]")

</document_content>
</document>
<document index="10">
<source>./models/tokenization_hy.py</source>
<document_content>
# coding=utf-8
# Copyright (C) 2024 THL A29 Limited, a Tencent company.  All rights reserved.

import os
import base64
import logging
import tiktoken
import unicodedata
from transformers import PreTrainedTokenizer, AddedToken
from typing import Collection, Dict, List, Set, Tuple, Union


logger = logging.getLogger(__name__)


VOCAB_FILES_NAMES = {"vocab_file": "hy.tiktoken"}
PAT_STR = r"""(?i:'s|'t|'re|'ve|'m|'ll|'d)|""" \
          r"""[^\r\n\p{L}\p{N}]?\p{L}+|""" \
          r"""\p{N}|""" \
          r""" ?[^\s\p{L}\p{N}]+[\r\n]*|""" \
          r"""\s*[\r\n]+|""" \
          r"""\s+(?!\S)|""" \
          r"""\s+"""
# default eod_token and bod_token of our base model
ENDOFTEXT = "<|endoftext|>"
STARTOFTEXT = "<|startoftext|>"

# extra flag token for other training
BOSTOKEN = "<|bos|>"
EOSTOKEN = "<|eos|>"

PADTOKEN = "<|pad|>"

# extra special tokens for the tokenizer
# as the default behavior is changed to allow special tokens in
# regular texts, the surface forms of special tokens need to be
# as different as possible to minimize the impact
EXTRAS = tuple((f"<|extra_{i}|>" for i in range(204)))

SPECIAL_START_ID = 127957


def _load_tiktoken_bpe(tiktoken_bpe_file: str) -> Dict[bytes, int]:
    dic = {}
    rank = 0
    for i, line in enumerate(open(tiktoken_bpe_file, "rb")):
        if line:
            token, _ = line.split()
            # skip duplicated tokens, this should not happen
            if base64.b64decode(token) in dic:
                raise ValueError(f"!ERROR: duplicated token {token} in your vocab file")
            dic[base64.b64decode(token)] = int(rank)
            rank += 1
    return dic


# special tokens for pretrain and finetune models
SPECIAL_TOKENS = tuple(
    enumerate(
        (
            (
                ENDOFTEXT,
                STARTOFTEXT,
                BOSTOKEN,
                EOSTOKEN,
                PADTOKEN,
            )
            + EXTRAS
        ),
        start=SPECIAL_START_ID,
    )
)

SPECIAL_TOKENS_SET = set(t for i, t in SPECIAL_TOKENS)


class HYTokenizer(PreTrainedTokenizer):
    """
    HunYuan Tokenizer Initialization. We extend `tiktoken` vocab and
        the default EOD & BOD special tokens are used for base model.

    Args:
        vocab_file (`str`):
            Path to the vocabulary file.

        errors (`str`):
            How to handle errors in decoding UTF-8 byte sequences.
            use ignore if you are in streaming inference

        bod_token (`str` or `tokenizers.AddedToken`, *optional*, defaults to `""<|startoftext|>""`):
            The beginning of document token that was used for training. can be modified by your task.
            default to be `<|startoftext|>` for released base model.

        eod_token (`str` or `tokenizers.AddedToken`, *optional*, defaults to `""<|endoftext|>""`):
            The end of document token that was used for training. can be modified by your task.
            default to be `<|endoftext|>` for released base model.

        bos_token (`str` or `tokenizers.AddedToken`, *optional*, defaults to `None`):
            The start or sep special token that was used for some training tasks.
            default to be `<|startoftext|>` for released base model.
            It can be set to `<|bos|>` when you training for some other task

        eos_token (`str` or `tokenizers.AddedToken`, *optional*, defaults to `None`):
            The end or sep special token that was used for some training tasks.
            default to be `<|endoftext|>` for released base model.
            It can be set to `<|eos|>` when you training for some other task

        pad_token (`str` or `tokenizers.AddedToken`, *optional*):
            A special token used to make arrays of tokens the same size for batching purpose. Will then be ignored by
            attention mechanisms or loss computation.

        special_vocab_file (str, *optional*):
            Customed special extra vocab file, same format with hy.tiktoken.
            **Be careful** to use the extra special vocab, it will may cause the model loading collapse.
            The data line be like:
                `PHxhYmN8Pg== 0`
            the id followed `base64.encode(str)` is unused, we will reset them in case of collision

        add_bod_token (`bool`, *optional*, defaults to `True`):
            Whether or not to add an `bos_token` at the start of documents.
            This will effect `build_inputs_with_special_tokens` method

        add_eod_token (`bool`, *optional*, defaults to `False`):
            Whether or not to add an `eos_token` at the end of documents.
            This will effect `build_inputs_with_special_tokens` method

    """
    vocab_files_names = VOCAB_FILES_NAMES

    def __init__(
        self,
        vocab_file,
        errors="replace",
        bod_token="<|startoftext|>",
        eod_token="<|endoftext|>",
        bos_token="<|startoftext|>",
        eos_token="<|endoftext|>",
        pad_token="<|pad|>",
        add_bod_token=True,
        add_eod_token=True,
        **kwargs,
    ):
        super().__init__(**kwargs)

        self.errors = errors
        self.mergeable_ranks = _load_tiktoken_bpe(vocab_file)  # type: Dict[bytes, int]
        self.special_tokens = {
            token: index
            for index, token in SPECIAL_TOKENS
        }

        enc = tiktoken.Encoding(
            "HunYuan",
            pat_str=PAT_STR,
            mergeable_ranks=self.mergeable_ranks,
            special_tokens=self.special_tokens,
        )
        assert (
            len(self.mergeable_ranks) + len(self.special_tokens) == enc.n_vocab
        ), f"{len(self.mergeable_ranks)} + {len(self.special_tokens)} != {enc.n_vocab} in encoding"

        self.decoder = {
            v: k for k, v in self.mergeable_ranks.items()
        }  # type: dict[int, bytes|str]
        self.decoder.update({v: k for k, v in self.special_tokens.items()})

        self.tokenizer = enc

        self.bod_token, self.bod_id = bod_token, self.special_tokens[bod_token]
        self.eod_token, self.eod_id = eod_token, self.special_tokens[eod_token]
        self.bos_token, self.bos_id = bos_token, self.special_tokens[bos_token]
        self.eos_token, self.eos_id = eos_token, self.special_tokens[eos_token]
        self.pad_token, self.pad_id = pad_token, self.special_tokens[pad_token]

        self._num_special_token = len(self.special_tokens)

        self.add_bod_token = add_bod_token
        self.add_eod_token = add_eod_token

    def __getstate__(self):
        state = self.__dict__.copy()
        del state["tokenizer"]
        return state

    def __setstate__(self, state):
        self.__dict__.update(state)
        enc = tiktoken.Encoding(
            "HunYuan",
            pat_str=PAT_STR,
            mergeable_ranks=self.mergeable_ranks,
            special_tokens=self.special_tokens,
        )
        self.tokenizer = enc

    def __len__(self) -> int:
        return self.tokenizer.n_vocab

    def get_vocab(self) -> Dict[bytes, int]:
        """Return the vocabulary as a dictionary, without special tokens."""
        return self.mergeable_ranks

    def convert_tokens_to_ids(
        self, tokens: Union[bytes, str, List[Union[bytes, str]]]
    ) -> List[int]:
        ids = []
        if isinstance(tokens, (str, bytes)):
            if tokens in self.special_tokens:
                return self.special_tokens[tokens]
            else:
                return self.mergeable_ranks.get(tokens)
        for token in tokens:
            if token in self.special_tokens:
                ids.append(self.special_tokens[token])
            else:
                ids.append(self.mergeable_ranks.get(token))
        return ids

    def build_inputs_with_special_tokens(self, token_ids_0, token_ids_1=None):
        bod_token_id = [self.bod_id] if self.add_bod_token else []
        eod_token_id = [self.eod_id] if self.add_eod_token else []
        output = bod_token_id + token_ids_0 + eod_token_id
        if token_ids_1 is not None:
            output = output + bod_token_id + token_ids_1 + eod_token_id
        return output

    def _add_tokens(
        self,
        new_tokens: Union[List[str], List[AddedToken]],
        special_tokens: bool = False,
    ) -> List[Tuple[int, str]]:
        """do not support adding tokens"""
        if not special_tokens and new_tokens:
            raise ValueError("Adding regular tokens is not supported")
        for token in new_tokens:
            surface_form = token.content if isinstance(token, AddedToken) else token
            if surface_form not in SPECIAL_TOKENS_SET:
                raise ValueError("Adding unknown special tokens is not supported")
        return 0

    def save_vocabulary(self, save_directory: str, **kwargs) -> Tuple[str]:
        """
        Save only the vocabulary of the tokenizer (vocabulary).
        Returns:
            `Tuple(str)`: Paths to the files saved.
        """
        file_path = os.path.join(save_directory, "hy.tiktoken")
        with open(file_path, "w", encoding="utf8") as w:
            for k, v in self.mergeable_ranks.items():
                line = base64.b64encode(k).decode("utf8") + " " + str(v) + "\n"
                w.write(line)
        return (file_path,)

    def tokenize(
        self,
        text: str,
        allowed_special: Union[Set, str] = "all",
        disallowed_special: Union[Collection, str] = (),
        **kwargs,
    ) -> List[Union[bytes, str]]:
        """
        Converts a string in a sequence of tokens.
        Args:
            text (`str`):
                The sequence to be encoded.
            allowed_special (`Literal["all"]` or `set`):
                The surface forms of the tokens to be encoded as special tokens in regular texts.
                Default to "all".
            disallowed_special (`Literal["all"]` or `Collection`):
                The surface forms of the tokens that should not be in regular texts and trigger errors.
                Default to an empty tuple.
            kwargs (additional keyword arguments, *optional*):
                Will be passed to the underlying model specific encode method.
        Returns:
            `List[bytes|str]`: The list of tokens.
        """
        tokens = []
        text = unicodedata.normalize("NFC", text)

        # this implementation takes a detour: text -> token id -> token surface forms
        for t in self.tokenizer.encode(
            text, allowed_special=allowed_special, disallowed_special=disallowed_special
        ):
            tokens.append(self.decoder[t])
        return tokens

    def convert_tokens_to_string(self, tokens: List[Union[bytes, str]]) -> str:
        """
        Converts a sequence of tokens in a single string.
        """
        text = ""
        temp = b""
        for t in tokens:
            if isinstance(t, str):
                if temp:
                    text += temp.decode("utf-8", errors=self.errors)
                    temp = b""
                text += t
            elif isinstance(t, bytes):
                temp += t
            else:
                raise TypeError("token should only be of type types or str")
        if temp:
            text += temp.decode("utf-8", errors=self.errors)
        return text

    @property
    def vocab_size(self):
        return self.tokenizer.n_vocab

    def _convert_id_to_token(self, index: int) -> Union[bytes, str]:
        """Converts an id to a token, special tokens included"""
        if index in self.decoder:
            return self.decoder[index]
        raise ValueError("unknown ids")

    def _convert_token_to_id(self, token: Union[bytes, str]) -> int:
        """Converts a token to an id using the vocab, special tokens included"""
        if token in self.special_tokens:
            return self.special_tokens[token]
        if token in self.mergeable_ranks:
            return self.mergeable_ranks[token]
        raise ValueError("unknown token")

    def _tokenize(self, text: str, **kwargs):
        """
        Converts a string in a sequence of tokens (string), using the tokenizer. Split in words for word-based
        vocabulary or sub-words for sub-word-based vocabularies (BPE/SentencePieces/WordPieces).
        Do NOT take care of added tokens.
        """
        raise NotImplementedError

    def _decode(
        self,
        token_ids: Union[int, List[int]],
        skip_special_tokens: bool = False,
        errors: str = None,
        **kwargs,
    ) -> str:
        if isinstance(token_ids, int):
            token_ids = [token_ids]
        if skip_special_tokens:
            token_ids = [i for i in token_ids if i < self.eod_id]
        return self.tokenizer.decode(token_ids, errors=errors or self.errors)

</document_content>
</document>
<document index="11">
<source>./models/tokenizer_config.json</source>
<document_content>
{
  "model_max_length": 1048576,
  "tokenizer_class": "HYTokenizer",
  "auto_map": {
    "AutoTokenizer": [
      "tokenization_hy.HYTokenizer",
      null
      ]
  },
  "additional_special_tokens": ["<|startoftext|>", "<|extra_0|>", "<|extra_4|>", "<|extra_5|>", "<|eos|>"],
  "chat_template": "{% set context = {'has_head': true} %}{% set loop_messages = messages %}{% for message in loop_messages %}{% set content = message['content'] %}{% if loop.index0 == 0 %}{% if content == '' %}{% set _ = context.update({'has_head': false}) %}{% elif message['role'] == 'system' %}{% set content = '<|startoftext|>' + content + '<|extra_4|>' %}{% endif %}{% endif %}{% if message['role'] == 'user' %}{% if loop.index0 == 1 and not context.has_head %}{% set content = '<|startoftext|>' + content %}{% endif %}{% if loop.index0 == 1 and context.has_head %}{% set content = content + '<|extra_0|>' %}{% else %}{% set content = '<|startoftext|>' + content + '<|extra_0|>' %}{% endif %}{% elif message['role'] == 'assistant' %}{% set content = content + '<|eos|>' %}{% endif %}{{ content }}{% endfor %}"
}
  

</document_content>
</document>
<document index="12">
<source>./examples/README.md</source>
<document_content>
# ÂÆû‰ΩìÊäΩÂèñ‰ªªÂä°Ê°à‰æã
‰∏∫Êñπ‰æøÁî®Êà∑Âø´ÈÄü‰∏äÊâãÔºå‰∏ãÈù¢Êàë‰ª¨ÂáÜÂ§á‰∫Ü‰∏Ä‰∏™ÁúüÂÆûÊ°à‰æãÊù•ÊºîÁ§∫Â¶Ç‰Ωï‰ΩøÁî®`Hunyuan-Large`ËøõË°åÁ≤æË∞É„ÄÇ
- Âü∫Â∫ßÊ®°ÂûãÔºö`Hunyuan-Large-Instruct`
- ËÆ≠ÁªÉÊï∞ÊçÆÔºöÁ∫¶5kÊù°Ê±ΩËΩ¶È¢ÜÂüüÁöÑ[ÂÆû‰ΩìÊäΩÂèñÊï∞ÊçÆ](data)
- ËÆ≠ÁªÉÊï∞ÊçÆÁ§∫‰æãÂ¶Ç‰∏ã
```
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÊÅíÂçáÊñ∞Ëø™ÊØî‰∫öËø™Á≤æËØöÊúçÂä°„ÄëÁß¶ÂÆãÊñ∞ËÉΩÊ∫êËΩ¶‰∏ªÁà±ËΩ¶ËÆ≤Â†Ç‚Äî‚ÄîÊò•Â≠£ÂÖ¨ÂºÄËØæÂúÜÊª°ÁªìÊùü\n"}, {"role": "assistant", "content": "Áß¶ÔºõÂÆãÊñ∞ËÉΩÊ∫ê"}]}
```

## ËÆ≠ÁªÉÈÉ®ÂàÜ
- ËÆ≠ÁªÉÁéØÂ¢ÉÈÖçÁΩÆÂèØÂèÇËÄÉ [train/README.md](../train/README.md)
- ËÆ≠ÁªÉËÑöÊú¨ÂèØÂèÇËÄÉ [train_demo.sh](train_demo.sh)ÔºåÈúÄË¶Å‰øÆÊîπÂÖ∂‰∏≠ÁöÑ`model_path`„ÄÅ`train_data_file`Âíå`output_path`
- È¶ñÊ¨°Âä†ËΩΩÊ®°ÂûãËÄóÊó∂‰ºöËæÉÈïøÔºåÊàêÂäüËøêË°åÂêé‰ºöÊâìÂç∞ÊØè‰∏™stepÁöÑloss
```
 {'loss': 7.4291, 'grad_norm': 144.42880249023438, 'learning_rate': 5e-06, 'epoch': 0.03}
 {'loss': 7.4601, 'grad_norm': 141.73260498046875, 'learning_rate': 4.998892393243008e-06, 'epoch': 0.06}
 {'loss': 3.2492, 'grad_norm': 32.29960250854492, 'learning_rate': 4.995570688238146e-06, 'epoch': 0.08}
 {'loss': 2.984, 'grad_norm': 39.98820495605469, 'learning_rate': 4.990038229660787e-06, 'epoch': 0.11}
 {'loss': 1.8134, 'grad_norm': 23.492595672607422, 'learning_rate': 4.98230058822775e-06, 'epoch': 0.14}
 {'loss': 1.5473, 'grad_norm': 23.56238555908203, 'learning_rate': 4.972365555088068e-06, 'epoch': 0.17}
 {'loss': 0.7976, 'grad_norm': 21.16975212097168, 'learning_rate': 4.960243133977955e-06, 'epoch': 0.19}
 {'loss': 0.3414, 'grad_norm': 11.497740745544434, 'learning_rate': 4.945945531147896e-06, 'epoch': 0.22}
 {'loss': 0.2019, 'grad_norm': 3.659959077835083, 'learning_rate': 4.929487143071984e-06, 'epoch': 0.25}
 {'loss': 0.1355, 'grad_norm': 2.6742758750915527, 'learning_rate': 4.910884541951894e-06, 'epoch': 0.28}
 {'loss': 0.1406, 'grad_norm': 1.70888352394104, 'learning_rate': 4.89015645903008e-06, 'epoch': 0.31}
 {'loss': 0.1394, 'grad_norm': 1.9664640426635742, 'learning_rate': 4.8673237657289994e-06, 'epoch': 0.33}
 {'loss': 0.0962, 'grad_norm': 1.2338069677352905, 'learning_rate': 4.84240945263536e-06, 'epoch': 0.36}
 {'loss': 0.0899, 'grad_norm': 1.3094085454940796, 'learning_rate': 4.815438606350553e-06, 'epoch': 0.39}
 {'loss': 0.1535, 'grad_norm': 1.4803948402404785, 'learning_rate': 4.786438384230567e-06, 'epoch': 0.42}
 {'loss': 0.1159, 'grad_norm': 2.006241798400879, 'learning_rate': 4.755437987040832e-06, 'epoch': 0.44}
 {'loss': 0.1434, 'grad_norm': 1.614030122756958, 'learning_rate': 4.722468629553528e-06, 'epoch': 0.47}
 {'loss': 0.1048, 'grad_norm': 1.1502505540847778, 'learning_rate': 4.687563509116949e-06, 'epoch': 0.5}
 {'loss': 0.0783, 'grad_norm': 1.1970840692520142, 'learning_rate': 4.650757772228599e-06, 'epoch': 0.53}
 {'loss': 0.1731, 'grad_norm': 1.5403984785079956, 'learning_rate': 4.612088479145633e-06, 'epoch': 0.56}
 {'loss': 0.1045, 'grad_norm': 0.8574311137199402, 'learning_rate': 4.571594566568329e-06, 'epoch': 0.58}
 {'loss': 0.1122, 'grad_norm': 1.275988221168518, 'learning_rate': 4.529316808434132e-06, 'epoch': 0.61}
 {'loss': 0.0909, 'grad_norm': 0.9738625288009644, 'learning_rate': 4.485297774861752e-06, 'epoch': 0.64}
 {'loss': 0.118, 'grad_norm': 1.3492830991744995, 'learning_rate': 4.439581789286661e-06, 'epoch': 0.67}
 {'loss': 0.1547, 'grad_norm': 1.4021662473678589, 'learning_rate': 4.392214883831154e-06, 'epoch': 0.69}
 {'loss': 0.0944, 'grad_norm': 1.2680057287216187, 'learning_rate': 4.343244752953907e-06, 'epoch': 0.72}
 {'loss': 0.118, 'grad_norm': 1.0716216564178467, 'learning_rate': 4.292720705425691e-06, 'epoch': 0.75}
 {'loss': 0.124, 'grad_norm': 1.1935311555862427, 'learning_rate': 4.240693614679628e-06, 'epoch': 0.78}
 {'loss': 0.1164, 'grad_norm': 1.0407761335372925, 'learning_rate': 4.18721586758595e-06, 'epoch': 0.81}
 {'loss': 0.09, 'grad_norm': 0.8492897748947144, 'learning_rate': 4.132341311702867e-06, 'epoch': 0.83}
 {'loss': 0.0959, 'grad_norm': 0.8767865300178528, 'learning_rate': 4.076125201056637e-06, 'epoch': 0.86}
 {'loss': 0.1053, 'grad_norm': 0.9856031537055969, 'learning_rate': 4.018624140505443e-06, 'epoch': 0.89}
 {'loss': 0.1514, 'grad_norm': 1.407051920890808, 'learning_rate': 3.959896028743106e-06, 'epoch': 0.92}
 {'loss': 0.1083, 'grad_norm': 0.9481344223022461, 'learning_rate': 3.900000000000001e-06, 'epoch': 0.94}
 {'loss': 0.0963, 'grad_norm': 4.065955638885498, 'learning_rate': 3.838996364499903e-06, 'epoch': 0.97}
 {'loss': 0.1385, 'grad_norm': 1.0660120248794556, 'learning_rate': 3.776946547732703e-06, 'epoch': 1.0}
 {'loss': 0.0418, 'grad_norm': 0.46154797077178955, 'learning_rate': 3.713913028604151e-06, 'epoch': 1.03}
 {'loss': 0.0737, 'grad_norm': 0.9685096144676208, 'learning_rate': 3.6499592765248833e-06, 'epoch': 1.06}
 {'loss': 0.0302, 'grad_norm': 0.9554418325424194, 'learning_rate': 3.585149687502118e-06, 'epoch': 1.08}
 {'loss': 0.052, 'grad_norm': 0.605120837688446, 'learning_rate': 3.519549519298328e-06, 'epoch': 1.11}
 {'loss': 0.0331, 'grad_norm': 0.5751758813858032, 'learning_rate': 3.4532248257222053e-06, 'epoch': 1.14}
 {'loss': 0.0473, 'grad_norm': 0.5900629758834839, 'learning_rate': 3.386242390118077e-06, 'epoch': 1.17}
 {'loss': 0.0449, 'grad_norm': 0.6361717581748962, 'learning_rate': 3.3186696581207407e-06, 'epoch': 1.19}
 {'loss': 0.0818, 'grad_norm': 1.0822972059249878, 'learning_rate': 3.25057466974342e-06, 'epoch': 1.22}
 {'loss': 0.0418, 'grad_norm': 0.6318709850311279, 'learning_rate': 3.182025990867247e-06, 'epoch': 1.25}
 {'loss': 0.0417, 'grad_norm': 0.60468590259552, 'learning_rate': 3.113092644201228e-06, 'epoch': 1.28}
 {'loss': 0.0633, 'grad_norm': 0.5810320973396301, 'learning_rate': 3.0438440397822245e-06, 'epoch': 1.31}
 {'loss': 0.026, 'grad_norm': 0.4366144835948944, 'learning_rate': 2.9743499050849347e-06, 'epoch': 1.33}
 {'loss': 0.043, 'grad_norm': 0.8081514239311218, 'learning_rate': 2.9046802148122338e-06, 'epoch': 1.36}
 {'loss': 0.046, 'grad_norm': 0.46932360529899597, 'learning_rate': 2.8349051204365774e-06, 'epoch': 1.39}
 {'loss': 0.067, 'grad_norm': 1.0018138885498047, 'learning_rate': 2.7650948795634223e-06, 'epoch': 1.42}
 {'loss': 0.055, 'grad_norm': 0.8858521580696106, 'learning_rate': 2.6953197851877672e-06, 'epoch': 1.44}
 {'loss': 0.0256, 'grad_norm': 0.5397916436195374, 'learning_rate': 2.6256500949150655e-06, 'epoch': 1.47}
 {'loss': 0.0414, 'grad_norm': 0.5249439477920532, 'learning_rate': 2.556155960217776e-06, 'epoch': 1.5}
 {'loss': 0.0623, 'grad_norm': 1.9616726636886597, 'learning_rate': 2.486907355798773e-06, 'epoch': 1.53}
 {'loss': 0.0529, 'grad_norm': 0.49948468804359436, 'learning_rate': 2.4179740091327534e-06, 'epoch': 1.56}
 {'loss': 0.0395, 'grad_norm': 0.658088207244873, 'learning_rate': 2.3494253302565808e-06, 'epoch': 1.58}
 {'loss': 0.0418, 'grad_norm': 0.5808509588241577, 'learning_rate': 2.28133034187926e-06, 'epoch': 1.61}
 {'loss': 0.0484, 'grad_norm': 0.6675217151641846, 'learning_rate': 2.2137576098819237e-06, 'epoch': 1.64}
 {'loss': 0.0789, 'grad_norm': 1.1550902128219604, 'learning_rate': 2.146775174277796e-06, 'epoch': 1.67}
 {'loss': 0.0246, 'grad_norm': 0.8917452096939087, 'learning_rate': 2.0804504807016725e-06, 'epoch': 1.69}
 {'loss': 0.0351, 'grad_norm': 0.8304968476295471, 'learning_rate': 2.0148503124978823e-06, 'epoch': 1.72}
 {'loss': 0.029, 'grad_norm': 0.6137705445289612, 'learning_rate': 1.950040723475117e-06, 'epoch': 1.75}
 {'loss': 0.0397, 'grad_norm': 0.6633376479148865, 'learning_rate': 1.8860869713958501e-06, 'epoch': 1.78}
 {'loss': 0.0212, 'grad_norm': 0.5623720288276672, 'learning_rate': 1.8230534522672968e-06, 'epoch': 1.81}
 {'loss': 0.0404, 'grad_norm': 0.4446176290512085, 'learning_rate': 1.7610036355000983e-06, 'epoch': 1.83}
 {'loss': 0.0425, 'grad_norm': 0.42774003744125366, 'learning_rate': 1.7000000000000005e-06, 'epoch': 1.86}
 {'loss': 0.0513, 'grad_norm': 1.426970362663269, 'learning_rate': 1.6401039712568944e-06, 'epoch': 1.89}
 {'loss': 0.0376, 'grad_norm': 0.4887981712818146, 'learning_rate': 1.5813758594945576e-06, 'epoch': 1.92}
 {'loss': 0.0312, 'grad_norm': 0.5390689969062805, 'learning_rate': 1.5238747989433645e-06, 'epoch': 1.94}
 {'loss': 0.0421, 'grad_norm': 0.6012405157089233, 'learning_rate': 1.4676586882971339e-06, 'epoch': 1.97}
 {'loss': 0.1072, 'grad_norm': 1.1696946620941162, 'learning_rate': 1.4127841324140512e-06, 'epoch': 2.0}
 {'loss': 0.0352, 'grad_norm': 0.5454437136650085, 'learning_rate': 1.359306385320373e-06, 'epoch': 2.03}
 {'loss': 0.0178, 'grad_norm': 0.3860515356063843, 'learning_rate': 1.3072792945743095e-06, 'epoch': 2.06}
 {'loss': 0.0051, 'grad_norm': 0.133415088057518, 'learning_rate': 1.2567552470460932e-06, 'epoch': 2.08}
 {'loss': 0.0077, 'grad_norm': 0.22402632236480713, 'learning_rate': 1.2077851161688455e-06, 'epoch': 2.11}
 {'loss': 0.0167, 'grad_norm': 0.24073262512683868, 'learning_rate': 1.1604182107133397e-06, 'epoch': 2.14}
 {'loss': 0.0133, 'grad_norm': 0.3704022169113159, 'learning_rate': 1.1147022251382485e-06, 'epoch': 2.17}
 {'loss': 0.0149, 'grad_norm': 0.3235306739807129, 'learning_rate': 1.070683191565868e-06, 'epoch': 2.19}
 {'loss': 0.0202, 'grad_norm': 0.47053492069244385, 'learning_rate': 1.028405433431671e-06, 'epoch': 2.22}
 {'loss': 0.007, 'grad_norm': 0.14351408183574677, 'learning_rate': 9.87911520854368e-07, 'epoch': 2.25}
 {'loss': 0.0171, 'grad_norm': 0.3089752197265625, 'learning_rate': 9.492422277714011e-07, 'epoch': 2.28}
 {'loss': 0.0154, 'grad_norm': 0.2722967565059662, 'learning_rate': 9.124364908830504e-07, 'epoch': 2.31}
 {'loss': 0.0138, 'grad_norm': 0.4130292236804962, 'learning_rate': 8.775313704464731e-07, 'epoch': 2.33}
 {'loss': 0.0065, 'grad_norm': 0.1657753437757492, 'learning_rate': 8.445620129591687e-07, 'epoch': 2.36}
 {'loss': 0.0086, 'grad_norm': 0.1517183482646942, 'learning_rate': 8.135616157694337e-07, 'epoch': 2.39}
 {'loss': 0.0159, 'grad_norm': 0.29184406995773315, 'learning_rate': 7.845613936494468e-07, 'epoch': 2.42}
 {'loss': 0.0034, 'grad_norm': 0.09557823091745377, 'learning_rate': 7.575905473646402e-07, 'epoch': 2.44}
 {'loss': 0.0077, 'grad_norm': 0.2557217478752136, 'learning_rate': 7.326762342710017e-07, 'epoch': 2.47}
 {'loss': 0.0142, 'grad_norm': 0.547609806060791, 'learning_rate': 7.098435409699203e-07, 'epoch': 2.5}
 {'loss': 0.0126, 'grad_norm': 0.3501236140727997, 'learning_rate': 6.89115458048106e-07, 'epoch': 2.53}
 {'loss': 0.0192, 'grad_norm': 0.3290202021598816, 'learning_rate': 6.705128569280162e-07, 'epoch': 2.56}
 {'loss': 0.0184, 'grad_norm': 0.5247418880462646, 'learning_rate': 6.540544688521045e-07, 'epoch': 2.58}
 {'loss': 0.0053, 'grad_norm': 0.14795489609241486, 'learning_rate': 6.397568660220452e-07, 'epoch': 2.61}
 {'loss': 0.0041, 'grad_norm': 0.09380070865154266, 'learning_rate': 6.276344449119325e-07, 'epoch': 2.64}
 {'loss': 0.0343, 'grad_norm': 0.4588293135166168, 'learning_rate': 6.176994117722502e-07, 'epoch': 2.67}
 {'loss': 0.0062, 'grad_norm': 0.1302798092365265, 'learning_rate': 6.099617703392138e-07, 'epoch': 2.69}
 {'loss': 0.0192, 'grad_norm': 0.26435697078704834, 'learning_rate': 6.044293117618545e-07, 'epoch': 2.72}
 {'loss': 0.0105, 'grad_norm': 0.23238405585289001, 'learning_rate': 6.011076067569928e-07, 'epoch': 2.75}
 {'loss': 0.0071, 'grad_norm': 0.1882176399230957, 'learning_rate': 6e-07, 'epoch': 2.78}
 {'train_runtime': 20515.9091, 'train_samples_per_second': 0.624, 'train_steps_per_second': 0.005, 'train_loss': 0.31072488425299527, 'epoch': 2.78}
```

## ÈÉ®ÁΩ≤ÈÉ®ÂàÜ
- Êé®ÁêÜÁéØÂ¢ÉÈÖçÁΩÆÂèØÂèÇËÄÉ [Êé®ÁêÜREADME.md](../README.md)

## Êé®ÁêÜÈÉ®ÂàÜ
- Êé®ÁêÜËÑöÊú¨ÂèØÂèÇËÄÉ [eval_demo_vllm.py](eval_demo_vllm.py)
- ÊâìÂàÜËÑöÊú¨ÂèØÂèÇËÄÉ [compute_acc.py](compute_acc.py)
</document_content>
</document>
<document index="13">
<source>./examples/compute_acc.py</source>
<document_content>
import json
import sys
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# ÂæÖËØÑÊµãÊñá‰ª∂
json_file = sys.argv[1]

def compute_car(json_file):
    with open(json_file, encoding="utf-8") as f:
        annos = f.readlines()
    label_names = set()
    input2pred = {}
    input2label = {}
    for anno in annos:
        anno = json.loads(anno)
        # Â§ö‰∏™È¢ÑÊµãÁªìÊûúÊåâÔºõÂàÜÂâ≤
        input2pred[anno["input"]] = anno["output"][0].split("Ôºõ")
        for name in anno["output"][0].split("Ôºõ"):
            label_names.add(name)
        input2label[anno["input"]] = anno["label"][0].split("Ôºõ")
        for name in anno["label"][0].split("Ôºõ"):
            label_names.add(name)
    # Êî∂ÈõÜlabels
    label_names = list(label_names)
    labels = []
    predictions = []
    for input, label in input2label.items():
        # one-hot padding
        label_zero = [0] * len(label_names)
        for _ in label:
            label_zero[label_names.index(_)] = 1
        labels.append(label_zero)  
        pred_zero = [0] * len(label_names)
        for _ in input2pred[input]:
            pred_zero[label_names.index(_)] = 1
        predictions.append(pred_zero)  
    # print(labels[0])
    # print(predictions[0])
    # ÊâìÂç∞ÁªüËÆ°ÊåáÊ†á
    print("acc:", accuracy_score(labels, predictions))
    print("p:", precision_score(labels, predictions, average='micro'))
    print("r:", recall_score(labels, predictions, average='micro'))
    print("f1:", f1_score(labels, predictions, average='micro'))

if __name__ == "__main__":
    compute_car(json_file)

</document_content>
</document>
<document index="14">
<source>./examples/ds_zero2_no_offload.json</source>
<document_content>
{
    "fp16": {
        "enabled": "auto",
        "loss_scale": 0,
        "loss_scale_window": 100,
        "initial_scale_power": 16,
        "hysteresis": 2,
        "min_loss_scale": 1e-10
    },
    "zero_optimization": {
        "stage": 2,
        "allgather_partitions": true,
        "allgather_bucket_size": 1e8,
        "overlap_comm": true,
        "reduce_scatter": true,
        "reduce_bucket_size": 1e8,
        "contiguous_gradients": true
    },
    "gradient_accumulation_steps": "auto",
    "gradient_clipping": "auto",
    "steps_per_print": 10,
    "train_batch_size": "auto",
    "train_micro_batch_size_per_gpu": "auto",
    "wall_clock_breakdown": false
}
</document_content>
</document>
<document index="15">
<source>./examples/ds_zero3_no_offload.json</source>
<document_content>
{
    "fp16": {
        "enabled": "auto",
        "loss_scale": 0,
        "loss_scale_window": 1000,
        "initial_scale_power": 16,
        "hysteresis": 2,
        "min_loss_scale": 1
    },
    "bf16": {
        "enabled": "auto"
    },

    "zero_optimization": {
        "stage": 3,
        "offload_optimizer": {
            "device": "none",
            "pin_memory": true
        },
        "offload_param": {
            "device": "none",
            "pin_memory": true
        },
        "overlap_comm": true,
        "contiguous_gradients": true,
        "sub_group_size": 1e9,
        "reduce_bucket_size": "auto",
        "stage3_prefetch_bucket_size": "auto",
        "stage3_param_persistence_threshold": "auto",
        "stage3_max_live_parameters": 1e9,
        "stage3_max_reuse_distance": 1e9,
        "stage3_gather_16bit_weights_on_model_save": true
    },

    "gradient_accumulation_steps": "auto",
    "gradient_clipping": "auto",
    "steps_per_print": 10,
    "train_batch_size": "auto",
    "train_micro_batch_size_per_gpu": "auto",
    "wall_clock_breakdown": false
}
</document_content>
</document>
<document index="16">
<source>./examples/ds_zero3_offload.json</source>
<document_content>
{
    "fp16": {
        "enabled": "auto",
        "loss_scale": 0,
        "loss_scale_window": 1000,
        "initial_scale_power": 16,
        "hysteresis": 2,
        "min_loss_scale": 1
    },
    "bf16": {
        "enabled": "auto"
    },

    "zero_optimization": {
        "stage": 3,
        "offload_optimizer": {
            "device": "cpu",
            "pin_memory": true
        },
        "offload_param": {
            "device": "cpu",
            "pin_memory": true
        },
        "overlap_comm": true,
        "contiguous_gradients": true,
        "sub_group_size": 1e9,
        "reduce_bucket_size": "auto",
        "stage3_prefetch_bucket_size": "auto",
        "stage3_param_persistence_threshold": "auto",
        "stage3_max_live_parameters": 1e9,
        "stage3_max_reuse_distance": 1e9,
        "stage3_gather_16bit_weights_on_model_save": true
    },

    "gradient_accumulation_steps": "auto",
    "gradient_clipping": "auto",
    "steps_per_print": 10,
    "train_batch_size": "auto",
    "train_micro_batch_size_per_gpu": "auto",
    "wall_clock_breakdown": false
}
</document_content>
</document>
<document index="17">
<source>./examples/ds_zero3_offload_no_auto.json</source>
<document_content>
{
    "fp16": {
        "enabled": false,
        "loss_scale": 0,
        "loss_scale_window": 1000,
        "initial_scale_power": 16,
        "hysteresis": 2,
        "min_loss_scale": 1
    },
    "bf16": {
        "enabled": true
    },

    "zero_optimization": {
        "stage": 3,
        "offload_optimizer": {
            "device": "cpu",
            "pin_memory": true
        },
        "overlap_comm": true,
        "contiguous_gradients": true,
        "sub_group_size": 1e9,
        "reduce_bucket_size": 1e8,
        "stage3_prefetch_bucket_size": 1e8,
        "stage3_param_persistence_threshold": 0,
        "stage3_max_live_parameters": 1e8,
        "stage3_max_reuse_distance": 1e8,
        "stage3_gather_16bit_weights_on_model_save": true
    },

    "gradient_accumulation_steps": 1,
    "gradient_clipping": "auto",
    "steps_per_print": 10,
    "train_micro_batch_size_per_gpu": 1,
    "wall_clock_breakdown": false
}
</document_content>
</document>
<document index="18">
<source>./examples/eval_demo_vllm.py</source>
<document_content>
# pip install zhipuai
import os
import traceback
import json
import tqdm
import requests
from multiprocessing import Pool


task_file = "car_test.json"
model_path = "/checkpoint-80"
model_flag = model_path.split("/")[-1]
urls = ["http://127.0.0.1:8020/v1/completions"]
save_file = f"results/{model_flag}"

def get_input_text(data):
    if 'input' in data:
        input_text = data['input']
    elif 'prompt' in data:
        input_text = data['prompt']
    elif 'question' in data:
        input_text = data['question']
    elif 'query' in data:
        input_text = data['query']
    return input_text

def process_message(data, url):
    input_text = get_input_text(data)
    # if 'prompt' not in data:
    #     input_text = data['input']
    # else:
    #     input_text = data["prompt"]
    if isinstance(input_text, str):
        input_text = input_text.split("[CHAT_SEP]")
    assert isinstance(input_text, list)
    output_list = []
    history_list = [{
        "role": "system",
        "content": "You are a helpful assistant."
    }]
    try:
        for input_str in input_text:
            history_list.append({"role": "user", "content": input_str})
            response = requests.post(url, data=json.dumps({"model": model_path,
                # "messages": history_list,
                "prompt": input_str,
                "max_tokens": 50,
                "temperature": 0.7,
                "top_p": 0.6,
                "top_k": 20,
                "repetition_penalty": 1.05,
                "stop": ["<|eos|>"]
                }))
            # print(response.json())
            # output = response.json()["choices"][0]["message"]["content"]
            output = response.json()["choices"][0]["text"]
            output_list.append(output)
            history_list.append({"role": "assistant", "content": output})
            print(f"Input: {input_str}\nOutput: {output}\n--------\n")
        if output_list:
            if len(output_list) == 1:
                output_list = output_list[0]
            data["output"] = output_list
            return data
    except:
        traceback.print_exc()
        return {}

already_set  = set()
if os.path.exists(save_file):
    with open(save_file, encoding="utf-8") as f:
        annos = f.readlines()
        for anno in annos:
            anno = json.loads(anno)
            try:
                input_str = get_input_text(anno)
                already_set.add(json.dumps(input_str, ensure_ascii=False))
            except:
                pass


writer = open(save_file, "a+", encoding="utf-8")
def my_callback(anno):
    if anno:
        writer.writelines(json.dumps(anno, ensure_ascii=False)+"\n")

annos = open(task_file, encoding="utf-8").readlines()
with Pool(4) as pool:
    for i, anno in enumerate(tqdm.tqdm(annos)):
        anno = json.loads(anno.split("\t")[0])
        try:
            input_str = get_input_text(anno)
            if json.dumps(input_str, ensure_ascii=False) in already_set:
                print(f"Already process: {input_str}")
                continue
        except:
            continue
        pool.apply_async(process_message, (anno,urls[i%len(urls)]), callback=my_callback)
        # output_list = process_message(anno)
        # if output_list:
        #     anno["output"] = output_list
        #     anno = json.dumps(anno, ensure_ascii=False) + "\n"
        # else:
        #     print("Failed!!!")
    pool.close()
    pool.join()
writer.close()

</document_content>
</document>
<document index="19">
<source>./examples/data/car_test.json</source>
<document_content>
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§èËá≥ËäÇÊ∞îÁª≠‰øù | ÂπøÊ±Ω‰∏∞Áî∞‰∏äËôûË∂äÊπñÂ∫óÊ∞∏ËøúÊòØÊÇ®ËΩ¶Èô©ÊùÉÁõäÁöÑÂùöÂÆöÁª¥Êä§ËÄÖ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞ds525Â∏ÖÊ∞î!‰∏ÄÂàÜÈíüÂ∏¶‰Ω†ÁúãË•øÂÆâÊë©Âçö‰ºö„ÄêÊó†ÊûÅ„ÄëÂ±ïÈ¶Ü\n", "label": "ds525"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊΩÆÊµÅ | rocky‰∏äË∫´awge x Â•îÈ©∞Êñ∞ÂìÅ;lvÊé®Âá∫virgil abloh‚Ñ¢ bladeÈ¶ñÈ•∞Á≥ªÂàó\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n[unk]ÈïøÂüéÁÇÆÂÅúÂú®Â∑•Âú∞‰∏ä,ÈùûÂ∏∏ËÄêÁî®,Â∫ïÁõòËæÉÈ´ò,ÈÄöËøáÊÄßÂæàÂ•Ω,ÂØπ‰∫éÂÅöÂ∑•Á®ãÁöÑ‰∫∫Êù•ËØ¥ÂÆÉÈùûÂ∏∏ÂÆûÁî®,Âä®ÂäõË°®Áé∞ÂæàÂ•Ω,Êê≠ËΩΩÁùÄ‰∏ÄÂè∞2.0t190È©¨Âäõl4ÂèëÂä®Êú∫,ÂåπÈÖç8Êå°Ëá™Âä®ÂèòÈÄüÁÆ±,ÊèêÈÄüÂ∞öÂèØ,ÊúÄÂ§ßËΩΩÈáçË¥®Èáè480(kg),Êª°Ë∂≥‰∫ÜÁªùÂ§ßÂ§öÊï∞ÊÉÖÂÜµÁöÑÁî®ËΩ¶ÈúÄÊ±Ç,ËøòÊúâÈïøÂüéÁÇÆËΩ¶‰∏ªË°®Á§∫ÁªèÂ∏∏Áî®ÂÆÉÊãâÂåñËÇ•ÂíåÂ∞èÈ∫¶„ÄÇ\n", "label": "ÈïøÂüéÁÇÆ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nbt40ÂàÄÊüÑ,2011Âπ¥Âá∫ÂéÇ,ÈúÄË¶ÅÁöÑËØ∑ËÅîÁ≥ª\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËîöÊù•ÈáåÁ®ãÊó†Âøß ec6Ë∂ÖÈïøÁª≠Ëà™615km,ÊûÅÈÄüÊç¢Áîµ,ÁªàË∫´ÂÖçË¥πË¥®‰øù,‰∏∫ÊÇ®ÂÆàÂÄôÊØèÁ®ãÊóÖÈÄî\n", "label": "ec6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏ç‰ªÖÂÖ®Á≥ªÊ†áÈÖç‰∫ÜledÂ§ßÁÅØÂíåledÊó•Èó¥Ë°åËΩ¶ÁÅØ,Âú®È´òÈÖçËΩ¶Âûã‰∏äÊõ¥ÊòØÊúâÊâìÂ≠îÁúüÁöÆÂ∫ßÊ§Ö„ÄÅËΩ¶ÂÜÖÊ∞õÂõ¥ÁÅØ„ÄÅÂÖ®ÈÄüËá™ÈÄÇÂ∫îÂ∑°Ëà™Á≠âËàíÈÄÇÊÄßÈÖçÁΩÆ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏âÊòügalaxy s22ÂÖÖÁîµÊîØÊåÅÊõùÂÖâ,ÊàñÂÖ®Á≥ª ip68 Á∫ßÈò≤Â∞òÈò≤Ê∞¥\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n8.3Ëã±ÂØ∏ÊÇ¨ÊµÆÂºèÂΩ©Ëâ≤Â§ßÂ±è„ÄÅÁÇ´ÈÖ∑ÁöÑ12.3Ëã±ÂØ∏ÂÖ®Ê∂≤Êô∂‰ª™Ë°®Áõò„ÄÅÈòªÂ∞ºÊÑüÂçÅË∂≥ÁöÑÁâ©ÁêÜÊåâÈîÆ„ÄÅÁ¨¶Âêà‰∫∫‰ΩìÂ∑•Á®ãÂ≠¶ÁöÑÁîµÂä®ÁúüÁöÆÂ∫ßÊ§Ö„ÄÅÂÄíËΩ¶ÂΩ±ÂÉè„ÄÅÂâçÂêéÈõ∑Ëææ„ÄÅËá™Âä®Á©∫Ë∞É„ÄÅÂêéÊéíÂá∫È£éÂè£„ÄÅÊâãÊú∫‰∫íËÅî/Êò†Â∞Ñ„ÄÅ8‰∏™ÂÆâÂÖ®Ê∞îÂõä„ÄÅÂÜÖÈ•∞Â§öËâ≤Ê∞õÂõ¥ÁÅØ„ÄÅËá™Âä®Â§ßÁÅØ„ÄÅÁîµÂä®ÂÖ®ÊôØÂ§©Á™ó„ÄÅÊÑüÂ∫îÈõ®Âà∑Á≠â‰∫∫ÊÄßÂåñÂíåÁßëÊäÄÂåñÈÖçÁΩÆÂùáÂ∑≤ÈÖçÊúâ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊàë‰ª¨ÁúãÂà∞‰∏≠Â§ÆÊâ∂ÊâãÂå∫ÂüüÂæàÂ§ß,Âú®‰∏≠Â§ÆÊâ∂ÊâãÁöÑÂâçÊñπÊúâÂ°ëÊñôËñÑËÜúË¶ÜÁõñ,ÊúÄÂâçÈù¢ÁöÑ‰ΩçÁΩÆË°®Èù¢ÂæàÂπ≥Êï¥,Êàë‰ª¨Êé®Êñ≠ËøôÂæàÂèØËÉΩÊòØ‰∏ÄÂùóËß¶Êë∏Â±è„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ¨ßÂ∞öx7 plus‰∏ãËÆ¢ÊúâÂ•ñ ‰ª∑ÂÄº1299ÂÖÉoppo watch2‰∏ìÂ±ûÊô∫ÊéßÊâãË°®Â§©Â§©ÊäΩ\n", "label": "Ê¨ßÂ∞öx7 plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏∞Áî∞ËÄÉÊñØÁâπ10Â∫ßÊîπË£ÖÂïÜÂä°ËΩ¶ÁéáÂÖà‰ªéÈÉ®ÂàÜÊúÄ‰∏≠ÂùöÁöÑÊ†ºÊú®Êï∞‰∏ä‰ª•Êù•,‰∏∞Áî∞ËÄÉÊñØÁâπÂïÜÂä°ËΩ¶Âä®Áî®4.0lv6ÂèëÂä®Êú∫,ÊúÄÂ§ßÈ©¨Âäõ‰∏∫232,ÊúÄÂ§ßÈôêÈÄü135ÂÖ∂ÊúÄÂ§ßÁöÑËæìÂá∫ÂäüÁéáÂèäÊâ≠Áü©Áã¨ÂÆ∂ËææÂà∞‰∫Ü171kw/5000rpmÂíå345nm/4400rpm„ÄÇ\n", "label": "ËÄÉÊñØÁâπ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n3Êúà17Êó•/ ÁâπÊñØÊãâÂõûÂ∫î‰∏äÊµ∑Â∑•ÂéÇÂÅú‰∫ß;Áü≥Â§¥ÁßëÊäÄÂàõÂßã‰∫∫Êé®ËøõÈÄ†ËΩ¶ËÆ°Âàí;ÂÆùÈ©¨Âπ¥ÂÜÖÂ∞ÜÊé®15Ê¨æÁ∫ØÁîµËΩ¶Âûã;Â•îÈ©∞ÂõΩ‰∫ßÈáçÂç°Ê®™Á©∫Âá∫‰∏ñ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ≠§Â§ñ,ÂÜçÈÖç‰∏ä‰∏ÄÂπÖÂ§öËæêÂºèÁöÑËΩÆÊØÇËÆæËÆ°,‰∏∫ËØ•ËΩ¶Â∏¶Êù•‰∫Ü‰∏çÈîôÁöÑËøêÂä®ÊÑü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„Äê‰ºòË¥®ËΩ¶Ê∫êÂÄ°ÂØºËÄÖ‚ÄîÊó†Èî°Â••ÈÄö‰∫åÊâãËΩ¶‰∏≠ÂøÉ„Äë‰ºòÈõÖËÄå‰∏çÂ§±ÂÆûÁî®--Â••Ëø™a6 2004Ê¨æ 2.8lË±™ÂçéÂûã\n", "label": "Â••Ëø™a6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„Äê‰∏äÊ±ΩÂ§ßÈÄömaxusmifa9‰∏äÂ∏Ç,ÂÖ®Êñ∞Êñ∞ËÉΩÊ∫êÂìÅÁâåmifaÂèëÂ∏É„Äë6Êúà29Êó•,ÂÖ®Â∞∫ÂØ∏Ë±™ÂçéÊô∫ËÉΩÁ∫ØÁîµmpv‰∏äÊ±ΩÂ§ßÈÄömaxusmifa9ÈúáÊíº‰∏äÂ∏Ç,mifa9ÂÖ®Á≥ªÂÖ±ÂèëÂ∏ÉÊ£ÆÊûóÂÖ≠Â∫ßÁâà„ÄÅÈ´òÂ±±ÂÖ≠Â∫ßÁâà„ÄÅÈ´òÂ±±ÊóóËà∞Áâà‰∏âÊ¨æ‚Äú‰∫∫‰∫∫ÈÉΩÊòØvip‚ÄùÁöÑÂÖ≠Â∫ßÁ≥ªÂàó,ÂèäÁªøÊ¥≤‰∏ÉÂ∫ßÁâà„ÄÅËçâÂéü‰∏ÉÂ∫ßÁâà„ÄÅÊ£ÆÊûó‰∏ÉÂ∫ßÁâà„ÄÅÈ´òÂ±±‰∏ÉÂ∫ßÁâàÂõõÊ¨æ‰∏ÉÂ∫ßÁ≥ªÂàó„ÄÇ\n", "label": "mifa9Ôºõ‰∏äÊ±ΩÂ§ßÈÄömaxusmifa9"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n2022Ë∂ÖÁ∫ßÂ§ßÁàÜÊ¨æ!!Êñ∞Ê¨ælv nano speedyÂÖ®Èù¢ÊµãËØÑ -ÈôÑ‰ª∑Ê†ºÂèäËØ¶ÁªÜÁâπÂæÅ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ®Êñ∞mg52022Ê¨æ‰ª•ÂêåÁ∫ßÈ¢ÜÂÖàÁöÑtÂä®Âäõ,Âè†Âä†È¢úÂÄº„ÄÅÂìÅË¥®„ÄÅÂÆâÂÖ®„ÄÅÊô∫ËÉΩÂõõÂ§ßÂçáÁ∫ß,‰ªéÊΩÆË∑ëÊñ∞Ê†áÂáÜÂà∂ÂÆöËÄÖÊôãÂçá‰∏∫‰∏≠ÂõΩÊΩÆË∑ëÂàõÈ¢ÜËÄÖ„ÄÇ\n", "label": "mg5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nid.3Êù•Ëá™Â§ß‰ºóÂÖ®Êñ∞mebÁ∫ØÁîµÂπ≥Âè∞,Â§ñÂΩ¢‰∏äÈááÁî®‰∫ÜÂ∞ÅÈó≠ÂºèËΩ¶Â§¥Âíå‚ÄúÈïÄÂÖâ‚ÄùÂâçËÑ∏,ÂêéÊù•Â∞±ÂèòÊàê‰∫ÜÂÆ∂ÊóèÂºèÁöÑÈÄ†ÂûãÈ£éÊ†º„ÄÇ\n", "label": "id.3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊàñÂÉèx1‰∏ÄÊ†∑Êõ¥Âä†Á°¨Êúó?ÂÖ®Êñ∞x3ÊúÄÊñ∞Ê∏≤ÊüìÂõæ\n", "label": "x3Ôºõx1"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈáëÁî∞Ëµ∑‰πâ‰∏∫‰ΩïËÉΩÂ§üÊàêÂäüÂèëÂä®?‰∫ãÂâçÂáÜÂ§áÂ∑•‰ΩúÂÅöÂæóÂæàÂÖÖË∂≥!Â§©Êó∂Âú∞Âà©‰∫∫ÂíåÈÉΩÂÖ∑Â§á\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§©Ë°°¬∑Ë¥®ÈÄ†|ÂáØËø™ÊãâÂÖãxt6ËøûÁª≠‰∏âÂπ¥ËùâËÅîiihsÈ°∂Á∫ßÂÆâÂÖ®ËØÑÁ∫ßtsp+,‰∏çÊÑßÊòØ‰Ω†\n", "label": "ÂáØËø™ÊãâÂÖãxt6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËøôÊ¨æËΩ¶Âûã‰∏ä,Êã•ÊúâÁé∞‰ª£‰∏ª‰πâÁöÑË±™ÂçéÈ£éÂ∞ö,Áõ∏ÊØî‰πã‰∏ã,Êõ¥ÊúâÂê∏ÂºïÂäõ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊª°ÊÑèÁ≠îÊ°à:ÁæéÂ≠öÊóãÈ£é4tÂíå4tÊúâÂå∫Âà´Âêó?ÂàÜÊûêÂì™‰∏™Â•Ω?Êé¢ËÆ®Êè≠ÁßòÁúüÂÆû‰ΩøÁî®‰ΩìÈ™å\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂßã‰∫éÂå†ÂøÉ,Ëáª‰∫éËá≥ÂñÑ,;;Êú¨Ëâ≤‰∏çÊîπ,È©æË∂£ÂßãÊñ∞,;;tm-cc‰∏ÄÊ¨°ÂÆâË£Ö,Â∏¶Êù•ÊåÅ‰πÖ‰øùÊä§„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ®Êñ∞‰∏Ä‰ª£‰∏∞Áî∞ÊôÆÊãâÂ§öÊõùÂÖâ!È¢ÑÂîÆ45‰∏á,2.8t+ÂõõÈ©±,Êñ∞ÈÄ†ÂûãÁúüÈú∏Ê∞î\n", "label": "ÊôÆÊãâÂ§ö"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏çÂæó‰∏çËØ¥,Ê≠§‰∏æ‰ΩìÁé∞‰∫ÜÁ∫¢ÊóóÁöÑÂ§ßÊ∞î,ÂêåÊó∂‰πüÁõ∏ÂΩì‰∫é‰∏ÄÊ¨°ÁßØÊûÅÊúâÊïàÁöÑÂÆ£‰º†„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ¢úÂÄº‰∏éÂÆûÁî®ÂÖºÂ§á Êèê‰æõ‰∏§ÁßçÂä®Âäõ ÂìàÂºóh6sÈ¢ÜÊΩÆ‰∏äÂ∏Ç ÂîÆ‰ª∑13.89‰∏áËµ∑\n", "label": "ÂìàÂºóh6s"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n1.Â§ßÁ©∫Èó¥Â§ßÊ∞îÊ¥æ,Èó≤Â∫≠‰ø°Ê≠•Êõ¥Ëá™‰ø°‰∏≠ÂõΩ‰∫∫‰π∞ËΩ¶ÂêëÊù•‚Äú‰ª•Â§ß‰∏∫Áæé‚Äù,‰∏ÄÊñπÈù¢,Â§ßÈô§‰∫Ü‰ª£Ë°®‰∏ªËßÇËßÜËßâ„ÄÅÂÆ¢ËßÇÂ∞∫ÂØ∏ÊÑüÂèóÁöÑÂ§ß,Ëøò‰ª£Ë°®ÁùÄ‚ÄúÂ§ßÊ∞î‚ÄùÁöÑÊñáÂåñÂÜÖÊ∂µ,Á¨¶ÂêàÂõΩ‰∫∫ÁöÑÊñáÂåñÂñúÂ•Ω„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÊ∑±Âú≥‰∏úÊµ©„Äëjeep¬ÆÊñ∞Â§ßÊåáÊå•ÂÆòÊé¢ÂçÉÂ≤õÊπñ ÂìÅÊ±üÂçóÂà´Ëá¥‰∏ç‰∫¶‚ÄúË∂ä‚Äù‰πé\n", "label": "Â§ßÊåáÊå•ÂÆò"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÜÖÈ•∞ÁöÑËÆæËÆ°‰πüÂ¢ûÊ∑ª‰∫Ü‰∏çÂ∞ëÁöÑÊñ∞È≤úÊÑü,yÂ≠óÂΩ¢ÁöÑ‰∏≠ÊéßÂè∞ÂíåÂæàÂ§öÂä®ÊÑüÊµÅÁïÖÁöÑÁ∫øÊù°ÂãæÂãí,Âπ∂ÈÄâÁî®‰∫Ü‰∏çÂêåÁßçËΩØÊÄßÊùêË¥®ÁöÑÈì∫Èôà,ÊûÅÂÖ∑Ëâ∫ÊúØÊÑü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËôΩÁÑ∂diplomaÂê¨‰∏äÂéªÊØîcertificateÊõ¥ÊãâÈ£éÁâõÂìÑÂìÑ,‰ΩÜpgceiÂíåpgdeÂçïÁ∫Ø‰ªéÊéàËØæÂÜÖÂÆπÊù•ÁúãÂ∑ÆÂà´‰∏çÊòØÂæàÂ§ß„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„Äêcs95„ÄëÂº∫ËÄÖÊù•Ë¢≠,ÂºÄÂêØÂÖ®Êñ∞ÂæÅÁ®ã\n", "label": "cs95"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÊ∑ÆÂÆâ ‚Ä¢ ÁõäÊ¨£„ÄëÂÖ®Êñ∞Â••Ëø™q3 ÂÖ®Èù¢Á™ÅÁ†¥ËÄåÊù•\n", "label": "Â••Ëø™q3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂáØËø™ÊãâÂÖãxt4ËΩ¶‰∏ªÁî®ËΩ¶ÂàÜ‰∫´(907Êúü):Êç°ÊºèÂ•ΩÊó∂Êú∫!ÂÆùÈ©¨x1Â••Ëø™q3ËøôÊ¨°Âú®Âä´ÈöæÈÄÉ\n", "label": "ÂÆùÈ©¨x1ÔºõÂáØËø™ÊãâÂÖãxt4ÔºõÂ••Ëø™q3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈô§ÂÖ•Èó®ÁâàÁöÑ3Ê¨æËΩ¶ÂûãÂ§ñ,ÂÖ∂‰ΩôËΩ¶ÂûãÈÉΩ‰ΩøÁî®‰∫ÜledÂ§ßÁÅØ‰æßÈù¢Â§ñËßÇ,ÂÆÉÁöÑ‰æßÈù¢ËÆæËÆ°ÂæóÂçÅÂàÜÁÆÄÊ¥Å,ÊµÅÁïÖËàíÂ±ïÁöÑÁ∫øÊù°ËÆæËÆ°ËÆ©ÂÆÉÊï¥‰ΩìÁúãËµ∑Êù•Âä®ÊÑüÂçÅË∂≥,ÂçÅÂàÜÂÖªÁúº„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nË¢´ÂÜ∑ËêΩÁöÑÊó•‰∫ßÊ•ºÂÖ∞,ËΩ¶Èïø4897mm,ÈÖç2.5lÂä®Âäõ,23.88‰∏áËµ∑Âç¥Âçñ‰∏çÂä®\n", "label": "Ê•ºÂÖ∞"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈïøÂÆâ cs55Á∫ØÁîµÁâà 1180mpaÈ´òÂº∫ËΩªÈáèÂåñËΩ¶Ë∫´\n", "label": "ÈïøÂÆâ cs55Á∫ØÁîµÁâà"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂüÉÂ§´ÁâπÊî∂Ë¥≠robox 9%ÁöÑËÇ°ÊùÉ;ÊØî‰∫öËø™100‰∫øÂª∫ËÆæÁîµÊ±†È°πÁõÆ;ËâæÂà©ÁâπËûçËµÑÊï∞‰∫ø | 3Êúà14Êó•\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‚Äú‰º†Á•∫‚ÄùÁ∫ßÈ©æÊéß!ÂÖ®Êñ∞‰∏Ä‰ª£‰º†Á•∫ga6ÂÖ®ÊÑüÂÆòÊûÅÊô∫‰ΩìÈ™å\n", "label": "‰º†Á•∫Ôºõ‰º†Á•∫ga6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶‰∏ªÊäïËØâ:‰∏úÈ£éÂïÜÁî®ÈáçÂç°Â§©ÈæôklÁ≥ªÂàó,ËΩ¶ËæÜÈùôÊ≠¢ÂÅúÊîæËá™ÁáÉ,ÂéÇÂÆ∂‰∏çÁÆ°‰∏çÈóÆ,ËÆ©Ëá™ËÆ§ÂÄíÈúâ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈûçÂ±±Êñ∞Ê¨æ‰øùÊó∂Êç∑911ËΩ¶Âèã‰ºö ËΩ¶ÂèãÁæ§ ËΩ¶Âèã‰ø±‰πêÈÉ®ÊãõÂãüËΩ¶Âèã!ËØöÈÇÄÊÇ®ÁöÑÂä†ÂÖ•\n", "label": "‰øùÊó∂Êç∑911"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏ãÂçäÈÉ®ÂàÜÁöÑÁÅØÁªÑÂ∏¶ÊúâÁ±ª‰ººÁü©ÈòµÂºèÁöÑËÆæËÆ°ÂàôÈùûÂ∏∏ÂÖ∑ÊúâÂéãËø´ÊÑü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏§‰æßÁöÑÂ§ßÁÅØÁªÑÈááÁî®‰∫Ü‚ÄúÈõ∑Á•û‰πãÈî§‚ÄùÁöÑËÆæËÆ°,tÂûãÁöÑÊó•Èó¥Ë°åËΩ¶ÁÅØËæ®ËØÜÂ∫¶ÊûÅÈ´ò,ÂÖ®ledÂ§ßÁÅØÂÜÖÈÉ®ÈááÁî®‰∫Ü‰∏ä‰∏ãÂêÑ‰∏âÈ¢óÁü©ÈòµÂºèÁÅØÁªÑ,ËøôÊ†∑ÁöÑËÆæËÆ°Êõ¥Âä†ÁÆÄÊ¥Å„ÄÅÊó∂Â∞ö„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n21.48‰∏áË∑åËá≥14.48‰∏á,ÊØîÂ§ß‰ºóËøòÂéöÈÅì,6atÈÖçÂ§ß7Â∫ß,Ë∑üÈÄîËßÇlÂêåÁ∫ß\n", "label": "ÈÄîËßÇl"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊÄßËÉΩÊúÄÂº∫suv?Ê≥ïÊãâÂà©purosangueÂπ¥ÂÜÖÊäï‰∫ß,3.2ÁßíÁ†¥Áôæ\n", "label": "purosangue"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏çÈöæÁúãÂá∫,Âú®rtx4090Âíårtx4080‰∏≠Èó¥ÊúâÈùûÂ∏∏Â§ßÁöÑÁªÜÂàÜÁ©∫Èó¥,ÊåâÁÖß‰ª•ÂæÄËÄÅÈªÑÁöÑ‰º†Áªü,Â∞ëËØ¥Ë¶ÅÂàáÂá∫‰∏âÂº†Âç°Êù•„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂõΩ‰∫ß‚ÄúÈªëÈ©¨‚ÄùÊù•‰∫Ü,ÂÖ•Èó®Â∞±ÊòØ2.0t,ÂâçÈ©±ÈÖç61lÂ§ßÊ≤πÁÆ±,cr-v‰∏çÈ¶ô‰∫Ü\n", "label": "cr-v"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ºäÂÖ∞ÁâπnÁöÑÂ§ñËßÇ‰∏éÊôÆÈÄö‰ºäÂÖ∞ÁâπÂπ∂Ê≤°ÊúâÂ§™Â§ßÂ∑ÆÂà´,Â§ßÈù¢ÁßØÈªëËâ≤Â°ëÊñôÂåÖË£πÁöÑËΩ¶Â§¥,ËôΩÁÑ∂Ê≤°ËÉΩÊîπÂèòËøôÂè∞ËΩ¶È≤∂È±ºËà¨ÁöÑÂâçËÑ∏,‰ΩÜËá≥Â∞ëÊØîÊôÆÈÄöÁâàÁúãËµ∑Êù•Âá∂‰∫ÜËÆ∏Â§ö„ÄÇ\n", "label": "‰ºäÂÖ∞ÁâπnÔºõ‰ºäÂÖ∞Áâπ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÆèÂÖâminiev gameboy 3Êúà9Êó•ÂºÄÂêØÈ¢ÑÂÆö,ÊΩÆÂàõÂ•ó‰ª∂„ÄÅ‰∫ÆÁÇπÈÖçÁΩÆÊõùÂÖâ\n", "label": "ÂÆèÂÖâminiev gameboy"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ΩÜÊòØÂæóÁõä‰∫éÈù†ËÉåËßíÂ∫¶ÂèØË∞ÉÁöÑËåÉÂõ¥ÊØîËæÉÂ§ß,Ëøô‰∏™ÂêéÊéíÂ∫ßÊ§ÖÂ∑≤ÁªèÊòØÊàëÁõÆÂâçÂ∞ùËØïËøáÊâÄÊúâÁ∫ØÁîµsuvÈáåÊúÄËàíÊúçÁöÑ‰∏Ä‰∏™‰∫Ü,ÂèØ‰ª•Áªô‰∏™Â•ΩËØÑ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂØπ‰∫éËøôÊ†∑‰∏ÄÊ¨æËΩ¶Êù•ËØ¥,Ë±™ÂçéÊàñÊòØËøêÂä®ÈÉΩÂè™ÊòØÂÆÉÁöÑ‰∏Ä‰∏™ÊñπÈù¢ËÄåÂ∑≤,ÂØπ‰∫éÂ¶Ç‰ªäÁöÑbmwÂìÅÁâå‰∫¶ÊòØÂ¶ÇÊ≠§„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nË±™ÂçéÁåéË£ÖËΩøË∑ë ÊûÅÊ∞™0013.8sÈõ∂ÁôæÂä†ÈÄü712km nedcË∂ÖÈïøÁª≠Ëà™‰∏ÉÁßçÈ©æÈ©∂Ê®°ÂºèÂÖ®Ë∑ØÂÜµ‰ªéÂÆπÈ©æÈ©≠\n", "label": "ÊûÅÊ∞™001"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂèà‰∏ÄÂõΩ‰∫ßËΩ¶ÂÄí‰∏ã‰∫Ü!88‰∫øÊâìÊ∞¥ÊºÇ,Â∑≤ËøûÁª≠26‰∏™ÊúàÈîÄÈáè‰∏∫0,ÁΩëÂèã:ËøôËΩ¶ÁôΩÈÄÅ‰πü‰∏çË¶Å\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂú®dÁ∫ßÊóóËà∞ËΩ¶ÁöÑÁîüÊÄÅ‰Ωç‰∏ä,ËÉΩË∑übbaÁ´û‰∫âÁöÑÂìÅÁâåÂ∞ë‰πãÂèàÂ∞ë,Èõ∑ÂÖãËê®ÊñØÁöÑlsËÉΩÂùöÊåÅË∏èË∏èÂÆûÂÆûÊêûÂìÅÊéß,ËøòÊúâÊ∏ÖÊñ∞Áã¨ÁâπÁöÑÈ£éÊ†ºÊù•ÁºìËß£ÂÆ°ÁæéÁñ≤Âä≥,ÂÆûÂ±ûÊ∏ÖÊµÅ„ÄÇ\n", "label": "ls"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂú®Âä®ÂäõÊñπÈù¢,ÂÖ®Êñ∞ÁöÑrav4‰πüÊúâ‰∏Ä‰∏™ËæÉÈ´òÁöÑË°®Áé∞,Êµ∑Â§ñÁâàÁöÑÊòØ2.5ÂçáÁöÑËá™ÁÑ∂Âê∏Ê∞îÂèëÂä®Êú∫Âíå2.5ÂçáËá™Âê∏ÂèëÂä®Êú∫+ÁîµÂä®Êú∫ÁöÑÊ∑∑Âä®Á≥ªÁªü,‰º†Âä®ÊñπÈù¢ÈááÁî®ÂÖ®Êñ∞ÁöÑ8ÈÄüÂèòÈÄüÁÆ±,‰∏çËøáËøô‰∫õ‰πüÈÉΩÊòØÊµ∑Â§ñÁâàÁöÑÊï∞ÊçÆ,ÂõΩ‰∫ßÁöÑÁõÆÂâç‰πüËøòÊ≤°ÊúâÂÖ¨Â∏É,Áõ∏‰ø°Âú®ÂõΩ‰∫ß‰ª•ÂêéÁöÑÂä®ÂäõÂ∞Ü‰∏ç‰ºö‰Ωé‰∫éÊµ∑Â§ñÁâàÁöÑÂä®Âäõ„ÄÇ\n", "label": "rav4"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂº†Êô∫ÈúñÁà±ËΩ¶600‰∏áÂ•îÈ©∞s65amg,ÂÜçÁúãË¢ÅÂíè‰ª™Â∫ßÈ©æ,Âº†Êô∫Èúñ:‰π∞ËΩ¶Âπ∂‰∏çÊòØ‰ªÄ‰πàÂ§ß‰∏ç‰∫ÜÁöÑ‰∫ãÊÉÖ\n", "label": "Â•îÈ©∞s65amg"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÆùÁü≥Èùí|ÂÆùÈ©¨x3Ë¥¥xpel lux plusÈöêÂΩ¢ËΩ¶Ë°£,xpelÂÆòÊñπÊóóËà∞Â∫ó\n", "label": "ÂÆùÈ©¨x3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n1.5t+48vËΩªÊ∑∑,‰∏äÂ∏ÇÈîÄÈáè4‰∏á+,ÂêâÂà©iconÂà∞Â∫ïÊúâ‰ªÄ‰πàÈ≠ÖÂäõ\n", "label": "ÂêâÂà©icon"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ¶ñÂÖàÈ©æÈ©∂Ëà±ÂíåÂêéÊéíÁ©∫Èó¥,ÈÄöËøá‰∏ÄÂùóÈ´òÁ∫ßÈõæÂåñÈöêÁßÅÁéªÁíÉÂàÜÈöîÂºÄÊù•„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÆûÂú∞‰ΩìÈ™åËøáÁ®ã‰∏≠,Á¨îËÄÖËøò‰∏ìÈó®ÂàáÊç¢Âà∞‰∫ÜËøêÂä®È©æÈ©∂Ê®°ÂºèÂêé,ÂèØ‰ª•ÊòéÊòæÊÑüÂèóÂá∫Êù•,cvtÂèòÈÄüÁÆ±‰ºöÂ∞ÜÂçáÊå°ÁöÑÂèëÂä®Êú∫ËΩ¨ÈÄüÈÉΩÊèêÈ´ò‰∏çÂ∞ë,Áªô‰∫∫ÁöÑÊÑüËßâ‰ºöÊõ¥Âä†ÁöÑÂº∫Âä≤„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nqqÂÜ∞Ê∑áÊ∑ãËøêÁî®‰∫ÜÊúÄÊñ∞ÂÆ∂ÊóèÂºèËÆæËÆ°ËØ≠Ë®Ä,uÂûãÊó•Ë°åÁÅØ‰ª•ÂèäÂúÜÂûãÂ§ßÁÅØ,ÁÇπ‰∫ÆÁä∂ÊÄÅ‰∏ãÊûÅÂÖ∑Ëæ®ËØÜÂ∫¶,ÂâçËÑ∏ÁúãËµ∑Êù•ÊØîÂÆèÂÖâminievÊõ¥Êó∂Â∞ö„ÄÇ\n", "label": "qqÂÜ∞Ê∑áÊ∑ãÔºõÂÆèÂÖâminiev"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊó†ÊÉßÈôêË°å,ÁîµÂäõÂçÅË∂≥ ÊûÅÁãêÈòøÂ∞îÊ≥ït,0È¶ñ‰ªò\n", "label": "ÊûÅÁãêÈòøÂ∞îÊ≥ït"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈÄöÁü•!Á∫ØËøõÂè£‰∏≠Â§ßÂûãsuv‰∏çÂà∞30‰∏áËµ∑,ÈÖç3.5l v6Âä®Âäõ,ËΩ¶Èïø\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊù•Âà∞ËΩ¶Ë∫´‰æßÈù¢ÈÉ®ÂàÜ,ÂèØ‰ª•ÁúãÂá∫weyÁéõÂ•áÊúµÁöÑËΩ¶Ë∫´ËΩÆÂªìÊØîËæÉÂúÜÊ∂¶È•±Êª°,‰∏äÊâ¨ÁöÑËÖ∞Á∫øÈÖçÂêàÈÄêÊ∏êÊî∂Á¥ßÁöÑÁ™óÊ°Ü,ËÆ©Êñ∞ËΩ¶ÂëàÁé∞Âá∫‰∏ÄÁßçÂêëÂâç‰øØÂÜ≤ÁöÑËøêÂä®ÂßøÊÄÅ„ÄÇ\n", "label": "weyÁéõÂ•áÊúµ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶Â∞æÁöÑÂêéÊâ∞ÊµÅÊùø„ÄÅÂèåËæπÂèåÂá∫ÁöÑÁúüÊéíÊ∞îÂíåÈªëËâ≤ÂêéÊâ©Êï£Âô®,Áªô‰∫∫‰∏ÄÁßçÊÄßËÉΩËΩ¶ÁöÑÊó¢ËßÜÊÑü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ªé53‰∏áÈôçËá≥36.2‰∏á,Âèà‰∏ÄÂêàËµÑsuvÈÜíÊÇü‰∫Ü,‰∏çÂÜçËÆ≤Ê≠¶Âæ∑!Â••Ëø™q5lÊ≤ÉÂ∞îÊ≤Éxc60ÂèåËÖøÂèëËΩØ\n", "label": "Â••Ëø™q5lÔºõÊ≤ÉÂ∞îÊ≤Éxc60"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ≤ÉÂ∞îÊ≤ÉËøëÊó•ÂÆòÂÆ£,ÂØπ‰∏äÊµ∑Âú∞Âå∫Áî®Êà∑Êé®Âá∫recharge t8(ÊèíÁîµÊ∑∑Âä®)ËΩ¶Âûã‰∏äÊµ∑Áõ¥ÂîÆÊ®°Âºè,‰∏äÊµ∑Âú∞Âå∫Áî®Êà∑Â∞Ü‰∫´ÂèóÂÖ¨Ê≠£ÈÄèÊòéÁöÑÁªü‰∏ÄÂîÆ‰ª∑‰∏éÊõ¥ÁÆÄÂçï‰æøÊç∑ÁöÑË¥≠ËΩ¶ÊµÅÁ®ã„ÄÇ\n", "label": "recharge t8"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂîêÂíåËîöÊù•es6ËøôÊ¨°Âú®Âä´ÈöæÈÄÉ,Ê≠§ËΩ¶‰ªé56‰∏áÈôçËá≥33.8‰∏á,‰ΩïÈ°ªËÆ≤Ê≠¶Âæ∑\n", "label": "ËîöÊù•es6ÔºõÂîê"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏§‰æßÂàÜ‰ΩìÂºèÂ§ßÁÅØÂÜÖÈÉ®Âä†ÂÖ•ledÁÅØÊ∫ê,‰∏ãÊñπÁöÑÊó•Èó¥Ë°åËΩ¶ÁÅØËÆæËÆ°Êàê‰∫Ü‰∏âËßíÂΩ¢„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊó†Áã¨ÊúâÂÅ∂,ÊüêÂ•îÈ©∞4sÂ∫óÂØπÂîÆÂá∫‰∏ÄÂπ¥Âçä‰ª•ÂÜÖÁöÑÈÉ®ÂàÜËΩ¶ÂûãËøõË°åÂõûË¥≠,ÂåÖÊã¨cÁ∫ß„ÄÅeÁ∫ß„ÄÅglc„ÄÅËøàÂ∑¥Ëµ´Á≠â,ÂÖ¨ÈáåÊï∞‰∏çË∂ÖËøá20000ÂÖ¨Èáå,Ë¶ÅÊ±ÇÊó†‰∫ãÊïÖ„ÄÅÊó†ÁªìÊûÑÊÄßÊçü‰º§,ÁªèÊ£ÄÊµãÂêéÂèØ‰∫´ÂºÄÁ•®‰ª∑ÂõûË¥≠,Ê¥ªÂä®Êà™Ê≠¢Êó∂Èó¥Ëá≥2021Âπ¥9Êúà30Êó•„ÄÇ\n", "label": "cÁ∫ßÔºõËøàÂ∑¥Ëµ´ÔºõglcÔºõeÁ∫ß"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nË¢´ËΩ¶Ê†áËÄΩËØØÁöÑÂ•ΩËΩ¶,‰ªé26‰∏áË∑åÂà∞21‰∏á,ËøûËû∫‰∏ùÈíâÈÉΩÊòØËøõÂè£,ÂºÇÂìçÂá†‰πé‰∏∫Èõ∂\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ªé17‰∏áË∑åÂà∞9.98‰∏á,ËøôsuvÁÅ´‰∫Ü,30Â§©ÂÜçÂçñÂá∫7917ËæÜ,Á¢æÂéãÈÄîËßÇ\n", "label": "ÈÄîËßÇ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏çÁî®ÂÜçÊÉ¶ËÆ∞ÈîêÁïåÊé¢Èô©ËÄÖ,ËØ•ËΩ¶‰∏ÄÂè£Ê∞î‰ªé22‰∏áÈôçÂà∞16.9‰∏á,Âà´Êó†‰ªñÊ≥ï?„ÄêÊñ∞ËΩ¶Âè£Á¢ë(434Êúü)„Äë\n", "label": "Êé¢Èô©ËÄÖÔºõÈîêÁïå"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈõ∑ÂáåËΩ©ÈÄ∏ËøôÊ¨°ÂéãÂäõÂ±±Â§ß,Ê≠§ËΩ¶ÂóñÁöÑ‰∏ÄÂ£∞‰ªé13‰∏áË∑åËá≥7.4‰∏á,Áóõ‰∏ãÁã†Êâã!„ÄêÊèêËΩ¶ËÆ∞(250Êúü)„Äë\n", "label": "Èõ∑ÂáåÔºõËΩ©ÈÄ∏"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂØºËØª:ËøôÊâçÊòØbÁ∫ß[unk]ËâØÂøÉËΩ¶[unk],ÈïøËøë4Á±≥9‰ªÖÂîÆ10‰∏áÂá∫Â§¥,Ê†áÈÖç6atÂèòÈÄüÁÆ±,ÁôæÂÖ¨ÈáåÊ≤πËÄó6lÂ∑¶Âè≥!\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nevos2022Ê¨æÊîπÊ¨æecoboost245st-lineÁâàÂú®ÂÆâÂÖ®ÈÖçÁΩÆ‰∏äÊê≠ËΩΩabsÈò≤Êä±Ê≠ª„ÄÅÂà∂Âä®ÂäõÂàÜÈÖç„ÄÅÂàπËΩ¶ËæÖÂä©„ÄÅËΩ¶Ë∫´Á®≥ÂÆöÁ≥ªÁªü„ÄÅËΩ¶ÈÅìÂÅèÁ¶ªÈ¢ÑË≠¶„ÄÅÂâçÊñπÁ¢∞ÊíûÈ¢ÑË≠¶„ÄÅÂÄíËΩ¶ËΩ¶‰æßÈ¢ÑË≠¶„ÄÅÂπ∂Á∫øËæÖÂä©„ÄÅËΩ¶ÈÅì‰øùÊåÅËæÖÂä©Á≥ªÁªü„ÄÅ‰∏ªÂä®ÂàπËΩ¶„ÄÅ‰∏ªÈ©æÈ©∂ÂÆâÂÖ®Ê∞îÂõä„ÄÅÂâØÈ©æÈ©∂ÂÆâÂÖ®Ê∞îÂõä„ÄÅÂâçÊéí‰æßÂÆâÂÖ®Ê∞îÂõä„ÄÅ‰æßÂÆâÂÖ®Ê∞îÂ∏ò„ÄÅÂâçÊéíËÜùÈÉ®Ê∞îÂõä„ÄÅËÉéÂéãÁõëÊµãÁ≥ªÁªü„ÄÅË¢´Âä®Ë°å‰∫∫‰øùÊä§Á≠â,ÈÖçÁΩÆËøòÊòØÊØîËæÉÈΩêÂÖ®ÁöÑ„ÄÇ\n", "label": "evosÔºõecoboost245st-line"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏∞Áî∞Âèà‰∏Ä‚ÄúÁúÅÊ≤πÁéã‚Äù,‰∏Ä‰∏äÂ∏ÇÂ∞±ÊàêÂäü‰∫Ü,‰∏ÄÂÖ¨Èáå‰∏çÂà∞3ÊØõ,ÊØîcrvÊºÇ‰∫Æ\n", "label": "crv"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂáØËø™ÊãâÂÖãÁñØ‰∫Ü!80‰∏á‰∏ÄÂè£Ê∞îÈôçÂà∞31.49‰∏á,Êâ≥ÂÄíÂÆùÈ©¨5Á≥ªÂéãÊ≠ªÂ•îÈ©∞eÁ∫ß\n", "label": "Â•îÈ©∞eÁ∫ßÔºõÂÆùÈ©¨5Á≥ª"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂèà‰∏ÄÂõΩ‰∫ßËΩ¶Â§ßÂΩªÂ§ßÊÇü,23‰∏áÂíªÁöÑ‰∏ÄÂ£∞Ë∑åÊàê‰∫Ü11.1‰∏á,Ë∏¢È¶ÜÂΩ±Ë±πÂç°ÁΩóÊãâ\n", "label": "Âç°ÁΩóÊãâÔºõÂΩ±Ë±π"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nglasuvÊó†Áïè,Âä≤Ë°åÂà∞Â∫ï\n", "label": "gla"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‚ÄúÊ≤πËÄÅËôé‚ÄùËΩøËΩ¶ÊéíË°åÂá∫ÁÇâ,ËâæÁëûÊ≥Ω7Êãø‰∏ãÊ¶úÈ¶ñ,ÂêâÂà©‰º†Á•∫‰∏çÁîòËêΩÂêé!\n", "label": "ËâæÁëûÊ≥Ω7"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËøô‰∫õÂÖ¨Âè∏ÈÉΩÈúÄË¶Å‰∏çÊñ≠Á≠πÈõÜËµÑÈáë,‰ª•ÂºÄÂèëÁª≠Ëà™ÈáåÁ®ãÊõ¥Èïø„ÄÅÊõ¥Âä†ÂÆâÂÖ®ÁöÑÁîµÂä®Ê±ΩËΩ¶„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§ß‰ºó‚ÄúÂ∞èÈÄîËßÇ‚Äù‰∫ÆÁõ∏!Ë¥®ÊÑü‰∏ÄÊµÅ,Á´û‰∫âÁº§Êô∫,1.5tÂºïÊìé+6at,ÁúüÂ∏ÖÊ∞î\n", "label": "ÈÄîËßÇ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÈÇØÈÉ∏ÊòüÂÇ≤„ÄëÁëûÈ£ém3 plus,ËÆ©ÂùêÁùÄËµöÈí±ÂèòÂæóÊõ¥ÁÆÄÂçï\n", "label": "ÁëûÈ£ém3 plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÂÆòÊñπËÆ§ËØÅ‰∫åÊâãËΩ¶‰∏®‰ªäÊó•‰ºòÈÄâ„Äë 2020Ê¨æ 45 tfsi quattro ËáªÈÄâÂä®ÊÑüÂûã‚Äî‚Äî Â••Ëø™\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂä®ÂäõÈÉ®ÂàÜËá™ÁÑ∂ÊòØÂíåpcx160‰∏ÄÊ†∑,ÂêåÊ≠•‰∫ÜÂÖ®Êñ∞esp+ÂèëÂä®Êú∫,ÊéíÈáè156.9cc,ÂçïÁº∏Ê∞¥ÂÜ∑ÂõõÊ∞îÈó®,ÊúÄÂ§ßÈ©¨Âäõ15.8Âåπ,ÊúÄÂ§ßÊâ≠Áü©14.7ÁâõÁ±≥„ÄÇ\n", "label": "pcx160"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂè™ÊúâÂÆåÊï¥ÁöÑÂêéÂè∞Ë°åËΩ¶Êï∞ÊçÆ,ÊâçÂèØËÉΩÊâæÂà∞ÂèëÁîü‰∫ãÊïÖÁöÑÁúüÁõ∏„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁõ∏ÊØîËæÉËÄåË®Ä,Ë¢´Áß∞‰∏∫[unk]ÁÅØÂéÇ[unk]ÁöÑÂ••Ëø™Êõ¥ÂéöÈÅì‰∏Ä‰∫õ,ÂÆÉËøòÈ¢ùÂ§ñÊîØÊåÅÁü©ÈòµÂºèÁÅØÁªÑ„ÄÅËá™ÈÄÇÂ∫îËøúËøëÂÖâ„ÄÅÂ§ßÁÅØÊ∏ÖÊ¥ó„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ≤°‰π∞ËΩ¶ÁöÑËµö‰∫Ü!Â∑•ËµÑ‰Ωé‰πüËÉΩÂºÄÂ•ΩËΩ¶,Êç∑Â∞ºËµõÊÄùg80ÊúÄÊñ∞Êä•‰ª∑Â∑≤Âá∫,Á´ãÂç≥Âí®ËØ¢Êñ∞ËΩ¶Â∫ï‰ª∑!\n", "label": "Êç∑Â∞ºËµõÊÄùg80"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ†™Áß∞Âªâ‰ª∑ÁâàÊú¨Áî∞cb1100,È´òÈ¢úÂÄºÂ§çÂè§È£éËøõÂè£ÂìÅË¥®,20kwÊ∞¥ÂÜ∑Âçö‰∏ñ\n", "label": "Êú¨Áî∞cb1100"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂπ¥Â∫¶ÁõòÁÇπ:4Ê¨æÈÄÇÂêà25Â≤ÅÂâçÂºÄÁöÑËΩ¶,‰∫öÊ¥≤Èæô‰∏äÊ¶ú,Á¨¨4Ê¨æÊúàËñ™3000ÂÖªÂæóËµ∑\n", "label": "‰∫öÊ¥≤Èæô"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËôΩÁÑ∂Êï¥‰ΩìÁúã‰∏äÂéªÂ∑Æ‰∏çÂ§ö,‰ΩÜÊòØ‰πüÂêÑÊúâÊòéÊòæÂÆö‰Ωç,moterraneo‰∏ì‰∏∫ÊìçÊéß„ÄÅÁâµÂºïÂäõ„ÄÅÊïàÁéáÂíåËÄêÁî®ÊÄßËÄåËÆæËÆ°,ËÄåmoterraneoeqÂàô‰ºòÂÖàËÄÉËôëÊóÖË°å„ÄÅÈÄöÂã§ÂíåË∂äÈáéÈ™ëË°åÁöÑ‰πêË∂£„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÁæéËΩÆÂÆùÈ™è¬∑‰∫îËè±„ÄëÁî®ËΩ¶ÂçäÂπ¥ÊúâËØùËØ¥,ÈÖçÁΩÆËÉú20wÂêàËµÑ,ÂºÄËµ∑Êù•ÊØîcr-vÂº∫,ÂÖ≥ÈîÆÁ©∫Èó¥Â§ß\n", "label": "cr-vÔºõÂÆùÈ™è"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏çËøá,‰πüÊúâÁΩëÂèãË¥®Áñë,Áî±‰∫éËã±‰ªïÊ¥æÂú®11Êúà‰ªΩÊâç‰∏äÂ∏Ç,È¶ñÊúàÂ∫îËØ•ÊòØÂ§ßÊâπÈáèÈì∫Ë¥ß,Âõ†Ê≠§ÊúàÈîÄ‰∏ä‰∏áÊúâ‰∏ÄÂÆöÁöÑÊ∞¥ÂàÜ,ËøòÊòØË¶ÅÁúã‰∏äÈô©Èáè„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ¶ñÂÖàÂ∏¶Áªô‰∫∫ÊúÄÈúáÊíºÁöÑÂ∞±ÊòØÂÖ®Êñ∞ÁöÑËÆæËÆ°ËØ≠Ë®Ä,Â∞ÜË±™Âçé„ÄÅÁßëÊäÄÂíåÊú™Êù•ÊÑü‰∏âËÄÖÊÅ∞Â¶ÇÂÖ∂ÂàÜÂú∞ËûçÂêàÂú®‰∫ÜËøôÂè∞ËΩ¶Ë∫´‰∏ä,ÂâçËÑ∏ÁöÑËßÜËßâÂÜ≤ÂáªÊïàÊûúÊûÅÂÖ∂Âº∫ÁÉà,ÂÖ®Êñ∞ÁöÑÂØÜÊù°ÂºèÊ†ºÊ†ÖÂãæÂãíÂá∫‰∏éËΩ¶Ê†áÁõæÁâåÁõ∏‰ººÁöÑ‰∏≠ÁΩëËΩÆÂªì,‰∏§‰æßÁöÑÂÖ®Êñ∞ledÂ§ßÁÅØÁªÑ,Á´ñÂºèÁü©ÈòµÊéíÂàóÁöÑ‰∏§‰æßÊó•Èó¥Ë°åËΩ¶ÁÅØÂ∏ÉÁΩÆ,ÈùûÂ∏∏ÁöÑÁßëÂπª,‰∏§‰æßÁöÑÊâ∞ÊµÅÂè£‰πüÊûÅÂÖ∑ËÆæËÆ°ÊÑü,Êï¥‰∏™ËΩ¶Â§¥Áªô‰∫∫‰∏ÄÁßçÁßëÂπªÁöÑËßÜËßâÊÑüÂèó„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n2.ÂÜÖÈ•∞ÂíåÈÖçÁΩÆ‰æùÁÑ∂È´òÊ°£Êñ∞ËΩ¶ÂÜÖÈ•∞‰æùÁÑ∂Âª∂Áª≠ÁáÉÊ≤πÁâàÁöÑÊï¥‰ΩìËÆæËÆ°,‰∏≠ÊéßÂè∞ÈááÁî®ÂÆòÊñπÁß∞‰πã‚ÄúÂ§©Á©πÊô∫ÊÖßÈÄ†Âûã‚ÄùÁöÑËÆæËÆ°ÁêÜÂøµ,Ë¥ØÁ©ø‰∏≠Â§ÆÁöÑÁ∫øÊù°Â∞ÜÊï¥‰ΩìÂàÜ‰∏∫‰∏ä‰∏ã‰∏§Â±Ç,ÁªÜËäÇ‰∏ä‰ΩøÁî®Â§ßÈáè‰∫≤ËÇåÊùêË¥®,Êê≠ÈÖçÁ≤æÈõïÁªÜÁê¢ÁöÑÈáëÂ±ûË¥®ÊÑüÈ•∞Êù°„ÄÅÁÅµÊÑü‰πãÁü≥Êô∂ÈíªÊ°£Êää,Ëøõ‰∏ÄÊ≠•ÊèêÂçáËΩ¶ÂÜÖË±™ÂçéÊÑü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊôÆÊãâÂ§öÁªàÁªìËÄÖ;Á¶èÁâπÊñ∞Ë∂äÈáéÊê≠2;3t‰∏é10at;Ê∂âÊ∞¥110cm‰∏çÂú®ËØù‰∏ã\n", "label": "ÊôÆÊãâÂ§ö"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈõ∂Ë∑ës01ÁöÑÂ∫ïÁõòÈááÁî®‰∫ÜÂâçÈ∫¶ÂºóÈÄäÂêéÊâ≠ÂäõÊ¢ÅÂºèÁöÑÊÇ¨Êû∂ÁªìÊûÑ,ËÄå‰∏îËøôÊ¨æËΩ¶Ë∞ÉÊ†°È£éÊ†º‰πüÂÄæÂêë‰∫éËøêÂä®Á±ªÂûã,ÊÇ¨Êû∂Âú®ÂºØÈÅì‰∏≠‰πüÂÖ∑Êúâ‰∏çÈîôÁöÑÊîØÊíëÊÄß,‰øùËØÅ‰∫ÜËøôÊ¨æËΩ¶ÁöÑÈ©æÈ©∂‰πêË∂£„ÄÇ\n", "label": "Èõ∂Ë∑ës01"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖàÈîãË±™ÂçéÊ∞îË¥®‰∏çÂá°!Ëß£ËØªÁ∫ØÁîµ‰∏≠Â§ßÂûãsuvÂáØËø™ÊãâÂÖãlyriqÁöÑÈ´òÂìÅË¥®\n", "label": "lyriq"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈìÉÊú®2022Ê¨ægsx-s1000s katana ÂàÄ | Âõæ Ëµè\n", "label": "gsx-s1000s katana ÂàÄ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂêåÊó∂,ÊµãËØïËΩ¶ÂûãÁöÑÂêéËßÜÈïúÂäüËÉΩÈùûÂ∏∏‰∏∞ÂØå,ÂÖ∑Â§áÁîµÂä®ÊäòÂè†„ÄÅÂêéËßÜÈïúËÆ∞ÂøÜ„ÄÅÂêéËßÜÈïúÂä†ÁÉ≠„ÄÅËá™Âä®ÂÄíËΩ¶„ÄÅËá™Âä®ÈîÅËΩ¶ÊäòÂè†„ÄÅËá™Âä®Èò≤Áú©ÂÖâÁ≠âÂäüËÉΩ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËÄå‰∏îÊó•‰∫ßËΩ©ÈÄ∏Ëøò‰øùÊåÅÁùÄÂêåÂ†ÇÈîÄÂîÆÁä∂ÊÄÅ,ËΩ©ÈÄ∏¬∑ÁªèÂÖ∏ÁöÑ‰πòÂùêËàíÈÄÇÊÄß‰ª•ÂèäÁáÉÊ≤πÁªèÊµéÊÄßÂú®ÂΩì‰∏ãÁúãÊù•‰ªçÂÄºÂæóËÇØÂÆö,ÂØπ‰∫éÈ¢ÑÁÆóÊúâÈôêÁöÑÊ∂àË¥πËÄÖËÄåË®Ä,ÂÖ∂‰ª∑Ê†º‰πüÁõ∏ÂØπÊõ¥‰∏∫‰∫≤Ê∞ë„ÄÇ\n", "label": "ËΩ©ÈÄ∏"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËøôÊ¨æix35ÁöÑÂ§ñËßÇ‰æùÁÑ∂ÊòØÂª∂Áª≠ÁöÑ‰∏ä‰∏ÄÊ¨æix35ÁöÑËÆæËÆ°,Âè™ÊòØÂú®ÁªÜËäÇ‰πãÂ§ÑÂèòÂæóÊõ¥Âä†Á≤æËá¥‰∫Ü„ÄÇ\n", "label": "ix35"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñáÊú´Â∞èÁºñËøò‰ºöÈÄèÈú≤‰∫îËè±ÂáØÊç∑Áé∞Êó∂ÁöÑÊúÄÂ§ß‰ºòÊÉ†Ë°åÊÉÖ‰ª•ÂèäÁî®ËΩ¶ÊàêÊú¨Âì¶,ÊòØ‰∏çÊòØÂæàÊúüÂæÖÂë¢?\n", "label": "‰∫îËè±ÂáØÊç∑"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂèà‰∏ÄÊó•Á≥ªËΩ¶ÁúãÈÄè‰∫Ü,59‰∏á‰∏Ä‰∏ãÂ≠êÂ∞±Ë∑åËá≥28.5‰∏á,ËøòÁúãÂï•Â••Ëø™q5lÂÆùÈ©¨\n", "label": "Â••Ëø™q5l"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‚ÄúÂ§ß‚ÄùÂà∞Ê≤°ÊúâÂØπÊâã,Ê¢ÖËµõÂæ∑ÊñØ-Âåó‰∫¨Â•îÈ©∞glb suv\n", "label": "Ê¢ÖËµõÂæ∑ÊñØ-Âåó‰∫¨Â•îÈ©∞glb"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§ñËßÇÊñπÈù¢,Êñ∞Ê¨æbmwx3ÈááÁî®ÊúÄÊñ∞ÂÆ∂ÊóèÂºèËÆæËÆ°ËØ≠Ë®Ä,ÂâçËÑ∏Ê†áÂøóÊÄßÂèåËÇæÂºèÁõ¥ÁÄëÂºèÊ†ºÊ†ÖÊê≠ÈÖç‰∏§‰æßÈÄ†ÂûãÈîêÂà©ÁöÑÂâçÁÅØÁªÑÊûÅÂÖ∑Ëæ®ËØÜÂ∫¶„ÄÇ\n", "label": "bmwx3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËØöËÅò,‰∏ì‰∏ö,ÁÜüÊâã,‰ª£È©æÂè∏Êú∫,Êù•ÈÄîÂÆâ‰ª£È©æ,Â•îÈ©∞ÂÆùÈ©¨‰Ω†Êù•ÂºÄÊúâÊÑèËÄÖÂÖ¨‰ºóÂè∑ÂêéÂè∞Áïô‰∏ãËÅîÁ≥ªÊñπÂºè„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊâìÂºÄucÊµèËßàÂô®Êü•ÁúãÊõ¥Â§öÁ≤æÂΩ©ÂõæÁâáÂ•îËÖæb70ÁöÑÂ∞æÈÉ®ËÆæËÆ°ÈùûÂ∏∏ÁöÑÊºÇ‰∫Æ,Êï¥‰∏™Â∞æÈÉ®ÂëàÁé∞ÁøòËáÄÁöÑÂ§ßÊ∫úËÉåËΩ¶Ë∫´,Êõ≤Á∫øÁæéÊÑü‰∏éÂä®ÊÑüÂÖºÂ§á,Âπ∂‰∏îÈááÁî®‰∫ÜÊéÄËÉåÂºèÂ∞æÈó®ËÆæËÆ°;‰∏≠Èó¥Ë¥ØÁ©øÂºèÁöÑÂ∞æÁÅØ‰ΩøÂæóÂ∞æÈÉ®Áúã‰∏äÂéªÊõ¥ÊúâÂ±ÇÊ¨°ÊÑü,ËÄåËΩ¶Â∞æÂ∫ïÈÉ®ÁöÑÂèåËæπÊéíÊ∞îÁÆ°ËÆæËÆ°ÂΩ∞ÊòæÂÖ∂Âº∫Âä≤ÁöÑÂä®Âäõ„ÄÇ\n", "label": "Â•îËÖæb70"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ†πÊçÆjdpowerÂèëÂ∏ÉÁöÑ2022‰∏≠ÂõΩÈîÄÂîÆÊª°ÊÑèÂ∫¶ÊåáÊï∞(ssi)Á†îÁ©∂,Âú®ËØïÈ©æÊúüÈó¥ÂÜ≥ÂÆöË¥≠‰π∞ÁöÑÊ∂àË¥πËÄÖÊØî‰æã‰ªé2021Âπ¥ÁöÑ15%Â¢ûÂä†Âà∞2022Âπ¥ÁöÑ21%,‰∏ÄÂπ¥‰πã‰∏≠Ë∂≥Ë∂≥Â¢ûÂä†‰∫Ü6‰∏™ÁôæÂàÜÁÇπ,ËøôÂèØÊòØ‰∏Ä‰∏™‰∏çÂÆπÂ∞èËßëÁöÑÊØî‰æã„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁü≠ÂâçÊÇ¨ÁöÑËÆæËÆ°ËÆ©ËΩ¶ÂÜÖÁ©∫Èó¥Ë¢´ÂÖÖÂàÜÂà©Áî®,ÂêéÊéíÂ∫ßÊ§ÖÂèØ‰ª•ËøõË°å180mmÁöÑÂâçÂêéË∞ÉËäÇ,Ë°åÊùéÂ§ö‰∫Ü‰πü‰∏çÊòØÈóÆÈ¢ò,ËÄå‰∏îË°£Â∏ΩÊû∂ÈöêËóèÂäüËÉΩ‰πüÊèêÂçá‰∫ÜÂÇ®Áâ©ËÉΩÂäõ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËÆ¢ÂçïË∂Ö7000ËæÜ,ÁàÜÊ¨æÊàêÂÆöÂ±Ä!Èõ™ÈìÅÈæôÂá°Â∞îËµõc5xÁªôÂêàËµÑÂìÅÁâå‰∏ä‰∫Ü‰∏ÄËØæ\n", "label": "Âá°Â∞îËµõc5x"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ¶ñÊâπÂ®ÅÈ£íËΩ¶‰∏ª‰∫´‰∏âÂ§ßË¥≠ËΩ¶Á§ºÈÅá!1Êúà28Êó•-30Êó• Â®ÅÈ£íÂà∞Â∫ó!ÊÅ≠ËøéÂìÅÈâ¥\n", "label": "Â®ÅÈ£í"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁè†Êµ∑Èõ∑ÂÖãËê®ÊñØlxËΩ¶Âèã‰ºö ËΩ¶ÂèãÁæ§ ËΩ¶Âèã‰ø±‰πêÈÉ®ÊãõÂãüËΩ¶Âèã!ËØöÈÇÄÊÇ®ÁöÑÂä†ÂÖ•\n", "label": "Èõ∑ÂÖãËê®ÊñØlx"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂä®ÂäõÊñπÈù¢,xc40Â∞ÜÊé®Âá∫‰∏âÁº∏„ÄÅÂõõÁº∏ÁöÑÂèëÂä®Êú∫Âíå‰∏ÄÊ¨æÊê≠ËΩΩ1.5tÂèëÂä®Êú∫ÂíåÁîµÂä®Êú∫ÁöÑÊ∑∑ÂêàÂä®ÂäõÁ≥ªÁªü,ÊúÄÂ§ßÂäüÁéáËææÂà∞180È©¨Âäõ,ÊúÄÂ§ßÁ∫ØÁîµÁª≠Ëà™ÈáåÁ®ã‰∏∫50ÂÖ¨Èáå„ÄÇ\n", "label": "xc40"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËìùÈ≤∏Êñ∞‰∏Ä‰ª£,ÂèåÂÜ†ÂÆûÂäõÊ¥æ‰∏®ÂÖ®Êñ∞cs35plus&2021Ê¨æÈÄ∏Âä®plusÁáÉÊìé‰∏äÂ∏Ç\n", "label": "cs35plusÔºõÈÄ∏Âä®plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n3.25Âè∑Ê≠£Âºè‰∏äÂ∏Ç!Á¶èÁâπ‰∏≠Âûãsuv,È¢úÂÄºÁáÉ,Ë∂ÖÂ§ßÁ©∫Èó¥,‰ªÖ14.88‰∏á\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊèΩÂ¢É,ÂÖ®Êñ∞ÂÖ®ËÉΩÊóóËà∞suv7ÁßçÈ©æÈ©∂Ê®°Âºè,ÈöèÊú∫Â∫îÂèòÊÉ≥ÊÄé‰πàÂºÄ,‰Ω†ËØ¥‰∫ÜÁÆóÈ¶ñ‰ªò‰ΩéËá≥6‰∏áËµ∑!\n", "label": "ÊèΩÂ¢É"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ®ËΩ¶‰∫öÂÖâÈªë,Âä†‰∏äÂ§áËÉé,ÂÖ®ËΩ¶ÂÖ±ÊúâÂÖ≠‰∏™ËΩÆËÉé,ÂÖ®ÈÉ®ÊòØ235/65 toyo open country a/t ËΩÆËÉé,ËÄå17Ëã±ÂØ∏ÁöÑblack rhinoËΩÆÂúà‰πüÊòØÁªùÈÖç„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ®Êñ∞ÊûóËÇØz‰∏®1Êúà31ÂâçÈ¢ÑÂîÆÂÆ¢Êà∑ÊùÉÁõäÊñπÊ°àÂÄíËÆ°Êó∂,Êò•ËäÇÂâç‰∏ãÂÆö‰∫´Êõ¥Â§öË±™Á§º\n", "label": "ÊûóËÇØz"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈõ∑ÂáåËΩ©ÈÄ∏ÂÜçÊó†ÁæéÊ¢¶ÂèØÂÅö,ËøôËΩ¶‰ªé13‰∏áÈôçËá≥7.4‰∏á,Â£∞Âò∂ÂäõÁ´≠Âè™‰∏∫Ê¥ª‰∏ãÂéª\n", "label": "Èõ∑ÂáåÔºõËΩ©ÈÄ∏"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁ¨¨Âõõ‰ª£È£ûÂ∫¶Á´üÂÖ®Á≥ªÊê≠ËΩΩ7Ëã±ÂØ∏ÂÖ®ÂΩ©Ê∂≤Êô∂‰ª™Ë°®Áõò?! ÂπøÊ±ΩÊú¨Áî∞\n", "label": "È£ûÂ∫¶"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈÖçÂ§áÂà´ÂÖãÊ†áÂøóÊÄßÁöÑÁéØÊä±Âºè‰∏Ä‰ΩìÂ∫ßËà±,Êê≠ÈÖçÂ§ßÈáèÈí¢Áê¥ÁÉ§ÊºÜÈ•∞ÊùøÂíåËΩØÊÄßÁúüÁöÆÊùêË¥®ÂåÖË¶Ü,Ëê•ÈÄ†Âá∫ÂçÅË∂≥ÁöÑË±™ÂçéÊ∞õÂõ¥„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n# bmw ix3 È£ûË°åËØïÈ©æ‰ºö#ÂÄíËÆ°Êó∂5Â§©\n", "label": "bmw ix3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊç¢Êå°Êú∫ÊûÑ‰∏éÈó®ÊùøÊâ∂ÊâãÂë®Âõ¥‰πüË¶ÜÁõñÊúâÁÉ§ÊºÜÈù¢Êùø,ËôΩËØ¥ÂÆπÊòìÁïô‰∏ãÊåáÁ∫π,‰ΩÜÊ°£Ê¨°Ë°®Ëææ‰πü‰∏çÈîô„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÊ¢ÖËµõÂæ∑ÊñØ-eq„ÄëÂÖ®Êñ∞eqa&eqbÁ∫ØÁîµsuv‰∏äÂ∏ÇÂèëÂ∏É‰ºö, È©≠ÁîµËÄåÊù•,ÂºÄÂêØÁ∫ØÁîµÊñ∞Êµ™ÊΩÆ\n", "label": "eqbÔºõeqa"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§ßÁÅØÊñπÈù¢ÈááÁî®Áü©ÈòµÂºèledÂ§ßÁÅØ,ÁÆ≠ÂΩ¢ÁöÑÊó•Èó¥Ë°åËΩ¶ÁÅØÈùûÂ∏∏ÈÜíÁõÆ,Â∫èÂàóÂºèÊ∏ê‰∫ÆËΩ¨ÂêëÁÅØÊõ¥Âä†ÈÖ∑ÁÇ´„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊòåÂπ≥Ë•øÂÖ≥ÂìàÂï∞Áõ¥Ëê•Â∫ó,Âë®Âπ¥Â∫ÜÂÖ∏,Êô∫ËÉΩËΩ¶c52(Ê¥ªÂä®‰ª∑1499ÂÖÉ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈõÜÂ∫¶ÂÆåÊàêËøë 4 ‰∫øÁæéÂÖÉ a ËΩÆËûçËµÑ:ÁôæÂ∫¶„ÄÅÂêâÂà©ÂÖ±ÂêåÂ¢ûÊåÅ,Èáè‰∫ßËΩ¶Âûã 2023 Âπ¥‰∏äÂ∏Ç\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏ãÊñπÈÇ£20ÂØ∏ÈíªÁü≥ÂàáÂâ≤ÊàòÊñßËΩÆÊØÇ,‰∫ÆÂá∫ÁäÄÂà©ÁöÑ‚ÄúÂàÄÈîã‚ÄùÂ¶ÇÊ≠§Ê¥ªÂäõÊª°Êª°,ÁîöËá≥ÂÉè‰∏ÄÊ¨æË∑ëËΩ¶È©ªÂÅúÂú®ÂâçÊñπ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n6ÈáçË±™Á§º,24ÊúüË∂Ö‰ΩéÊÅØ!euniq 5Ê∑∑Âä®Áâà,ÁïÖÈîÄÊ¨ßÊ¥≤ ‰∏äÊ±ΩÂ§ßÈÄömaxus\n", "label": "‰∏äÊ±ΩÂ§ßÈÄömaxus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂêçÁàµ5‰Ωú‰∏∫‰∏ÄÊ¨æÂõΩ‰∫ßËΩøËΩ¶,ËÉΩÂ§üÂú®ÊøÄÁÉàÁöÑÂ∏ÇÂú∫Á´û‰∫â‰∏≠‚ÄúËÑ±È¢ñËÄåÂá∫‚Äù,‰∏ªË¶ÅÂæóÁõä‰∫éÂº∫Â§ßÁöÑ‰∫ßÂìÅÂäõÂíåË∂ÖÈ´òÁöÑÊÄß‰ª∑ÊØî„ÄÇ\n", "label": "ÂêçÁàµ5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËøô‰∏™ÂÆùÈ©¨‰øÆÁêÜÂ∑•ÁúüÁâõÈÄº:Ëß£ËØªÂ•îÈ©∞ÊúÄÊñ∞Áîü‰∫ßÁ∫ø,Â±ÖÁÑ∂ÂπΩÈªòÂèàÈ£éË∂£,ËøòËøô‰πà‰∏ì‰∏ö\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂáØËø™ÊãâÂÖãÂ¥õËµ∑‰∫Ü!ÂÆÉ2.0tÂ∏¶237ÂåπÈ©¨Âäõ,Ê≤πÁÆ±82l,ÈöîÈü≥Â†™ÊØîÂ§¥Á≠âËà±\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁªøÁâå‰∏çÊÑÅ,0È¶ñ‰ªòË¥≠ËΩ¶,‰∏äÊ±ΩrÊ±ΩËΩ¶Êñ∞Âä®Áâàer615ÂàÜÈíü200kmË∂ÖÁ∫ßÂø´ÂÖÖ,‰∫´1‰∏áÂÖÉÂ¢ûÊç¢Ë¥≠Ë°•Ë¥¥\n", "label": "‰∏äÊ±ΩrÊ±ΩËΩ¶Êñ∞Âä®Áâàer6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂú®ÂÜÖÈ•∞ÊñπÈù¢,ÂåóÊ±Ωbeijing-x3ÈááÁî®‰∫ÜÁéØÊä±Âºè‰∏≠ÊéßÂ∏ÉÂ±Ä,‰∏≠ÊéßÂÅèÂêëÈ©æÈ©∂‰æß,ÊÇ¨ÊµÆÂºè‰∏≠ÊéßÂ§ßÂ±è+ÈöèÂä®È´òÊ∏ÖÂÖ®ÊôØ+aiÊô∫ËÉΩË°åËΩ¶,Ëê•ÈÄ†Âá∫‰∏çÈîôÁöÑÊó∂Â∞öÁßëÊäÄÊÑü„ÄÇ\n", "label": "beijing-x3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁêÜÊÉ≥ÂàõÂßã‰∫∫ÊùéÊÉ≥12Êúà22Êó•ÁöÑÂæÆÂçö‰∏äÊôíÂá∫‰∏Ä‰ªΩÊàêÁª©Âçï:ÁêÜÊÉ≥oneÈîÄÈáèËøúË∂ÖÂ§ß‰ºóÂìÅÁâå‰∏≠Â§ßÂûãsuvÈîÄÈáè‰πãÂíå,ÂÆûÂäõÂõûÊÄºÂ§ß‰ºóceoÂÜØÊÄùÁÄö(ÊïÖ‰∫ãÁ∫øÂ§™Èïø,‰∏ç‰ΩúËµòËø∞),Áî®ÈîÄÈáèÊàêÁª©ËØÅÊòé‰∫ÜÂ¢ûÁ®ãÂºèÂä®ÂäõÊñπÊ°àÁöÑÂèØË°åÊÄß„ÄÇ\n", "label": "ÁêÜÊÉ≥one"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂä®ÂäõÊÄªÊàêÊèê‰æõ‰∫Ü3.0tÊú∫Ê¢∞Â¢ûÂéãv6ÂèëÂä®Êú∫,ÊúÄÂ§ßËæìÂá∫ÂäüÁéá283È©¨Âäõ,Â≥∞ÂÄºÊâ≠Áü©ÂàôËææÂà∞400ÁâõÁ±≥,ÊãâÂä®ËøôÂè∞Âä†Èïø‰πãÂêéÁöÑÂ§ßÂûãËΩøËΩ¶ÊØ´Êó†ÂéãÂäõ,ËÄå‰∏îÂèØ‰ª•Â∏¶Êù•ÊØîËæÉÊøÄËøõÁöÑÈ©æÈ©∂ÊÑüÂèó„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n2021Ê¨æÂ®ÅÂÖ∞Ëææ ‰∏≠‰øùÁ†îÊµãËØï7È°πÂÖ®‰ºò!0È¶ñ‰ªò,ÂÆâÂÖ®Â∫ßÈ©æËΩªÊùæÂºÄÂõûÂÆ∂„ÄÇ\n", "label": "Â®ÅÂÖ∞Ëææ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈÄöËøá‰∏äË°®ÂèØ‰ª•ÁúãÂá∫,‰∫öÊ¥≤ÁãÆÁöÑ5Ê¨æÈÖçÁΩÆ‰∏≠,ÊúÄ‰ΩéÈÖçËΩ¶ÂûãÊÄß‰ª∑ÊØîÊòØÊúÄÈ´òÁöÑ,ÂèçËÄåÊòØ‰∏≠ÈÖçËΩ¶ÂûãÊúÄ‰∏çÂÄºÂæóÊé®Ëçê„ÄÇ\n", "label": "‰∫öÊ¥≤ÁãÆ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰æßÈù¢Ê∫úËÉåÂºèËΩ¶Ë∫´‰ª•ÂèäÂåÖÂõ¥ÂèåÂá∫ÊéíÊ∞îÂΩ∞ÊòæÊõ¥Â§öÂπ¥ËΩªÊ∞õÂõ¥„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ΩÜÂè™Ë¶Å‰Ω†ËØïËøáË∂≥Â§üÂ§öÁöÑËΩ¶,‰Ω†‰ºöÂèëÁé∞Áé∞‰ª£Ê±ΩËΩ¶Â∑•‰∏öÈáåÂì™ÊúâÈÇ£‰πàÂ§öÈùûÈªëÂç≥ÁôΩ,Âú®‰øùËØÅÂùáË°°ÁöÑÊÉÖÂÜµ‰∏ã‰øùÁïôËá™Â∑±ÁöÑÊÄßÊ†º,Â∞±Â∑≤ÁªèÊòØÂæàÈöæÁöÑ‰∫ãÊÉÖ‰∫Ü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈôÑËøëËΩ¶ËæÜÊïëÊè¥ÁîµËØù:400-699-3656,Êèê‰æõÂêäËΩ¶ÊïëÊè¥„ÄÅÊãñËΩ¶ÊïëÊè¥„ÄÅË°•ËÉéÊç¢ËÉéÊïëÊè¥„ÄÅÈÄÅÊ≤πÊïëÊè¥„ÄÅÊ±ΩËΩ¶Êê≠ÁîµÊïëÊè¥ÊúçÂä°‚Ä¶‚Ä¶\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂêàÂàõz03 Êô∫ÊΩÆ‰∏äÂ∏Ç z‰∏ñ‰ª£ÊΩÆÊµÅÁßëÊäÄÂ§ñÂΩ¢,Êõ¥ÊúâÂ§ßÂÆö‰∏ìÂ±ûÈôêÊó∂ÊùÉÁõä,ÂøÉÂä®Â∞±‰∏ãÂÆö!\n", "label": "ÂêàÂàõz03"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ••Ëø™q2lËΩ¶‰∏ªÁî®ËΩ¶‰ΩìÈ™å(651Êúü):ËøôÊâçÊòØËâØÂøÉÂïÜÂÆ∂!ÂÆùÈ©¨x1È´òÂ∞îÂ§´ÂêìÂà∞Áò´\n", "label": "ÂÆùÈ©¨x1ÔºõÂ••Ëø™q2lÔºõÈ´òÂ∞îÂ§´"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏ÄÊ±Ω-Â§ß‰ºóÁ¥ØËÆ°ÊúçÂä°2200‰∏á‰∏≠ÂõΩÁî®Êà∑ÊèΩÂ¢É‰ªé,Âá∫Âèë,Ë±™ÂçéÂ§ß‰∏ÉÂ∫ßsuvÂ∑•‰Ωú+ÁîüÊ¥ª,ÈÄöÈÄöËß£ÈîÅ\n", "label": "ÊèΩÂ¢É"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÊ±ïÂ§¥ËÅöÂÖ¥„ÄëÂ™í‰ΩìËßÜËßí | ‰∏úÈ£éhondaÊñ∞Ê¨æ‰∫´Âüü,ÂºÄÂêØÂÖ•Èó®Á∫ßËΩøËΩ¶Êñ∞Ê†ºÂ±Ä\n", "label": "‰∫´Âüü"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñá‰∏≠ÂõæÁâáÊù•Ëá™ÁΩëÁªú,‰æµÂà†ËØ∑ËÅîÁ≥ªÈÖçÁΩÆÊñπÈù¢,Á¨¨‰∏É‰ª£‰ºäÂÖ∞ÁâπÂÖ®Á≥ªÊ†áÈÖç‰∫ÜËÉéÂéãÊä•Ë≠¶„ÄÅÂÄíËΩ¶ÂΩ±ÂÉè„ÄÅËá™Âä®È©ªËΩ¶„ÄÅ‰∏äÂù°ËæÖÂä©Á≠âÂ∏∏Áî®ÂäüËÉΩ,‰∏çËøáÊúÄ‰ΩéÈÖçÁâàÊú¨ÁöÑËΩ¶Âûã‰ºöÁï•Êòæ[unk]ÂØíÈÖ∏[unk],Ê≤°ÊúâÂ§©Á™ó‰∏çËØ¥,ËøûÂâçÂêéÂÄíËΩ¶Èõ∑Ëææ‰πüÊ≤°Êúâ,Á°ÆÂÆûËØ¥‰∏çËøáÂéª„ÄÇ\n", "label": "‰ºäÂÖ∞Áâπ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ´òÊÄß‰ª∑Ë±™ÂçésuvÈ¶ñÈÄâËΩ¶Âûã,Â§ß5Â∫ßËàíÈÄÇÂÆΩÊïûÁ©∫Èó¥,ÁªºÂêàÂÆûÂäõÂÆåËÉúbba,Êñ∞ËΩ¶Áõ¥Èôç6‰∏á!\n", "label": "bba"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂú®ËøôÊñπÈù¢,ÂêØËæ∞Â§ßvÊã•ÊúâÈÖ∑‰ººËΩøË∑ëËΩ¶ÁöÑÈÄ†ÂûãÂíåÊô∫ËÉΩÂåñÈÖçÁΩÆËøô‰∏§È°πÂΩì‰∏ãÂπ¥ËΩª‰∫∫ÂÖ≥Ê≥®ÁöÑÊñπÂêë„ÄÇ\n", "label": "ÂêØËæ∞Â§ßv"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÆèÂÖâmini‰∏çÈ¶ô‰∫Ü!ÂÖ®Êñ∞‰ª£Ê≠•ËΩ¶ÊØîÂÆùÈ©¨miniÊºÇ‰∫Æ,2‰∏áËøòÁúãÂï•Êú¨Áî∞È£ûÂ∫¶\n", "label": "ÂÆèÂÖâminiÔºõÂÆùÈ©¨miniÔºõÈ£ûÂ∫¶"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËôΩÁÑ∂ÊòØ40ÊâÅÂπ≥ÊØîÁöÑËΩÆËÉé,‰ΩÜÂºÄËµ∑Êù•Âπ∂‰∏çÊÄé‰πàÈ¢†,Êó•Â∏∏‰π∞Ëèú‰πüÊ≤°ÂéãÂäõ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞ÂÆùÈ™èrs-5Âú®ÂÜÖÈ•∞ÊñπÈù¢ÈááÁî®‰∫ÜÁéØÊä±ÂºèÁöÑÂ§™Á©∫Â∫ßËà±Â∫ßÊ§ÖËÆæËÆ°,ÂÜÖÈÉ®ÈááÁî®‰∫ÜÂ§ßÈù¢ÁßØÁöÑËΩØÁöÆË¥®ÂåÖË£π,ÊúâÁùÄ‰∏çÈîôÁöÑË¥®ÊÑü„ÄÇ\n", "label": "ÂÆùÈ™èrs-5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏§Ê¨æÁîµÊë©ÊµãËØÑ:Áª≠Ëà™120ÂÖ¨Èáå,6Âπ¥Ë∂ÖÈïøË¥®‰øù,ÈÄÇÂêàÈÄÅÂ§ñÂçñÂíåÊó•Â∏∏‰ª£Ê≠•\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ™ëÊõ¥ËÅ™ÊòéÊñΩÂ∫îÂèëÈÄÅÊê∫Â∏¶Êú¨Áî∞ËøûÊé•3.0Êô∫ÊÖßÂºïÂØº‰∫íËÅîÁ≥ªÁªü;Áî®Êà∑ÂèØ‰ª•ËΩªÊùæÂÆûÁé∞Êô∫ËÉΩËØ≠Èü≥ÂØπËØù„ÄÅÊô∫ËÉΩÂØºËà™„ÄÅÊâãÊú∫ËøúÁ®ãÊéßÂà∂Ê±ΩËΩ¶ÂõûÂÆ∂;‰∏∞ÂØåÁöÑÂäüËÉΩ;Â¶ÇÂú®Á∫øÊóÖË°åÁ§æ‰∫íËÅîÁΩëÁöÑÂú®Á∫øÂçáÁ∫ß„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂæ∑Áîüpl600ËØÑÊµã:ÊÄßËÉΩËææÂà∞Á¥¢Â∞º7600grÁöÑ95%,‰ª∑Ê†ºÂç¥‰æøÂÆú‰∏ÄÂçäÂ§ö\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂä®Ëß£ÈîÅÁÅµÂä®È©æË∂£Ëã±‰ªïÊ¥æ‰ªçÊèê‰æõÁáÉÊ≤π„ÄÅÊ∑∑Âä®ÂèåÂä®ÂäõÈÄâÊã©„ÄÇ\n", "label": "Ëã±‰ªïÊ¥æ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ªéËΩ¶Ë∫´‰æßÈù¢Êù•Áúã,Êñ∞‰∏Ä‰ª£g90ËΩ¶Ë∫´ÊØî‰æãÊõ¥Âä†‰øÆÈïø,ÂÖ∂‰æßÁ™óÂêéÈÉ®Á∫øÊù°Ëµ∞ÂêëÊúâÊâÄË∞ÉÊï¥,ÈááÁî®Áï•ÂæÆ‰∏äÁøòÂºèÂ§ÑÁêÜ„ÄÇ\n", "label": "g90"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂêé‰∏§Ê¨æxdrive40iËΩ¶ÂûãÂàôÈÖçÂ§á3.0tÂèëÂä®Êú∫,ÊúÄÂ§ßËæìÂá∫ÂäüÁéá250kw,Â≥∞ÂÄºÊâ≠Áü©‰∏∫450n¬∑m„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂú®Âä®ÂäõÊñπÈù¢,ÊØî‰∫öËø™Áß¶plusÊê≠ËΩΩ1.5lÊèíÊ∑∑Á≥ªÁªü,ÂåπÈÖçe-cvtÂèòÈÄüÁÆ±,Êª°Ê≤πÊª°ÁîµÁªºÂêàÁª≠Ëà™ÈáåÁ®ãÂèØËææ1245ÂÖ¨Èáå„ÄÇ\n", "label": "Áß¶plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n2022ÂÖ®Êñ∞bmwi3ÁÉ≠‚Äúi‚ÄùÊåëÊàòËµõ,ÁªçÂÖ¥ÂÆùÈ°∫ÈÇÄÊÇ®ÂÖ±ËµèÁ´ûÈÄüÊó∂Âàª\n", "label": "bmwi3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ∂‰∏≠Êõ¥Â§ßÂ∞∫ÂØ∏ÁöÑÂ§öËæπÂΩ¢ÂâçËøõÊ∞îÊ†ºÊ†ÖÊê≠ÈÖçÁÇπÈòµÂºè‰∏≠ÁΩë,Áã≠ÈïøÁöÑledÁÅØÁªÑ‰∏éÂâçÂåÖÂõ¥‰∏§‰æßÁöÑÊï£ÁÉ≠ÂºÄÂè£ÈÄ†ÂûãÁõ∏ÁªìÂêà,ËÆ©Êï¥ËΩ¶ÁöÑËßÜËßâÊïàÊûúÊõ¥‰∏∫Èú∏Ê∞îÂíåÂÆâÂÖ®„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂä™ÊØî‰∫ö z40 proÊòéÊó•‰∏äÂçà10ÁÇπÊ≠£ÂºèÂºÄÂîÆ,‰ª•ÊóßÊç¢Êñ∞ÊúÄÈ´òË°•Ë¥¥2022ÂÖÉ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈô§Êñ∞Â¢ûËΩ¶ÊºÜÂ§ñ,ËØ•ËΩ¶ËøòÂ∞ÜÈÖçÂ§áÁîµÂÖâÁªøÂä®ÊÑüÂ•ó‰ª∂Êê≠ÈÖçÁîµÂ≠êÊéíÊ∞îÈòÄ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n2023Ê¨æ‰∏∞Áî∞‚ÄúÂüÉÂ∞îÊ≥ï‚ÄùÊïàÊûúÂõæÊõùÂÖâ,Â§ñËßÇÊúâÂèòÂåñ,Êõ¥Êç¢2.4tÂèëÂä®Êú∫\n", "label": "ÂüÉÂ∞îÊ≥ï"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶Ë∫´‰æßÈù¢ËìÑÂäøÂæÖÂèëÁöÑÂßøÊÄÅÂä®ÊÑüÂçÅË∂≥,ÊîæÂú®Â§ßÈÉ®ÂàÜËΩ¶Âûã‰∏≠Â±û‰∫é‰∫ÆÁúºÁöÑÈÇ£‰∏ÄÁ±ª„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ´òÂºÄ‰ΩéËµ∞ÂêéÁöÑÂùëÊòØÈªÑÈáëÂùë,Âà´ÁúãÂàõ‰∏öÊùøÈ´òÂºÄ‰ΩéËµ∞,ÂêéÁª≠ËøòËÉΩÊî∂ÂõûÊù•„ÄÇÊâÄ‰ª•,ÊúÄÊó©‰ªäÂ§©‰∏ãÂçà,ÊúÄËøüÂêéÂ§©Êó©‰∏ä,ÂøÖÊúâËæÉÂ§ßÊ∂®ÂπÖ„ÄÇ‰ºòÈÄâÊñ∞ËÉΩÊ∫ê\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞ËΩ¶Ê†áÂÉè‚ÄúÁå™Â§ßËÇ†‚Äù?Â••Ëø™Â∞ÜÊõ¥ÊîπÂéüÊù•‚ÄúÂõõ‰∏™Âúà‚ÄùËΩ¶Ê†á,ÁΩëÂèã:‰∏ç‰π∞‰∫Ü ÂÆ∂ÂÖ∑Â∏à Â§ßÈ±ºÂè∑\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊÄß‰ª∑ÊØîË∂ÖÈ´òÁöÑsuv;‰∏äÂ∏ÇÂΩìÊúàÂ∞±ÂçñÂá∫10547Âè∞.2.0tÈÖçÂõõÈ©±ÂîÆ‰ª∑ÊÑü‰∫∫\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ªéÈ¢úÂÄº‰ª•ÂèäÂ§ñËßÇÁöÑËßíÂ∫¶Êù•Áúã,ÂÖ∂ÂÆûÂÆÉÁöÑÂëàÁé∞ËøòÊòØÈùûÂ∏∏ÁöÑÈÖ∑ÁöÑ,Êï¥‰ΩìÁöÑËßÜËßâÂÜ≤ÂáªÂäõ‰πüÊòØÊØîËæÉÁöÑÁ™ÅÂá∫,ËÑ∏ÈÉ®ÁöÑÂ§ÑÁêÜÊñπÂºèÊòæÂæóÁâπÂà´ÁöÑÈ•±Êª°ÂúÜÊ∂¶,ËøêÂä®ÊÑüÂçÅË∂≥ÁöÑÂêåÊó∂ÂèàÈùûÂ∏∏ÁöÑÊúâÂ®ÅÊÖëÂäõ,Ëøô‰∏ÄÊ¨°‰πüÊòØ‰ΩøÁî®‰∫Ü‰∏Ä‰∏™‰∏ä‰∏ãÂèåÊ†ºÊ†ÖÁöÑÊñπÂºèÂéªËøõË°åÂëàÁé∞,Êï¥‰∏™ËÑ∏ÈÉ®ÁöÑËæ®ËØÜÂ∫¶ÂÖ∂ÂÆûÊòØÊØîËæÉÁöÑÈ´òÁöÑ,ËÄå‰∏îÂú®Â§ßÁÅØÁªÑ‰∏äÈù¢‰πüÊòØÈùûÂ∏∏ÁöÑËÄêÁúã,Êàë‰ª¨ÂèØ‰ª•ÁúãÂà∞ÁªÜËäÇ‰∏äÈù¢ÁöÑÂ§ÑÁêÜ,‰ª•ÂèäÂÖ®ledÁÅØÊ∫êÁöÑÊê≠ÈÖç,Ëá≥Â∞ëËÆ©ÂÆÉÁúã‰∏äÂéªÊõ¥Âä†ÁöÑÈÜíÁõÆ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÜÖÈ•∞ÊñπÈù¢,Êñ∞ËΩ¶ÊúÄÊòéÊòæÁöÑÂèòÂåñÊòØÈÖçÂ§á‰∫Ü10.25Ëã±ÂØ∏ÊÇ¨ÊµÆÂºè‰∏≠ÊéßÂ±è,ÂÜÖÁΩÆÁöÑhondaconnect3.0Êô∫ÂØº‰∫íËÅîÁ≥ªÁªü,ÂÆûÁé∞‰∫ÜËØ≠Èü≥Âä©Êâã„ÄÅËΩ¶ÂÆ∂‰∫íËÅî„ÄÅÊâãÊú∫ËøúÁ®ãÊéßÂà∂ÂíåotaÂú®Á∫øÂçáÁ∫ßÁ≠âÂÖ®Êñ∞ÂäüËÉΩ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÊ±ïÂ§¥ËÅöÂÖ¥„ÄëÂ™í‰ΩìËßÜËßí | Ê∑∑Âä®Âä†‰∏äÂ§ßÁ©∫Èó¥,Êñ∞Ê¨æ‰∫´ÂüüÂ†™Áß∞‚Äú‰π∞ÂæóËµ∑ÂÖªÂæóËµ∑‚ÄùÁöÑÂÖ®ËÉΩÂÆ∂ËΩø\n", "label": "‰∫´Âüü"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊú¨Áî∞Á°¨Ê¥æsuv,ËΩ¶Èïø4905mm,ÈÖçv6ÂèëÂä®Êú∫+ÂÖ®Êó∂ÂõõÈ©±,ÂÖ•Èó®Â∞±Êúâ9‰∏™Êå°\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊï¥ËΩ¶ÊºÜÈù¢ÈááÁî®ÁâπÊÆäÂñ∑Ê∂ÇÂ∑•Ëâ∫,Á´ôÂú®‰æßÈù¢‰∏çÂêåËßíÂ∫¶ÂèØ‰ª•ÊÑüÁü•Âà∞ÂÖâÂΩ±ÂíåËâ≤ÂΩ©ÁöÑÁªÜÂæÆÂèòÂåñ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏äÊ±ΩÂ§ßÈÄög50 plus Ë∂äÁ∫ßÈÖçÁΩÆ,Êô∫ËÉΩËæÖÂä©,ËÆ©Âá∫Ë°åÊõ¥ËΩªÊùæ ‰∏äÊ±ΩÂ§ßÈÄömaxus\n", "label": "‰∏äÊ±ΩÂ§ßÈÄög50 plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁ∫ØÁîµÂä®id.4 crozz ‰ªé,Âá∫Âèë,Êó•‰ªò‰ªÖÈúÄ59ÂÖÉËµ∑ Áé∞Âú®‰∏ãËÆ¢Âç≥‰∫´24Êúü0ÊÅØ!\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n19Ëã±ÂØ∏ÁöÑËΩÆÊØÇËßÜËßâÂÜ≤ÂáªÂäõËøòÊòØÂæàÂº∫ÁöÑ,Âèå‰∫îËæêÊ†∑Âºè‰∏∫Êï¥ËΩ¶Â¢ûÂä†Ë±™ÂçéÊÑü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊúÄÊñ∞ÂÖçÂæÅË¥≠ÁΩÆÁ®éÊñ∞ËÉΩÊ∫êËΩ¶ÁõÆÂΩïÂèëÂ∏É:È©±ÈÄêËà∞05„ÄÅÈóÆÁïåm5„ÄÅÂàõÊñ∞bmw i4Á≠âËΩ¶ÂûãÂú®Âàó\n", "label": "ÈóÆÁïåm5ÔºõÈ©±ÈÄêËà∞05ÔºõÂàõÊñ∞bmw i4"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂâçÂîá‰∏§‰æßËøòÊúâÁ∫¢Ëâ≤È•∞Êù°Ë£ÖÁÇπ,‰∏∫ËΩ¶ËæÜÂ∏¶Êù•‰∏ÄÂÆöÁöÑËøêÂä®Â±ûÊÄß„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂîÆ‰ª∑19.98‰∏á,‰ªéÁ°¨Ê¥æË∂äÈáéÂà∞Á°¨Ê¥æÁ∫ØÁîµ,ÈòøÂõæÊüØÊâçÊòØÁúüÊ≠£ÁöÑ‚ÄúÂç∑Áéã‚Äù\n", "label": "ÈòøÂõæÊüØ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ºóÊâÄÂë®Áü•,ËøàÂáØ‰º¶Âú®ËµõËΩ¶ËΩªÈáèÂåñÂíåÂÆâÂÖ®ÊÄßÈ¢ÜÂüüÂ§Ñ‰∫é‰∏ñÁïåÈ¢ÜÂÖàÂú∞‰Ωç,1981Âπ¥,ËøàÂáØ‰º¶mp4/1Âú®‰∏ÄÁ∫ßÊñπÁ®ãÂºèËµõËΩ¶‰∏äÊé®Âá∫‰∫ÜÁ¨¨‰∏ÄÊ¨æÂÖ®Á¢≥Á∫§Áª¥Â∫ïÁõò„ÄÇ\n", "label": "ËøàÂáØ‰º¶mp4/1"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÄºÂæóÊ≥®ÊÑèÁöÑÊòØ,ÊúâÁü•ÊÉÖ‰∫∫Â£´ÊåáÂá∫,Ëøô‰∏ÄÊâπÂÜÖÈÉ®ËΩ¶Ê∫êÂùá‰∏∫2020Ê¨æmodel 3Ê†áÂáÜÁª≠Ëà™ÂçáÁ∫ßÁâà,Â±û‰∫éÊóßÊ¨æËΩ¶Âûã,Âπ∂Ê≤°ÊúâÊñ∞Ê¨æËΩ¶Âûã,ÂêåÊó∂‰πüÊòØÂÆÅÂæ∑Êó∂‰ª£Êèê‰æõÁöÑÁ£∑ÈÖ∏ÈìÅÈîÇÁâàËΩ¶Âûã,ÈîÄÂîÆÂØπË±°‰ªÖÈù¢ÂêëÂÖ¨Âè∏ÊÄªÈÉ®ÂèäÂÖ®ËµÑÂ≠êÂÖ¨Âè∏ÂÖ®‰ΩìÂëòÂ∑•„ÄÇ\n", "label": "model 3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈô§Ê≠§‰πãÂ§ñ,ÂÆÉÁöÑÁ©∫Ë∞ÉË∞ÉËäÇÂå∫Âüü‰πüÊúâ‰∏ÄÂùóÂ§ßÂ±è,ÂèØÂÆûÁé∞‰∏âÂ±èËÅîÂä®,ÁßëÊäÄÊÑüËê•ÈÄ†ÂæóÈùûÂ∏∏Âà∞‰Ωç„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ±ΩËΩ¶ËÆØÊÅØ:27‰∏á!‰∏∞Áî∞ÁöÑ‚ÄúÂ∞èÂüÉÂ∞îÊ≥ï‚ÄùÊù•‰∫Ü,ÁôæÂÖ¨ÈáåÊ≤πËÄó5l,ËøòË¶ÅÂï•\n", "label": "ÂüÉÂ∞îÊ≥ï"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂπøÊ±ΩÂüÉÂÆâappÂêåÊ≠•ÂèëÂ∏É‰∫ÜËØ¶ÁªÜÁöÑÂõûË¥≠Ê†áÂáÜÂíåÂÖ®ÈÄèÊòéÁöÑÊâßË°åÊµÅÁ®ã,Ê≤°ÊúâÁâπÂà´ÈôêÂà∂‰∫ãÈ°π,ÊãíÁªù‰∏ÄÂàáÂ•óË∑Ø„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞Âπ¥‰ºäÂßãÂ∞±‰∫§‰ªò,Èü©ÂõΩf35aÂ∑≤Êª°Áºñ,Êó•Êú¨ÂùöÊåÅÊú¨ÂúüÂª∫ÈÄ†,ÂêÉ‰∫ÜÁúºÂâç‰∫è\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n5‰∏áÈ¢ÑÁÆó‰πüËÉΩËÆ©‰Ω†ÊåëËä±Áúº!Ëøô4Ê¨æËΩ¶ÊúÄ‰Ωé3‰∏áËµ∑,ÊúàËñ™2000‰πüÂÖªÂæóËµ∑\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂØºËØª:Ë¢´ÈÅóÂøòÁöÑ‰∏úÈ£éÊú¨Áî∞bÁ∫ßÂ•ΩËΩ¶,ËΩ¶ÈïøÊé•Ëøë5Á±≥,ÊúÄ‰ΩéÈÖçËΩ¶Âûã‰ªé18.28‰∏áÈôçËá≥15.08,Âç¥Êó†‰∫∫ÈóÆÊ¥•!\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊúüÂæÖ,Êó†ÈúÄÁ≠âÂæÖÂõõÈ©±Ë±™Âçésuv,Ê≤ÉÂ∞îÊ≤Éxc40ÈôêÊó∂0È¶ñ‰ªò,Âä©‰Ω†È´òËÉΩÂºÄË∑ë\n", "label": "Ê≤ÉÂ∞îÊ≤Éxc40"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËææ‰∫∫ÂàÜ‰∫´Ê£ÆÊµ∑Â°ûÂ∞îmomentum‰∏Ä‰ª£Âíå‰∫å‰ª£ÁöÑÂå∫Âà´?ËØÑÊµãË¥®ÈáèÂ•Ω‰∏çÂ•Ω\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞ÊóóËà∞Ê±ΩÈÖçÂïÜË°å(ÁöÆÂç°„ÄÅsuv)„ÄÅ‰πåÂ∏ÇËç£ÂçáÂÖ®ËΩ¶ÈÖç‰ª∂(Âà´ÂÖã„ÄÅÈõ™‰ΩõÂÖ∞„ÄÅÂáØËø™ÊãâÂÖã\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊèΩÊúàÁöÑÂÜÖÈ•∞ÈááÁî®‰∫ÜÊó∂‰∏ãÊµÅË°åÁöÑÂèåËÅîÂ±èËÆæËÆ°,Á¨¶ÂêàÂ§ßË∂ãÂäø,ÂèåËÅîÂ±è„ÄÅËß¶ÊéßÁ©∫Ë∞ÉÈù¢Êùø„ÄÅÊåâÈîÆÊç¢Êå°,Ëøô‰∫õËÆæËÆ°‰æùÁÑ∂ËÉΩÂæàÂ•ΩÂú∞Â∏¶Ëµ∑ÂÜÖÈ•∞ÁöÑÁßëÊäÄÊÑü„ÄÇ\n", "label": "ÊèΩÊúà"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÂ∫∑Ê≠£Ê±ΩËΩ¶¬∑Â§™‰ªìÂ∫ó„Äë‰ªäÊó•Êé®ËçêËΩ¶Âûã‚Äî‚ÄîÂÆùÈ©¨320li\n", "label": "ÂÆùÈ©¨320li"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‚Äú‰∫åÊâãËΩ¶‚Äù‰πüË¶ÅËµ∞Âá∫Âéª ‰∏äÊ±Ω‰∏äÊ±ΩËç£Â®Åei5ÈÄÄÂΩπÂá∫ÁßüËΩ¶Âá∫Âè£Êµ∑Â§ñ\n", "label": "‰∏äÊ±ΩËç£Â®Åei5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶Â∞æÈÉ®ÂàÜ,‰∏äÊ±ΩÂ§ßÈÄög50 plusÂàôÊ≤°Â§™Â§öÂèØËÆ≤ÁöÑÂú∞Êñπ,Êï¥‰ΩìÊñπÊñπÊ≠£Ê≠£,Â∞æÁÅØ‰πãÈó¥Êñ∞Â¢ûÈ´ò‰∫ÆÈªëÈ•∞Êùø,‰∏äÂµåÊâÅÂπ≥ÂåñÁöÑ‚Äúmaxus‚ÄùÂ≠óÊ†á,ÂΩ∞ÊòæÂìÅÁâåËÆæËÆ°„ÄÇ\n", "label": "‰∏äÊ±ΩÂ§ßÈÄög50 plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂè¶Â§ñ,‰∏≠ÈÖçËΩ¶Âûãxdrive40imËøêÂä®Â•óË£ÖÂíåÈ°∂ÈÖçËΩ¶Âûãxdrive40iÂ∞ä‰∫´ÂûãmËøêÂä®Â•óË£ÖËøòÂçáÁ∫ßÊúâharman/kardonÈ´òÁ´ØÈü≥ÂìçÁ≥ªÁªü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nt4ÁöÑÈ¢ÜÂÖã02 hatchback,ËÉΩÂê¶ÁªßÁª≠ËÉú‰ªª‚ÄúÈí¢ÁÇÆ‚ÄùÂêçÂè∑?|È∫ªËæ£ËßÜÈ¢ë\n", "label": "È¢ÜÂÖã02 hatchback"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶ÂûãÁâπÁÇπ: 2022Ê¨æÊç∑Â∞ºËµõÊÄùgv80Êï¥‰ΩìÈÄ†ÂûãÂª∂Áª≠‰∫ÜÁé∞Ê¨æËΩ¶ÂûãÈ£éÊ†º,ÂÖ∂ÈááÁî®ÂÆ∂ÊóèÊ†áÂøóÊÄßÁöÑÂ§ßÂ∞∫ÂØ∏ÁõæÂΩ¢ËøõÊ∞îÊ†ºÊ†Ö+ÂàÜ‰ΩìÂºèÂ§ßÁÅØÁªÑ,Êï¥‰ΩìÂÖ∑ÊúâËæÉÈ´òÁöÑËæ®ËØÜÂ∫¶„ÄÇ\n", "label": "Êç∑Â∞ºËµõÊÄùgv80"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞Êâã‰∏äË∑Ø!ÂÖ®Êñ∞‰∏Ä‰ª£‰øùÊó∂Êç∑Âç°ÂÆ¥Áªà‰∫éÊù•‰∫Ü!ÊØîË∑ØËôéÊèΩËÉúËøòÊºÇ‰∫Æ,ËøòË¶ÅÂï•Â••Ëø™\n", "label": "ÊèΩËÉúÔºõÂç°ÂÆ¥"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂíåÊ≠º-16ÂÜçÂ∫¶Âêà‰Ωì! Ê≠º-10cÂêåÊó∂Êê∫pl-10„ÄÅpl-12„ÄÅpl-15ÂØºÂºπ‰∫ÆÁõ∏\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊúÄ‰∏çËØ•ÂÄí‰∏ãÁöÑ‚Äú‰º™Ë±™ËΩ¶‚Äù,Â§ñËßÇÈÖ∑‰ººË∑ØËôé,1.5tÈÖçÂ§ß‰∏ÉÂ∫ß,‰∏çË∂≥9‰∏á\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈáçÂ∫Ü‰øùÊó∂Êç∑Â∏ïÊãâÊ¢ÖÊãâËΩ¶Âèã‰ºö!‰øùÊó∂Êç∑ËΩ¶ÂèãÁæ§!‰øùÊó∂Êç∑‰ø±‰πêÈÉ®!‰øùÊó∂Êç∑‰∫§ÊµÅÁæ§\n", "label": "Â∏ïÊãâÊ¢ÖÊãâ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂú®Êô∫ËÉΩÈ©æÈ©∂ËæÖÂä©ÊñπÈù¢,‰∏úÈ£éÊó•‰∫ßÂêØËæ∞Â§ßvÊã•ÊúâÈ¢ÜÂÖàÂêåÁ∫ßÁöÑ„ÄÅÂåÖÂê´ÂêØËæ∞v-pilotÊô∫ËÉΩÈ©æÈ©∂ËæÖÂä©Á≥ªÁªü„ÄÅ540Â∫¶Á´ã‰ΩìÁéØËßÜÂΩ±ÂÉèÁ≠â13È°πÊô∫ËÉΩÈ©æÈ©∂ÂäüËÉΩ,ËÆ©È©æÈ©∂Êõ¥‰æøÊç∑„ÄÅÊõ¥ËΩªÊùæ„ÄÇ\n", "label": "ÂêØËæ∞Â§ßv"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏ÄÂè∞ÁîµËΩ¶ÁöÑÂä†ÈÄüËÉΩÂäõ„ÄÅÊúÄÈ´òÊó∂ÈÄü„ÄÅËÉΩÊ∫êÊïàÁéá‰∏ªË¶ÅÁúãËΩ¶ËßÑÁ∫ßÂäüÁéáÂô®\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ¢ÑÂîÆ12.79‰∏áËµ∑!ÂÖ®Êñ∞ÈïøÂÆâcs75 plusÂ§ßÂçáÁ∫ß,ÂÖ®Á≥ª8at,‰∏äÂ∏ÇË¶ÅÂ§ßÂçñ\n", "label": "ÈïøÂÆâcs75 plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nË∂Ö‰ΩéÊ≤πËÄó„ÄÅ‰æøÊê∫ÈÖçÁΩÆ,ÂπøÊ±ΩÊú¨Áî∞ÂáåÊ¥æÂπ∏Á¶èÊÑüÊª°Êª°! ÂπøÊ±ΩÊú¨Áî∞ÂáåÊ¥æ\n", "label": "ÂáåÊ¥æ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ°∫Â∫îÊ∂àË¥πÂ∏ÇÂú∫ÂèëÂ±ïÁöÑÈÅìÁêÜÊàë‰ª¨ÈÉΩÊáÇ,Êñ∞‰∫ãÁâ©Âú®ÂæàÂ§ßÁ®ãÂ∫¶‰∏äÁ°ÆÂÆûË¶ÅÊØîÊóß‰∫ãÁâ©Êõ¥Â•Ω,Ë¢´ÂéÜÂè≤Ê∑òÊ±∞‰πüÂπ∂ÈùûÊ≤°ÊúâÂéüÂõ†„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÆÉÁöÑËÆæËÆ°ÊâìÁ†¥‰∫ÜÂ∏∏ËßÑ,ÂâçËÑ∏ÈááÁî®‰∫ÜÂ∑®Â§ßÁöÑÂÖ≠ËæπÂΩ¢Ê†ºÊ†ÖÂíåËè±ÂΩ¢‰∫§ÁªáÁöÑÈì∂Ëâ≤‰∏≠ÁΩë,Â∑®Â§ßÁöÑdsÂæΩÊ†á‰πüÊõ¥ÊúâË±™ËΩ¶ÁöÑÊ∞îÂäø„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈïøÂÆâÂèàÈÄ†‰∫ÜËæÜÈªëÈ©¨suv,ËΩ¥Ë∑ùË∂Ö2Á±≥7,ÈÖçÂΩìÂÆ∂ËìùÈ≤∏Âä®Âäõ,ÈöîÈü≥Êúâ‰∫ÆÁÇπ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊú¨ÊñáËΩ¨Ëá™:it‰πãÂÆ∂‰ΩúËÄÖ:Â≠§ÂüéËÅîÊÉ≥ÂÆòÁΩëÁé∞Â∑≤ÂÖ¨Â∏ÉÊñ∞Ê¨æthinkbookplusÁöÑËØ¶ÁªÜÈÖçÁΩÆ‰ø°ÊÅØ,È¢ÑËÆ°Â∞ÜÂú®‰∏ç‰πÖÂêé‰∏äÂ∏Ç„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ®Êñ∞gulfstreamg800ÊàêÂäüÈ¶ñÈ£û\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊØî‰∫öËø™-ÂîêÁõ¥ÈôçÂ•ΩÂá†‰∏á!,ÂêÑËΩ¶ÂûãÂ∫ï‰ª∑‰∏ÄÈîÆÊü•ËØ¢!‰∏çÁúãÂêéÊÇî!\n", "label": "Âîê"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞Ê¨æËΩ¶ÂûãÂú®ËΩ¶Ë∫´‰æßÈù¢Âª∂Áª≠‰∫Ü‰πãÂâçÂêçÁàµhsÂúÜÊ∂¶È•±Êª°ÁöÑËÆæËÆ°È£éÊ†º,Êñ∞ËΩ¶‰æßÈù¢ÁöÑÂêéËßÜÈïú,‰æßË£ô‰ª•ÂèäË°åÊùéÊû∂Á≠âÈÉ®ÂàÜÈÉΩÂÅö‰∫ÜÁõ∏Â∫îÁöÑÈªëÂåñÂ§ÑÁêÜ,Áªô‰∫∫ÊØîËæÉÁÇ´ÈÖ∑ÁöÑÊÑüËßâ„ÄÇ\n", "label": "ÂêçÁàµhs"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞‰∫ßÂìÅÈîÄÂîÆÂç†ÊØîÊâ©Â§ß,Êù∞ÊôÆÁâπ2021Âπ¥È¢ÑËÆ°Ëê•Êî∂11.8-12.1‰∫øÂÖÉ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂπ¥ËΩª‰∫∫ÁöÑÁ¨¨‰∏ÄÂè∞ËΩ¶,id3ÁªùÂØπÊØîÂêåÁ∫ßÁáÉÊ≤πËΩ¶Á©∫Èó¥Êõ¥Ë∂≥Âä®ÂäõÊõ¥‰ºò-‰ªäÊó•Â§¥Êù°\n", "label": "id3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂèà‰∏ÄÊó•Á≥ªÁéãËÄÖÊù•ÂäøÊ±πÊ±π!ËΩ¶Èïø5Á±≥+v6ÂèëÂä®Êú∫+ÂÖ®Êó∂ÂõõÈ©±,ÈÄî‰πêÁîòÊãú‰∏ãÈ£é\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂπøÊ±ΩÊú¨Áî∞Áº§Êô∫Ë¥≠ËΩ¶ÊúÄÈ´òÂèØ‰∫´24Êúü0Âà©Áéá! ÂπøÊ±ΩÊú¨Áî∞\n", "label": "Áº§Êô∫"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ≠§Â§ñ,ÊúâÂçö‰∏ªÊõùÂÖâ‰∫Ümate50proÁöÑÈí¢ÂåñËÜú,ËØ•Êú∫Ê≤°ÊúâÈááÁî®ÁÄëÂ∏ÉÂ±èËÆæËÆ°,‰ªéÂê¨Á≠í‰ΩçÁΩÆÂèØ‰ª•ÁåúÊµã,mate50proÂ§ßÊ¶ÇÁéáÁî®ÁöÑÊòØÂàòÊµ∑Â±èËÆæËÆ°,‰∏ä‰∏ãÂÆΩÂ∫¶ÊØîËæÉÁ™Ñ,Ê≠£Èù¢È¢úÂÄºÂ∫îËØ•‰∏çÈîô„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ª∑Ê†ºÁõ∏Â∑Æ100‰∏á,ÂÆùÈ©¨x5mÂíåÂ•îÈ©∞g63Ë∞ÅÊõ¥Âº∫?Ëµ∑Ê≠•Áû¨Èó¥‰∏ÄÁõÆ‰∫ÜÁÑ∂\n", "label": "Â•îÈ©∞g63ÔºõÂÆùÈ©¨x5m"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ª•ÂèäÈù¢ÂØπÂ∑®Â§ßÁöÑÁéØÂ¢ÉÂéãÂäõ‰∏ã,Ê≤ªÁêÜÁéØÂ¢ÉÊâÄËµ∞ÁöÑÂøÖÈ°ª‰πãË∑Ø„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ®Êñ∞‰∏Ä‰ª£Â•áÈ™è0È¶ñ‰ªòËµ∑ Ëá≥È´ò‰∫´14‰∏á2Âπ¥0ÊÅØÂíå9000ÂÖÉÁΩÆÊç¢Ë°•Ë¥¥,Êõ¥Êúâ5Âπ¥Âèå‰øùplusÂä†ÊàêÂºÄÊñ∞ËΩ¶\n", "label": "Â•áÈ™è"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ªé‰æßÈù¢Áúã,ËΩ¶Á™óÈááÁî®ÈïÄÈì¨Ë£ÖÈ•∞,ÊèêÂçá‰∫ÜÊ±ΩËΩ¶ÁöÑÁ≤æËá¥Â∫¶„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶‰æßÂèäÂ∞æÈÉ®,ÁöáÂÜ†ÈôÜÊîæ‰∏é‰∏∞Áî∞Ê±âÂÖ∞ËææÂü∫Êú¨‰øùÊåÅ‰∫ÜÁõ∏ÂêåÁöÑËÆæËÆ°ËØ≠Ë®Ä,‰∏äÊèêÁöÑÂèåËÖ∞Á∫øÂä®ÊÑüÊµÅÁïÖ,ÂãæÂãíÂá∫ÊûÅÂº∫ÁöÑËøêÂä®ÊÑü„ÄÇ\n", "label": "ÁöáÂÜ†ÈôÜÊîæÔºõÊ±âÂÖ∞Ëææ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏∞Áî∞ÂÖ®Êñ∞Ë∂äÈáéÊõùÂÖâ!Ë¢´Áß∞‰∏∫Â∞èÂè∑ÊôÆÊãâÂ§ö,4.0l+ÂõõÈ©±,ÂÖ•Âçé‰∏çÂà∞30‰∏á\n", "label": "ÊôÆÊãâÂ§ö"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂØåÊ∞ëÈ£éÈ°∫-‰∏≠ÂõΩÊñ∞ËÉΩÊ∫êÂçï‰∏ÄËΩ¶ÂûãÈîÄÂÜ†!ÂÆèÂÖâminievÂÖ®Âπ¥ÈîÄÈáè426;452Âè∞\n", "label": "ÂÆèÂÖâminiev"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÂàõÊñ∞ÂèØÊåÅÁª≠ÂèëÂ±ï„Äë‚Äú1‚ÄùËµ∑ÊõúÂ§ú,bmw 1Á≥ªËøêÂä®ËΩøËΩ¶ÈáçË£ÖÊä´Áî≤Êù•Ë¢≠\n", "label": "bmw 1Á≥ª"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁàÜÁ¨ëÊÆµÂ≠ê:Ë°®ÂºüÁõ∏‰∫≤,ÂºÄÁùÄÊàëÂÆùÈ©¨ÂéªÁöÑ ÂõûÊù•‰πãÂêéÁªôÊàëËØ¥:Âì•,ËΩ¶ËÉΩ‰∏çËÉΩÈÄÅÊàë\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞ËΩ¶‰Ωú‰∏∫‰∏≠ÊúüÊîπÊ¨æËΩ¶Âûã,Â§ñËßÇÁöÑÂâçËÑ∏‰∏éÂ∞æÈÉ®ÊúâËΩªÂæÆÁöÑ‰øÆÊîπ,ÊúÄÂ§ßÁöÑÂèòÂåñÈõÜ‰∏≠Âú®ÈÖçÁΩÆ‰∏ä,ËΩ¶Êú∫Á≥ªÁªüÂçáÁ∫ßÂà∞hondaconnect3.0Á≥ªÁªü,‰∫§‰∫íÂäüËÉΩÊõ¥Âä†Âº∫Â§ß„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ≤ÉÂ∞îÊ≤Éxc405Âπ¥Ë∂ÖÈïøË¥∑,Êó•‰æõ‰ªÖ48ÂÖÉÊô∫ËÉΩÂÖ®Êó∂ÂõõÈ©±Á≥ªÁªüÂç≥ÂàªÂá∫Âèë,È´òËÉΩ‰∏Ä‚ÄúÂ§è‚Äù\n", "label": "Ê≤ÉÂ∞îÊ≤Éxc40"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§ß‰ºóÂÆùÊù•Èôç‰ª∑‰∫Ü,‰ºòÊÉ†ÂäõÂ∫¶ÊÉä‰∫∫,ËæìÂÖ•ÊâãÊú∫Âè∑Âç≥ÂèØÊü•ËØ¢Â∫ï‰ª∑ Ê±ΩËΩ¶Êä•‰ª∑Â§ßÂÖ®\n", "label": "ÂÆùÊù•"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêËΩ¶ËæÜ‰π∞Âçñ„Äë Âá∫ÂîÆ:18Âπ¥Èõ™‰ΩõÂÖ∞ÁßëÈ≤ÅÂÖπ„ÄÅ10Âπ¥ÈìÉÊú®Èõ®Ááï„ÄÅ16Âπ¥Êú¨Áî∞ÈõÖÈòÅ„ÄÅ17Âπ¥ÂêâÂà©Â∏ùË±™„ÄÅ19Âπ¥ËßÇËá¥\n", "label": "ÁßëÈ≤ÅÂÖπÔºõÈõ®ÁáïÔºõÂ∏ùË±™ÔºõÈõÖÈòÅ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁêÜÊÉ≥one È¶ñ‰ªò5.07‰∏áËµ∑ nedcÁªºÂêàÁª≠Ëà™ 1080ÂÖ¨Èáå,Ë∂ÖÂ§ßÂÖ≠Â∫ßÁôæ‰∏áÈÖçÁΩÆ,ËΩªÊùæÊª°Ë∂≥ÂÖ®ÂÆ∂Âá∫Ë°å„ÄÇ\n", "label": "ÁêÜÊÉ≥one"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊú™Êù•ÁöÑÁîµÂä®Êó•‰∫ßÈïøËøô‰∏™Ê†∑?v-motionËÆæËÆ°‚ÄúÂ§±Êéß‚Äù,ÊúâÁÇπÂÉèÊ†áËá¥\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶Â§¥ÈÄ†ÂûãÈ£éÊ†ºÁÆÄÁ∫¶Â§ßÊñπ,Êé•Ëøë‰∫éÊñπÂΩ¢ÁöÑÊ†ºÊ†ÖÊê≠ÈÖçÂúÜÂΩ¢ÁöÑÂ§¥ÁÅØ,ËßÜËßâÊïàÊûú‰∏ÄÊµÅ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊú¨‰ª•‰∏∫ËøôÊ¨æsr150gtÊñ∞ËΩ¶‰ºöÂçñÂæóÂæàË¥µ,Âà∞ÂèëÂ∏É‰ª∑Ê†ºÊó∂ÂÄôÂÖ®Âú∫ÂìóÁÑ∂,14880ÂÖÉËµ∑ÁöÑÂîÆ‰ª∑ËÉΩÂú®ÂêåÁ≠âÁ∫ßÂ∏ÇÂú∫ÂÅöÂà∞ÊúâÊÅÉÊó†ÊÅê,Â§ßÂºÄÊùÄÊàí‰∫Ü!\n", "label": "sr150"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞Â§ßÊ¥≤Êú¨Áî∞Áªà‰∫éÂØπÂ§çÂè§Ë∏èÊùø‰∏ãÊâã‰∫Ü:ns125laÂç≥Â∞Ü‰∏äÂ∏Ç,‰∏ÄÊµÅÈÖçÁΩÆÂä®Âäõ,‰ª∑Ê†ºÊàñÊÑü‰∫∫\n", "label": "ns125la"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂç≥ÂàªÂí®ËØ¢‚Äú0È¶ñ‰ªò‚ÄùÊûÅÁãêÈòøÂ∞îÊ≥ïs,0ÂÖÉ‚ÄúË¥∑‚ÄùÂõûÂÆ∂ÈÄüÊù•ËØïÈ©æËé∑ÂèñÊõ¥Â§öË¥≠ËΩ¶ÊñπÊ°à!\n", "label": "ÊûÅÁãêÈòøÂ∞îÊ≥ïs"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÈáçÂ∫ÜÊ≠£‰ø°„ÄëÂÆùÈ©¨530¬∑Èπ¶ÈπâËû∫ÂñáÂè≠/È≠îÁ´ãÊñπdsp-1212dspÂäüÊîæÊîπË£ÖÊ°à‰æã\n", "label": "ÂÆùÈ©¨530"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n01ÁÉ≠ÂçñËΩ¶Âûã Á≠â‰Ω†È©∞È™ã1.Á∫¢Êóól5È¢ÜË¢ñÁ∫ßË°åÊîøÂ∫ß„ÄÇ‰ªñ‰ª¨‰∏ç‰ºöËØïÂõæÊ®°‰ªøÂÜÖÁáÉÊú∫,ËÄåÊòØÂØªÊâæËÆ©ÊàëÊÉ≥Ëµ∑ jetsons ‰∏≠ÁöÑÂÆáÂÆôÈ£ûËàπÁöÑÂ£∞Èü≥„ÄÇÂ∏ÇÊîøÂ∫úÁôæË¥ßÂ§ßÊ•º‰∏áÂú∞ÂπøÂú∫Á¥´ÈáëÂ§ßÊ°•‰∏ΩÊ∞¥Â§ßÂâßÈô¢ÁôΩ‰∫ëÊ£ÆÊûóÂÖ¨Âõ≠Ôºåeqs450 ‰πü‰∏çÊòØÊãêËßíÈõïÂàªÊú∫,Â∞ΩÁÆ°ÂÖ∂Ê†áÂáÜÁöÑ 10 Â∫¶ÂêéËΩÆËΩ¨ÂêëÁ°ÆÂÆûËÆ©Ê±ΩËΩ¶ÊÑüËßâÊØîÂÖ∂Â∞∫ÂØ∏ÂíåÈáçÈáèÊâÄÊöóÁ§∫ÁöÑÊõ¥ÁÅµÊ¥ª„ÄÇËÄå‰ªä,È´òÊÄßËÉΩÊô∫ÊéßÂ§ßÁæésuv‚Äî‚ÄîÈïøÂÆâÊ¨ßÂ∞öx7 plusÂÖ®mianËøõÈò∂ËÄåÊù•,Â∏¶È¢ÜÁùÄÊó†Êï∞Ëá™Âº∫Â•ãÊñóËÄÖ‰∏ÄËµ∑,Ë°åÈÅçÂ§ßÁæé‰πãË∑Ø,Ëá¥Êï¨Â§ßÂõΩÂ∑•Á®ã,Ëá¥Êï¨Ëá™Âº∫‰∏Ä‰ª£!Âêå‰∫ãÊ≠£Â∑ßÊúÄËøë‰πüËÄÉËôë‰π∞Âè∞‰∏≠ÂûãsuvËΩ¶Âûã,Êñ∞Ê¨æÈÄîËßÇl330tsir-lineË∂ä‰∫´ÁâàÂíåÊòÇÁßëÂ®Åplus‰∫îÂ∫ßË±™ÂçéÁâà‰πãÈó¥Á∫†Áªì,‰∏§Âè∞ËΩ¶ËêΩÂú∞ÈÉΩÂú®25‰∏áÂ∑¶Âè≥,Èô™‰ªñË∑ë‰∫ÜÂõõ‰∫îË∂ü‰∏§‰∏™ÂìÅÁâåÁöÑ4sÂ∫ó,‰πüÁÆóÊòØÊÄªÁªì‰∫Ü‰∏çÂ∞ëÂøÉÂæó‰Ωì‰ºö:2022Ê¨æÈÄîËßÇlÂèñÊ∂à1.4tÂä®ÂäõÂçïÂÖÉ,Âè™Êúâ2.0tÈ´ò‰ΩéÂäüÁéá‰πãÂàÜ,ÂåπÈÖç7ÈÄüÊπøÂºèÂèåÁ¶ªÂêà,ÂíåÊòÇÁßëÂ®ÅplusÁöÑÂÖ®Á≥ª‚Äú2.0t+9at+48vËΩªÊ∑∑‚ÄùÁõ∏ÊØî,ËøòÊòØÂ§Ñ‰∫éÊòéÊòæÂä£Âäø„ÄÇÈÖçÂ§á‰∫ÜÂ¶ÇÊ≠§Â§ßÂÆπÈáèÁöÑÁîµÊ±†Âíå‰º†ÁªüÂä®ÂäõÁ≥ªÁªüÁöÑÊèíÁîµÂºèÊ∑∑Âä®Ê±ΩËΩ¶,Âú®ÈáçÈáèÂíåÂåÖË£ÖÊñπÈù¢ËÇØÂÆö‰ºöÂèóÂà∞‰∏•ÈáçÁöÑÂΩ±Âìç,Êàë‰ª¨ÂæàÈöæÁêÜËß£ÈááÁî®ËøôÁßçÂä®ÂäõÁ≥ªÁªüÈÖçÁΩÆÁöÑÂéüÂõ†,ÁâπÂà´ÊòØËøôÊ¨æËΩ¶ÂûãÂ∞ÜÊ¨ßÊ¥≤‰Ωú‰∏∫ÂÖ∂‰∏ªË¶ÅÁõÆÊ†áÂ∏ÇÂú∫„ÄÇËΩ¶Èó®ÈöîÈü≥Â§ÑÁêÜ‰ª•ÂèäÊâ¨Â£∞Âô®ÁöÑÂÆâË£ÖÂ§ÑÁêÜÂô®‰ª•ÂèäË∂Ö‰ΩéÈü≥ÁöÑÂÆâË£ÖÂ§ÑÁêÜÂÆâË£ÖÂ∫óÂÆ∂:Êù≠Â∑ûÈ≠îÈõ∑Ê±ΩËΩ¶Èü≥ÂìçÊîπË£ÖÂ∑¶Âè≥‰∏§‰æßÂàÜÂà´ÊòØÊó∂ÈÄüË°®Ë∑üËΩ¨ÈÄüË°®,‰∏≠Èó¥ÈÉ®ÂàÜÊòØÂ§öÂ™í‰ΩìÂ±ïÁ§∫Âå∫Âüü„ÄÇ\"Êñá‰∏≠ÂõæÁâáÊù•Ëá™ÁΩëÁªú,‰æµÂà†ËØ∑ËÅîÁ≥ª\\\"Âä®ÂäõÊñπÈù¢,ÂÖ®Êñ∞‰∏Ä‰ª£nxÊèê‰æõ‰∫Ü2.5lÂíå2.4tÁáÉÊ≤π„ÄÅ2.5lÊ≤πÁîµÊ∑∑Âä®‰ª•Âèä2.5lÊèíÁîµÊ∑∑Âä®Á≠âÂ§öÁßçÂä®ÂäõÈÖçÁΩÆ,ÂÖ∂‰∏≠2.5lÊèíÁîµÊ∑∑Âä®‰∏∫Êñ∞Â¢ûÂä®Âäõ,Êã•Êúâ58kmÁöÑÁ∫ØÁîµÁª≠Ëà™ÈáåÁ®ã,0-96km/hÂä†ÈÄüÊó∂Èó¥‰∏∫6Áßí,ÊúÄÂø´ÂÖÖÁîµÊó∂Èó¥‰∏∫2.5Â∞èÊó∂„ÄÇ\n", "label": "Á∫¢Êóól5ÔºõÈÄîËßÇlÔºõÈïøÂÆâÊ¨ßÂ∞öx7 plusÔºõÊòÇÁßëÂ®ÅplusÔºõnxÔºõeqs450ÔºõÈÄîËßÇl330tsir-line"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n1ÂàÜÈíüÈîÄÂîÆÈ¢ùÁ†¥2.8‰∫øÂÖÉÁöÑredmi k50ÁîµÁ´ûÁâà,‰∏∫‰ΩïËÉΩËé∑Âæó‰∏öÁïåÁÉ≠Êçß\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§ßÁ©∫Èó¥„ÄÅË∂Ö‰∫´Âèó!ÂéüÂéÇÁ≤æÂ∑•Âà∂ÈÄ†‰∏äÊ±ΩÂ§ßÈÄöÁîüÊ¥ªÂÆ∂v90 ‰∏äÊ±ΩÂ§ßÈÄömaxus\n", "label": "‰∏äÊ±ΩÂ§ßÈÄöÁîüÊ¥ªÂÆ∂v90"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊâÄ‰ª•mg5Êõ¥ÈÄÇÂêàËøΩÊ±ÇÂä®Âäõ,ÂØπÁ©∫Èó¥ÈúÄÊ±Ç‰∏çÂ§ßÁöÑÂπ¥ËΩª‰∫∫„ÄÇ\n", "label": "mg5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêËΩ¶‰∏ªËØ¥ËΩ¶„ÄëÂπªÂΩ±Âà∞Â∫ïÂÄº‰∏çÂÄºÂæó?ÂºÄ‰∫Ü4634ÂÖ¨ÈáåÂêé,ÂàÜ‰∫´ÁúüÂÆûÈ©æÈ©∂ÊÑüÂèó\n", "label": "ÂπªÂΩ±"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËæΩÂÆÅÁúÅ‰∏ÄÂ•≥Â≠ê90‰∏á‰π∞ÂÆùÈ©¨x6,ÊåÇ‰∫ÜËøôÂùóËΩ¶ÁâåÂêé,ÊØèÂ§©ÈÉΩ‰ºöÊúâÁîµËØùÈ™öÊâ∞\n", "label": "ÂÆùÈ©¨x6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂä®ÂäõÈÉ®ÂàÜ,ËôΩÁÑ∂ÂÆòÊñπÂπ∂Ê≤°ÊúâÂÖ¨Â∏ÉÂÖ∑‰Ωì‰ø°ÊÅØ,‰ΩÜÊòØÂ§ñÁïåÊôÆÈÅçÁåúÊµãÊñ∞ËΩ¶Â∞Ü‰∏éjeepÊåáÂçóËÄÖÂêåÂπ≥Âè∞Áîü‰∫ß,Âπ∂‰∏î‰ºöÈááÁî®ÊèíÁîµÂºèÊ∑∑Âä®Á≥ªÁªü„ÄÇ\n", "label": "ÊåáÂçóËÄÖ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁªºÂêàÊ≤πËÄó5.5lÊØîÊú¨Áî∞Áº§Êô∫ÁúÅÊ≤π!ÂîÆ‰ª∑Âπ≥Ê∞ë‰∏çÂà∞10‰∏á,Èõ™‰ΩõÂÖ∞Êñ∞ËΩ¶ÂÄº‰∫Ü\n", "label": "Áº§Êô∫"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nafs:ËäØÁâáÁü≠Áº∫Â∑≤ÈÄ†ÊàêÂÖ®ÁêÉÊ±ΩËΩ¶Âáè‰∫ß1027.2‰∏áËæÜ,È¢ÑËÆ°ÂÖ®Âπ¥Âáè‰∫ß1131‰∏áËæÜ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶Ë∫´Â∞∫ÂØ∏‰∏é‰∫öÊ¥≤ÁãÆÂü∫Êú¨‰∏ÄËá¥,ËΩ¥Ë∑ùÂ∞ÜËææÂà∞2750ÊØ´Á±≥,‰æßÈù¢ËΩ¶Ë∫´Áúã‰∏äÂéªÊõ¥Âä†‰øÆÈïø,‰∏§‰æßËΩ¶Á™óÈÄöËøáË£ÖÈ•∞Èì∂Ëâ≤ÈïÄÈì¨ÊùêÊñôÊù•‰ΩìÁé∞Ê°£Ê¨°,ËΩÆÊØÇÈááÁî®18Ëã±ÂØ∏ËÆæËÆ°,ÈÄ†Âûã‰∏∫Â§öËæêÂºè„ÄÇ\n", "label": "‰∫öÊ¥≤ÁãÆ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞ËΩ¶Êé•Á∫≥‰∫Ü‚ÄúÊó∂Á©∫‰∫§Âìç‚ÄùËÆ°ÂàíÁêÜÂøµ,Âí±‰ª¨ËØïÈ©æÁöÑÂõõÈ©±ÊóóËà∞ËΩ¶Âûã,Ê†áÈÖçÁöÑÊòØÁü©ÈòµÂºèledÂ§ßÁÅØ,ÂÜÖÁΩÆ126‰∏™ledÁÅØÁè†ËøòÈôÑÂ∏¶ËøúËøëÂÖâÂèåÈÄèÈïú,ÂÜçÂä†‰∏äÊûÅÂÖ∑Ëæ®ËØÜÂ∫¶ÁöÑÈì∂Ê≤≥Ê∂åÂä®ÂâçËÑ∏‰ª•ÂèäËÉΩÈáèËÑâÂÜ≤Á´ñÊ†ºÊ†Ö,Ëê•Âª∫‰∫ÜÈ´òÊ°£ÁªÜËÖªÁöÑËßÜËßâÂº†Âäõ,ÁßëÊäÄÊÑüÂíåÈ¢úÂÄºÂèåÈ´ò,Â¶•Â¶•ÁöÑÁàÜÊ¨æËåÉ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈááÁî®ÂçäÂ∞ÅÈó≠ÂºèËÆæËÆ°ÁöÑËΩÆÊØÇÊúâÂä©‰∫éÈôç‰ΩéËΩ¶Ë∫´Ë°®Èù¢È£éÈòª,Âè¶Â§ñËøôÊ¨æËΩ¶ÁöÑÈ£éÈòªÁ≥ªÊï∞‰∏∫0.29cd„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏ÄÊ¨°ÂÖÖÁîµÁª≠Ëà™180km,2Ê¨æÂ§ßÂä®ÂäõÁîµÂä®ËΩ¶,ÈÄÇÂêàÂÜúÊùë„ÄÅÂ±±Âå∫„ÄÅÈÄÅÂ§ñÂçñ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÆûÂú®ÊÉ≥‰∏çÈÄöËøôÊ¨æÂÖ®ÁêÉÁïÖÈîÄÁöÑsuv‰∏∫‰ΩïÂú®ÂõΩÂÜÖÂ¶ÇÊ≠§‰ΩéËø∑!cx5‰∏âÂπ¥ÊÑüÂèó\n", "label": "cx5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËµÑËÆØ | 2022Âπ¥Ê±ΩËΩ¶Ê†áÂáÜÂåñÂ∑•‰ΩúË¶ÅÁÇπÂèëÂ∏É,ÂïÜÁî®ËΩ¶ÂÆâÂÖ®ÁáÉËÄóÊ†áÂáÜÂ∞ÜËøõ‰∏ÄÊ≠•ÂÆåÂñÑ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞ËΩ¶ | ÁÉ≠Èó®ËΩ¶Ê¨æÈΩêËÅö,2022Êµ∑Âè£Êñ∞ËÉΩÊ∫êËΩ¶Â±ï30-40‰∏áÂÖÉsuvËΩ¶Âûã‰∏ÄËßà\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂåó‰∫¨Êñ∞ËÉΩÊ∫êÊîæÊ†áË±™Á§º ÂπøÊ±Ω‰∏∞Áî∞ia5‰∫¨Áâå‰∏ì‰∫´Ë°•Ë¥¥3‰∏áÂÖÉ\n", "label": "ÂπøÊ±Ω‰∏∞Áî∞ia5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂä®ÂäõÊñπÈù¢,Êñ∞ËΩ¶Êê≠ËΩΩ2.0lÂèëÂä®Êú∫,ÂåπÈÖç6ÈÄüÊâãÂä®ÂèòÈÄüÁÆ±„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËøô‰∏Ä‰ª£ÁöÑclsÂâçËÑ∏ËôΩÁÑ∂Âá∂ÊÇç,‰ΩÜÂú®‰æßÈù¢ÂíåÂ∞æÈÉ®ÈÄ†Âûã‰∏ä,Âç¥Âà†ÁπÅÂ∞±ÁÆÄ,Ë∂ÖÂº∫ÁöÑÊµÅÁ∫øÁæéÊÑü‰æùÊóßÊòØÂÆÉÁöÑ‰ª£ÂêçËØç„ÄÇ\n", "label": "cls"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nttig34Ê†áÈÖçÁâàÈôêÊó∂Áâπ‰ª∑1100ttig34‰ΩéÈÖçÁâà(‰∏çÂ∏¶Êâ©ÂÆπÂíåÂºπÂ§π‰∫ï)ÈôêÊó∂Áâπ‰ª∑980ÈÖçÁΩÆËØ¶ÊÉÖcnc7075Ëà™Á©∫ÈìùttiÂàªÂ≠óÊªëÂ•ócnc7075Ëà™Á©∫Èìùg34ÂàªÂ≠óÊ£ïËâ≤Â•óÁÆ°Ê†ºÊ¥õÂÖãËøòÂéüÂàªÂ≠óÈáëÂ±ûÈ£ûÊú∫Â∫ß+ÊäóÂØíÈ£ûÊú∫Â§¥‰∏ãÊ≤âÂÜÖÁÆ°Â∫ß+‰∏çÂèØÂèëÂ∞ÑÂÆûÂøÉÁÆ°tti‰∏ì‰∏öÈáëÂ±ûÂÖâÁ∫§Êú∫ÁûÑÈí¢Âà∂Êâ≥Êú∫ËøûÊùÜ+Èí¢Âà∂Á´ûÊäÄorÂÜõÁâàÁ©∫ÊåÇÈáëÂ±ûÂºπÂ§πÂç°Ê¶´+ÈáëÂ±ûÂÜõÁâàÊâ≥Êú∫ÂêàÈáë‰∏≠Ë∫´+Èí¢Âà∂ÊèíÈîÄÂ•óË£ÖÂêàÈáëÂáªÈî§ÁªÑ(ÂèØÂçáÁ∫ßÈí¢Âà∂)Èí¢Âà∂Ê∞îÈòÄË∂ÖÁ®≥ÂÆöÈáëÂ±ûÂºπÂ§πË∞ÉËØïÂ•ΩÂèëË¥ß,Âà∞ÊâãÁõ¥Êé•Áé©!\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n22Ê¨æktmÂºØÈÅìÊâãÊúØÂàÄduke790ÈÖçÁΩÆÂçáÁ∫ß,ÂîÆ‰ª∑8.98‰∏á\n", "label": "ke790"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂú®ÁªèÂéÜ‰∫ÜÂéªÂπ¥Áñ´ÊÉÖÁöÑ‰∏•ÈáçÂΩ±Âìç‰πãÂêé,‰ªäÂπ¥ÂõΩÂÜÖÁöÑËΩ¶Â∏ÇÂèØ‰ª•ËØ¥ÊòØÁ•û‰ªôÊâìÊû∂,ÂêÑ‰∏™ËΩ¶‰ºÅÈÉΩ‰∏çÂÜçËóèÁùÄÊéñÁùÄ,Á∫∑Á∫∑ÈºìË∂≥Âπ≤Âä≤ÁßØÊûÅÁ†îÊñ∞,Âº•Ë°•ÂéªÂπ¥ÁöÑÊçüÂ§±„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∫§Ë≠¶ÊèêÈÜí:Ê±âÂÖ∞ËææÁöÑÁªàÁªìËÄÖÊù•‰∫Ü!Êñ∞suvÂ§ßÊ∞îÂ∞äË¥µ;2.0t+9atÈÖçÂõõÈ©±\n", "label": "Ê±âÂÖ∞Ëææ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂè¶Â§ñ‰ªéÂÆûËΩ¶Êù•Áúã,ÊÇ¨ÊµÆÂºèËΩ¶È°∂‰ª•ÂèäÂ§öËæêÊù°ËΩÆÂúàÁöÑÊê≠ÈÖç,ÈÉΩËÆ©ÂÆÉÂæàÊòØÁ¨¶ÂêàÂπ¥ËΩª‰∫∫ÁöÑÂÆ°ÁæéÁúºÂÖâ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ¶Ç‰ªä,2022Ê¨æÊñ∞Â∏ïËê®ÁâπÂÆ∂Êóè,È¶ñÊ¨°ÈááÁî®ÂèåÂâçËÑ∏ÁöÑÂ§ñËßÇËÆæËÆ°Á≠ñÁï•,Êª°Ë∂≥‰∏çÂêåÁöÑÁî®Êà∑ÈúÄÊ±Ç„ÄÇ\n", "label": "Â∏ïËê®Áâπ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈÉΩÁü•ÈÅì,‰ªäÂπ¥ÊØî‰∫öËø™‰∏ç‰ªÖÂú®Á∫ØÁîµÈ¢ÜÂüüÂèëÂ∏É‰∫ÜÈ¢ÜÂÖàÂêåË°å‰∏öÁöÑeÂπ≥Âè∞3.0,ËÄå‰∏îËøòÊé®Âá∫‰∫Üdm-iË∂ÖÁ∫ßÊ∑∑Âä®Á≥ªÁªü,ËÄåÈ¶ñÊê≠ËøôÂ•óÊ∑∑Âä®ÁöÑÁß¶plusÂèØË∞ì‚Äú‰∏äÂ∏ÇÂç≥ÁàÜÊ¨æ‚Äù,Â∑≤ÁªèËøûÁª≠Êï∞ÊúàÊéíÂêçËΩøËΩ¶È¢ÜÂüüÁöÑÈîÄÈáèÂâç‰∫î,ÊòæÁÑ∂Áß¶plusÁöÑÊàêÂäüÊúÄÂ§ßÁöÑÂäüËá£‰æøÊòØËøôÂ•ódm-iË∂ÖÁ∫ßÊ∑∑Âä®„ÄÇ\n", "label": "Áß¶plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nq2l2021Ê¨æ35tfsiËøõÂèñÂä®ÊÑüÂûãÊñ∞ËΩ¶Âê´Á®é‰ª∑:240680‰∫åÊâãËΩ¶ÂîÆ‰ª∑:\n", "label": "q2l"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏çË∂≥5‰∏áÂÖÉÁöÑÈáçÊú∫Â∑°Ëà™,800ccvÂûãÂèåÁº∏Ê∞¥ÂÜ∑,Âæ∑Â∞îÁ¶èÁîµÂñ∑,42kwÂäüÁéá\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËÄÅÂè∏Êú∫ÊèêÈÜí!Áî®ËΩ¶ÊåáÂçó:2021Ê¨æ‰∏∞Áî∞ÂáØÁæéÁëûÁªà‰∫éÊù•‰∫Ü!ÊØîÂ••Ëø™a6ÈÉΩÊºÇ‰∫Æ,ËøòË¶ÅÂï•ÈõÖÈòÅ\n", "label": "Â••Ëø™a6ÔºõÈõÖÈòÅÔºõÂáØÁæéÁëû"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊçÆÊµ∑Â§ñÂ™í‰ΩìÊä•ÈÅì,Áé∞Ê¨æct6ËΩ¶ÂûãÊó©Âú®2020Âπ¥2ÊúàÂ∑≤ÁªèÂú®ÁæéÂõΩÂÅú‰∫ß,ÊâÄ‰ª•‰ªñ‰ª¨Êé®ÊµãÊñ∞‰∏Ä‰ª£ct6ËΩ¶ÂûãÊàñËÆ∏ÂÆåÂÖ®ËΩ¨Âûã‰∏∫‰∏≠ÂõΩÁâπ‰æõËΩ¶Âûã„ÄÇ\n", "label": "ct6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËØ¥ÂÆûËØù,ËÄÅÊ¨æ‰∏äÊ±ΩÈÄöÁî®Âà´ÂÖãÂ®ÅÊúóÊúÄÂ§ßÁöÑ‰∏çË∂≥Â∞±ÊòØÂÖ®Á≥ªÊê≠ËΩΩ‰∏âÁº∏ÂèëÂä®Êú∫,ËôΩÁÑ∂Â§ñËßÇÊó∂Â∞öÂ§ßÊ∞î,ÊÄßËÉΩÂÆûÂäõ‰∏çÂá°,‰ΩÜÊòØ‰∏ÄÁúã‰∏âÁº∏Êú∫,Â∞±ËÆ©ÂæàÂ§ö‰∫∫ÊúõËÄåÂç¥Ê≠•!\n", "label": "Â®ÅÊúó"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nË∏è‰∏äÊú™Êù•ÊÑüÁöÑÊóÖÁ®ãÂÖ®Êñ∞ÂçáÁ∫ßÁöÑbmwÊô∫ËÉΩ‰∫íËÅîÁ≥ªÁªü,ËÆ©‰∫∫„ÄÅËΩ¶‰∏é‰∏ñÁïåÁöÑËûçÂêàÊõ¥Âä†ÈöèÂøÉÊâÄÊ¨≤„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÊäÄÊúØËÆ≤Â†Ç„ÄëÂÆùÈ™è510Ê∞îÂõäÊú™ÂºπÂá∫‰∫ã‰ª∂ÊµÖÊûê\n", "label": "ÂÆùÈ™è510"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏çÂèØÈîôËøáÁöÑË¥≠ËΩ¶ËâØÊú∫! 2021Ê¨æÁà±È©∞u5 pure,‰∏∫503kmË∂ÖÈïøÁ°¨Ê†∏Áª≠Ëà™‰π∞Âçï,‰Ω†ÈÄâÂØπ‰∫Ü\n", "label": "Áà±È©∞u5 pure"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÂ§ñËßÇ„ÄëÂ§ñËßÇÂæàÊª°ÊÑè,ÁúãÁùÄÂæàÁäÄÂà©,‰πüËÄêÁúã,Âπ¥ËΩªÂåñ,Êï¥‰ΩìËΩ¶ÂûãÁúãÁùÄ‰øÆÈïø,ÊñØÊñá„ÄêÂÜÖÈ•∞„ÄëÂÜÖÈ•∞ÂæàÁã¨Áâπ,Êúâ‰∫∫ËØ¥ËÄÅÊ∞î,‰ΩÜÊòØÊàëÊÑüËßâÂæàÊñ∞È¢ñ,Áé∞Âú®Â§ßÈÉ®ÂàÜËΩ¶ÈÉΩÊòØÈªëËâ≤ÂÜÖÈ•∞,ËßÜËßâÁñ≤Âä≥,Êç¢Êç¢Ê£ïËâ≤ÂÜÖÈ•∞ÂæàÂíåË∞êÊñá‰∏≠ÈÉ®ÂàÜÁ¥†ÊùêÊù•Ëá™ÁΩëÁªú,ËΩ¶ÂèãËßÇÁÇπ‰∏ç‰ª£Ë°®Ê≠§Âè∑Á´ãÂú∫,‰æµÂà†ËØ∑ËÅîÁ≥ª„ÄêÁ©∫Èó¥„ÄëÁ©∫Èó¥ÈÇ£ËøòÁî®ËØ¥Âêó,Êù†Êù†ÁöÑ,ÊÄé‰πàÂùêÊÄé‰πàËàíÊúç„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁéõÂ•áÊúµÂèØËÉΩÂú®ÊúàÂ∫ï‰∏æÂäûÁöÑÊàêÈÉΩËΩ¶Â±ï‰∏äÂ∏Ç,ÁõÆÂâçÈÖçÁΩÆÊöÇÊú™ÂÖ¨Â∏É,‰∏çËøáÊàë‰ª¨Â∑≤ÁªèÂú®Ê∑±Âú≥‰∏∫‰ºóËææweyÊóóËà∞Â∫óÊèêÂâçÁúãÂà∞‰∫ÜÂÆûËΩ¶,ÂÖàÊù•ÁúãÁúãÂÆÉÂà∞Â∫ïË°®Áé∞Â¶Ç‰Ωï„ÄÇ\n", "label": "weyÔºõÁéõÂ•áÊúµ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nplusÊï¥‰ΩìÁöÑÈÄ†Âûã‰∏éÁé∞Ê¨æËΩ¶Âûã‰øùÊåÅ‰∏ÄËá¥,‰∏çËøáÊç¢Ë£Ö‰∫ÜË¢´Áß∞‰∏∫‚ÄúÊòüÊàòÂºπÂ§¥‚ÄùÁöÑÂÆ∂ÊóèÂºèÂâçËÑ∏ËÆæËÆ°,ÂÖ®Â∞ÅÈó≠ÁöÑÂâçËÑ∏‰∏ç‰ªÖÁúã‰∏äÂéªÊõ¥Âä†ÁÆÄÊ¥Å,Ëøò‰ºòÂåñ‰∫ÜÁ©∫Ê∞îÂä®ÂäõÂ≠¶„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‚ÄúÁñ´‚ÄùÂ§ñÁöÑÊò•Â§©,Ëá™Áî±ÂÖâËÉΩÁªô‰Ω†Â∏¶Êù•ÊÑèÂ§ñÊÉäÂñú!\n", "label": "Ëá™Áî±ÂÖâ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∫´ÈÅì„ÄÅÂà´ÂÖã„ÄÅ‰∏≠ÈÇ¶‰ø°Ê±ΩËΩ¶Âº∫Âº∫ËÅîÊâã~~;Áé∞ËΩ¶ÈîÄÂîÆ,È¶ñ‰ªò‰ΩéËá≥1999ÂÖÉËµ∑;ÂÆ¢Êà∑ÁªèÁêÜÁîµËØù:;ÊÆµÁªèÁêÜ:18380390507;ÈôàÁªèÁêÜ:17380157597;ÂæêÁªèÁêÜ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂâçËÑ∏ÊñπÈù¢,Êñ∞ËΩ¶‰∏≠ÁΩëÁ´ã‰ΩìÊÑüÂæàÂº∫,Âπ∂‰∏îlÂûãÊó•Ë°åÁÅØÊê≠ÈÖçrsËøêÂä®Â§ñËßÇÂ•ó‰ª∂‰ª•ÂèäÂèëÂä®Êú∫Áõñ‰∏äÁöÑÁ≠ãÁ∫øËÆæËÆ°Â°ëÈÄ†‰∫ÜÂæàÂº∫ÁöÑÊîªÂáªÊÄß„ÄÇ\n", "label": "rs"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nid.4 crozz 550ÂÖ¨ÈáåÁúüÁª≠Ëà™,0È¶ñ‰ªòËµ∑,Êó•‰ªò59ÂÖÉËµ∑,È¢ÑÁ∫¶ËØïÈ©æÈÄÅÂ•ΩÁ§º!\n", "label": "id.4 crozz"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊØîÂ§©Á±ÅÂ∏ïËê®ÁâπÈ¶ôÂ§™Â§ö,Ê≠§ËΩ¶ÂìîÁöÑ‰∏ÄÂ£∞‰ªé26‰∏áË∑åÊàê13.1‰∏á,Á©∂ÊûÅÊùÄÊãõ!„ÄêÊèêËΩ¶ËÆ∞(782Êúü)„Äë\n", "label": "Â∏ïËê®ÁâπÔºõÂ§©Á±Å"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‚ÄúÊçû‚ÄùÂºèÊúçÂä°ÊòØ‰ªÄ‰πà‰ΩìÈ™å?ÂÖ®Êñ∞Á¨¨ÂÖ≠‰ª£Êé¢Èô©ËÄÖÁî®5‰∫øË±™Á§ºÁªô‰Ω†Ëß£ËØª\n", "label": "Êé¢Èô©ËÄÖ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂàÜÁ±ªÂºèÂ§ßÁÅØÈÖç‰∏äÁøºÂûãËøõÊ∞îÊ†ºÊûó,Á™ÅÂá∫Âº∫ÁÉàÁöÑÂ±ÇÊ¨°ÊÑü,ËÄåÈªëËâ≤ÁªÜËÉûÂΩ¢ËøõÊ∞îÊ†ºÊõ¥ÊúâÂá†ÁÇπ‚ÄúÂ§ßÈªÑËúÇ‚ÄùÁöÑÂë≥ÈÅì,Êï¥‰∏™Á≥ªÁªüËøúÊé•ÂÖâÁªÑÈÉΩÈááÁî®ledÂÖâÊ∫ê,ÊîØÊåÅËá™Âä®Â§ßÂûãÁÅØ,Ëá™ÈÄÇÂ∫îÈÅ•ËøëÂÖâ„ÄÅÂª∂ËøüÂÖ≥Èó≠Á≠âÂäüËÉΩ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêËø™ËΩ¶ËµÑËÆØ„ÄëÊë©Áôª‰πã‰∏ä¬∑Ê±â‰∏∫ËßÇÊ≠¢ | Ê±âdmÁ≥ªÂàóÂÖ®Êñ∞i&pÂº∫ÂäøÊù•Ë¢≠\n", "label": "Ê±âdm"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ≠§Â§ñËøòÊúâ‰∏ÄÂè∞Âü∫‰∫é‰∏âËè±2.4lÊèíÊ∑∑Âä®ÂäõÊÄªÊàêÁöÑËΩ¶Âûã,‰πüÂ∞ÜÂêåÊ≠•ÂèëÂîÆ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊó†ËÆ∫Âú®ÂâçÊéíËøòÊòØÂêéÊéí,mifa9ÂèØÂÆûÁé∞ÊàñËØ≠Èü≥ÊàñËß¶Â±è‚Äú‰∏ÄÈîÆÊéßÂÖ®ËΩ¶‚Äù,ÊØîÂ¶ÇÂÖ®ÁêÉÈ¶ñÂàõÁöÑ‚ÄúÂ¶ÇÂΩ±ÈöèÂΩ¢‚ÄùÂäüËÉΩ,Âú®‰πòÂÆ¢‰∫§Êç¢Â∫ß‰ΩçÊó∂,ÂéüÂÖàÁöÑÂ∫ßÊ§ÖËÆæÁΩÆ„ÄÅÊ§ÖËÉåÂ±èËÆæÁΩÆÁ≠â,ÈÉΩÂ∞Ü‚ÄúÊó†ÊÑü‚ÄùÂàáÊç¢Âà∞Êñ∞Â∫ß‰Ωç‰∏ä„ÄÇ\n", "label": "mifa9"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nf90sÂºÄÁÆ±ËßÜÈ¢ë\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂä®ÂäõÊñπÈù¢,ix35ÂÖ®Á≥ª‰æùÁÑ∂ÊòØ1.4tÂíå2.0l‰∏§Ê¨æÂèëÂä®Êú∫,1.4tÂèëÂä®Êú∫ÊúÄÂ§ßÂäüÁéá(kw)103,140ÂåπÈ©¨Âäõ,ÊúÄÂ§ßÊâ≠Áü©(n¬∑m)242,‰∏é‰πãÂåπÈÖçÁöÑÊòØ7ÈÄüÂπ≤ÂºèÂèåÁ¶ªÂêàÂèòÈÄüÁÆ±„ÄÇ\n", "label": "ix35"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nexeedÊòüÈÄîÂèëÂ∏ÉÊòüÊ†∏Âä®Âäõet-iÂÖ®ÊìéË∂ÖÊ∑∑,‚Äú33911‚ÄùÂºÄÂêØËÉΩÈáèËø∑Èí•\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‚Äúv6ÁâàÊú¨‚ÄùÁöÑÈ©¨Ëá™Ëææmx-5,‰ºöÈ£û‰∫Ü!\n", "label": "È©¨Ëá™Ëææmx-5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\ncs75plus ÈÇÄÊÇ®ËØïÈ©æ‰ºòË∂äÂÆâÂÖ®Ê∞îÂõäÊäÄÊúØ,ÂÖ®Êñπ‰ΩçÂÆâÂÖ®‰øùÊä§ÈïøÂÆâÊ±ΩËΩ¶,ËÆ©Âπ≥ÂÆâÂ∏¶ÊÇ®ÂõûÂÆ∂\n", "label": "cs75plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂõΩ‰∫ßÂ§ßÁâåsuv,Êñ∞ËΩ¶ÊúÄ‰Ωé‰ªÖ4‰∏á,ÊØîËΩøËΩ¶Á©∫Èó¥Â§ß1ÂÄç,‰π∞ÂÆùÈ™è510ÂêéÊÇî‰∫Ü\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§ß‰ºóÊàêÂäüÁøªË∫´,Â∞èÈÄîËßÇ,Êê≠1,5t,8atÂ∏¶ÂõõÈ©±.12‰∏áÁúãÂï•Êú¨Áî∞Áº§Êô∫\n", "label": "Áº§Êô∫ÔºõÈÄîËßÇ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁ¨¨‰∫å‰ª£cs75plus‰∏®ÊâìÂºÄÊòéÊó•,Á†¥Ê†ºÊñ∞Áîü\n", "label": "cs75plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÊúÄ‰∏çÊª°ÊÑè„Äëx1È©æÈ©∂‰ΩçË∞ÉÊï¥Â•ΩÂêé,‰ª™Ë°®‰∏ãË°åËΩ¶ÁîµËÑëÁ´üÁÑ∂Áúã‰∏çÂÆåÂÖ®~Âìé~ÊääË°åËΩ¶ÁîµËÑëÊîæ‰∏≠Èó¥‰∏çË°åÂêó?\n", "label": "x1"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂèà‰∏ÄÂõΩ‰∫ßËΩøË∑ë,ËΩ¶Èïø4Á±≥7,350ÂåπÈ©¨Âäõ4.6sÁ†¥Áôæ,ÂéüÂéÇËá™Â∏¶ÂíÜÂìÆÂ£∞Êµ™\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊâÄÊúâÊ†áÂáÜ8‰∏™ÂÖ®ÂΩ©Ëâ≤Êï∞Â≠óËÆæÂ§á, Âª∫Ê®°‰ªãË¥®ÂÖ∑ÊúâÈ´òË¥®ÈáèÁöÑËàíÈÄÇÊäÄÊúØ,Â¶ÇÂâçÊùøÈÄöÈ£é„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏ãÊñπÁöÑÈªëËâ≤Á£®Á†ÇÊùøÂíå‰∏§‰æßÁöÑÊéíÊ∞îÁªÑÂêàËøõ‰∏ÄÊ≠•ÊèêÂçá‰∫ÜÊï¥‰ΩìÁöÑËøêÂä®ÊÑü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞bmw x5,5Âπ¥Ë∂ÖÈïøË¥∑ËΩªÊùæË¥≠,Âø†ËØöÂÆ¢Êà∑‰∫´Âπ¥Âà©Áéá‰ΩéËá≥3.88%(ÂçïÂà©) ÂÆùÈ©¨‰∏≠ÂõΩ\n", "label": "bmw x5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ∂‰∫å„ÄÅÂÜÖÈ•∞ÁöÑÈÄ†ÂûãÁõ∏ÊØîËæÉesË¶ÅÁÆÄÊ¥ÅÂæàÂ§ö,‰∏ä‰∏ã‰∏§Êù°Á∫øÊÆµÂãæÂãíÂá∫ÁõæÁâåÂºèÁöÑ‰∏≠ÊéßÂè∞,ÊâìÂ≠îÁúüÁöÆ+Êú®Á∫πÈ•∞Êùø+‰ªøÁ¢≥Á∫§Áª¥È•∞ÊùøÁ≠âÈ´òÊ°£ÊùêÊñôÁöÑ‰ΩøÁî®Ëê•ÈÄ†ÁöÑË±™ÂçéÊÑüËøòÁÆó‰∏çÈîô„ÄÇ\n", "label": "es"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËÆ©Â§ßÂÆ∂ËøëË∑ùÁ¶ª‰ΩìÈ™åÂà∞‰∫Üx-palyÂ®±‰πêÂú∫ÊôØ„ÄÅx-sleepÁù°Áú†Âú∫ÊôØ„ÄÅx-goÊà∑Â§ñÂú∫ÊôØ„ÄÅx-lifeÁîüÊ¥ªÂú∫ÊôØ„ÄÅx-diyÂú∫ÊôØÁ≠â‰∫îÂ§ßÂú∫ÊôØÂäüËÉΩ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËß£ÊîæÂèåÊâã!29.9ÂÖÉËµ∑Êä¢Ë¥≠!ÂÖªËΩ¶Â•óÈ§ê,Á©∫Ë∞ÉÊ∏ÖÊ¥ó,Êó•Â∏∏‰øùÊ¥Å,‚ÄãÈÖçÈïú‰ºòÊÉ†...Ë∂ÖÂ§öÁ¶èÂà©Ëµ∂Á¥ßÁúã\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊó•‰∫ßÂ§©Á±ÅÊê≠ËΩΩÁöÑ8Ëã±ÂØ∏‰∏≠Â§ÆÂΩ©Ëâ≤Â±èÂπïuiÁïåÈù¢ÁöÑËÆæËÆ°Ê∏ÖÁàΩ‰∏î‰∫∫ÊÄßÂåñ,ÈÄöËøáËΩ¶Êú∫ËøûÊé•wi-fiËøòÂèØ‰∫´ÂèóÂÖ®ÁêÉnissanconnectÂú®Á∫øÂçáÁ∫ßÊúçÂä°„ÄÇ\n", "label": "Â§©Á±Å"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËá≥Ê≠§,ÁöìÂΩ±Â∑≤Â∞ÜËΩ¶Á≥ªÂä®ÂäõÁâàÊú¨Êâ©ÂÖÖÂÆåÊØï,ÂêåÊó∂Êã•ÊúâÁáÉÊ≤πÁâà„ÄÅÊ≤πÁîµÊ∑∑Âä®ÁâàÂíåÊèíÁîµÂºèÊ∑∑ÂêàÂä®ÂäõËΩ¶Âûã„ÄÇ\n", "label": "ÁöìÂΩ±"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nbigtruckÂçÉÁÇπÊµãËØïÂÜçÊ¨°ÂºÄÂêØ,ÂÖàÂ∏¶ÊÇ®ÁúãÁúãÂÜ†ÂÜõËΩ¶ÂûãÊñØÂ†™Â∞º‰∫öÊñ∞super 460 rÁöÑË°®Áé∞\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ª∑Ê†ºÂ¥©‰∫Ü!ËØ•ËΩ¶46‰∏á‰∏ÄË∑ØË∑åËá≥35‰∏á,ËÉñÊèçËà™Êµ∑ÂÆ∂Ê≤ÉÂ∞îÊ≤Éxc60,ÊäÑÂ∫ïÊ≠£ÂΩìÊó∂\n", "label": "Ê≤ÉÂ∞îÊ≤Éxc60ÔºõËà™Êµ∑ÂÆ∂"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏äÁè≠ÊóèÂºÄÂ∞èÂûãsuvÂ∞±Ë°å,ÁúãÁúãÈõ™ÈìÅÈæôc3-xr,Â•ΩÂºÄ„ÄÅÁúÅÊ≤π„ÄÅË∑ëÈ´òÈÄü‰∏çÈ£ò\n", "label": "Èõ™ÈìÅÈæôc3-xr"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nh6sÈááÁî®‰∫ÜÂìàÂºóÂìÅÁâåÂÖ®Êñ∞ÁöÑÈªëÈ≤®ÁæéÂ≠¶ËÆæËÆ°ËØ≠Ë®Ä,ÂâçËÑ∏ÈááÁî®‰∫ÜËè±ÂΩ¢ÂàáÈù¢ÂÖÉÁ¥†,ÂãæÂãíÂá∫‰∏ä‰∏ã‰∏§Èù¢,Â∞ÜÂ§ßÁÅØÁªÑ„ÄÅ‰∏≠ÁΩë„ÄÅËøõÊ∞îÊ†ºÊ†ÖÁ≠âÈÉ®ÂàÜÊ∏ÖÊô∞ÂàíÂàÜÂá∫Êù•,Ëê•ÈÄ†Âá∫‰∏ÄÁßç‰ΩéË∞É‰ΩÜÂèàÈîãËäíÊØïÈú≤ÁöÑËßÜËßâÂÜ≤Âáª„ÄÇ\n", "label": "ÂìàÂºóÔºõh6s"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ∂Ê†πÊú¨ÂéüÂõ†,ÊòØÊ±ΩËΩ¶ÊúçÂä°ÁöÑÂΩ¢ÊÄÅ‰∏éÂüéÂ∏ÇÁöÑÈúÄÊ±ÇÈöæ‰ª•ÂåπÈÖç„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§ñËßÇÊñπÈù¢,Êñ∞ËΩ¶ÂâçËÑ∏ÈÖçÂ§áÂ§ßÂ∞∫ÂØ∏Ê†ºÊ†Ö,Êê≠ÈÖç‰∏§‰æß‚ÄúÈï∞ÂàÄ‚ÄùÊ†∑ÂºèÂ§ßÁÅØÁªÑ,Ê∞îÂäøÂçÅË∂≥„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶Áü•ËØÜ!ÈïøÂüé‚ÄúÂèëÈ£ô‚Äù!ÊØîÂ••Ëø™q5ÊºÇ‰∫Æ,Áª≠Ëà™680km,ÁâπÊñØÊãâÈÉΩÁúºÁ∫¢\n", "label": "Â••Ëø™q5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁîµÊ±†ÊñπÈù¢,Êñ∞ËΩ¶Êê≠ËΩΩÂπøÊ±ΩÂüÉÂÆâÊúÄÊñ∞ÂèëÂ∏ÉÁöÑÂºπÂå£ÁîµÊ±†,Áª≠Ëà™ÊñπÈù¢,aionyÊã•Êúâ410km„ÄÅ500kmÂíå600km‰∏âÁßçÁª≠Ëà™ÁâàÊú¨‰æõÊ∂àË¥πËÄÖÈÄâÊã©„ÄÇ\n", "label": "aiony"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ªäÂπ¥ÊÉ≥‰π∞‰∏≠Â§ßÂûãsuv?Âª∫ËÆÆÁúãÁúã‰∏≠Â§ßÂûãsuvË¥®ÈáèÊéíÂêç,ÂÆùÈ©¨x5ÂâçÂçÅ,ÈÄîÊòÇ„ÄÅÊôÆÊãâÂ§ö‰ª§‰∫∫ÊÑèÂ§ñ\n", "label": "ÂÆùÈ©¨x5ÔºõÈÄîÊòÇÔºõÊôÆÊãâÂ§ö"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÊ¨ßÂ∞öÊ±ΩËΩ¶/ÈÇØÈÉ∏Ëæ∞Èë´„ÄëÈïøÂÆâÊ¨ßÂ∞öx7|ÂÜÖÂ§ñÂÖº‰øÆ,ÁîüÊù•‰ºòÁßÄ!\n", "label": "ÈïøÂÆâÊ¨ßÂ∞öx7"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊûóËÇØÈ£ûË°åÂÆ∂ÂÖ®Êñ∞Êä•‰ª∑Â∑≤ÂÖ¨Â∏É,‰ª∑Ê†º‰Ω†ÊÑèÊÉ≥‰∏çÂà∞,ËæìÂÖ•ÊâãÊú∫Âè∑ÂèØÊü•ËØ¢! Ê±ΩËΩ¶Êä•‰ª∑Â§ßÂÖ®\n", "label": "È£ûË°åÂÆ∂"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n2„ÄÅ7Êúà3Êó•,it‰πãÂÆ∂Ê∂àÊÅØ,youngÂÖâÂ∞èÊñ∞2023Ê¨æÁé∞Â∑≤ÂºÄÂêØÈ¢ÑÂîÆ,ËØ•ËΩ¶‰∏ªÊâìÁ∫ØÁîµÂæÆÂûãËΩ¶Â∏ÇÂú∫,ÂÖ®Á≥ª5Ê¨æËΩ¶Âûã,È¢ÑÂîÆ6.48‰∏áÂÖÉËá≥8.18‰∏áÂÖÉ,ÂØπÂ∫îcltcÁª≠Ëà™302ÂÖ¨ÈáåÂà∞408ÂÖ¨ÈáåÁöÑËΩ¶Âûã„ÄÇ\n", "label": "youngÂÖâÂ∞èÊñ∞"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËµìÁª≠Â•ãÊñóË∑ØÂêØËà™Êñ∞ÂæÅÁ®ã ‚Äî‚Äî ÊúÄÊñ∞‰∏Ä‰ª£lngËàπ‚Äúh1788a‚Äô‚ÄùËΩÆÁ†ÅÂ§¥Ê∞îËØï‰æßËÆ∞\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁªºÂêàÊï¥‰ΩìÁöÑËßÑÊ†ºÂèÇÊï∞Êù•Áúã,redmik50iÂ∫îËØ•ÊòØ‰∏ÄÊ¨æÂÆö‰Ωç‰∏≠Á´ØÁöÑ‰∫ßÂìÅ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ªé32‰∏áË∑åËá≥23‰∏áËµ∑;ÈÖç250È©¨Âäõ;8at;Ëøô3Ê¨æÂÆûÂäõ‰∏çÂº±;ÊäÑÂ∫ïÊó∂Êú∫Êù•‰∫Ü\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈô§Ê≠§‰πãÂ§ñ,Ê†πÊçÆÊúÄÊñ∞ÁΩë‰º†ÁöÑÈïøÂÆâÁ¶èÁâπÊú™Êù•‰∏§Âπ¥ÁöÑÊñ∞‰∫ßÂìÅËÆ°Âàí,ÂÖ∂‰∏≠Â∑≤ÁªèËÄÅÊéâÁâôÁöÑËíôËø™Ê¨ß‰πü‰ºöÊõ¥Êñ∞Êç¢‰ª£,ËÄåÁõÆÂâçÊñ∞‰∏Ä‰ª£ËíôËø™Ê¨ßÂ∑≤ÁªèÂú®Êµ∑Â§ñËøõË°åË∑ØËØï„ÄÇ\n", "label": "ËíôËø™Ê¨ß"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nk50proÂÆòÂÆ£ Â§©Áéë9000/2kÁõ¥Â±è120wÂø´ÂÖÖ5000mah | 80w?ËìùÂéÇËé∑ËÆ§ËØÅ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÂÆûÊàòÊ°à‰æã„ÄëÈõ∑Ê≤ÉÊ¨ßË±πÊãñÊãâÊú∫Êâì‰∏çÁùÄËΩ¶,Êâæ‰∏çÂà∞ÊïÖÈöúÁÇπ?ÂèØËÉΩÊòØËøô‰∏™ÂéüÂõ†\n", "label": "Èõ∑Ê≤ÉÊ¨ßË±π"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§öÁúã‰∏ÄÁúºÂ∞±ÁúÅÈí±! ÂÖ®Êñ∞ÂêâÂà©ÊòüË∂älÊúÄÊñ∞Â∫ï‰ª∑ÊõùÂÖâ,ËÄÅËΩ¶‰∏ªÈÉΩÂì≠‰∫Ü,ÁÇπÂáªÊü•ËØ¢\n", "label": "ÊòüË∂äl"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÜÖÈ•∞ÊñπÈù¢,‰ºòÁæéÁöÑ‰∫ëÊπñÈòîÂ¢ÉÁéØÊä±Âºè‰∏≠ÊéßÂè∞ËÆæËÆ°,12.3ÂØ∏Â§öÁÇπËß¶ÊéßÊ∂≤Êô∂Â±è+10.25ÂØ∏Ê∂≤Êô∂‰ª™Ë°®ÁõòÈ´òÊ∏ÖÂèåÂ±è,Á´ãÂàªÂ∞±ËÉΩÊäì‰ΩèÊàë‰ª¨ÁöÑÁúºÁêÉ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂä®ÂäõÊñπÈù¢,ÈìÉÊú®acrossÊê≠ËΩΩ‰∫Ü‰∏ÄÂè∞2.5lËá™ÁÑ∂Âê∏Ê∞îÂèëÂä®Êú∫+ÁîµÂä®Êú∫ÊâÄÁªÑÊàêÁöÑÊèíÁîµÂºèÊ∑∑ÂêàÂä®ÂäõÁ≥ªÁªü,‰º†Âä®ÊñπÈù¢,‰∏é‰πãÂåπÈÖçÁöÑÊòØe-cvtÂèòÈÄüÁÆ±„ÄÇ\n", "label": "ÈìÉÊú®across"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂá∫ÂîÆÂ§ß‰ºóÂ∏ïËê®ÁâπÈ¢ÜÂüü,ÊâãÂä®Êå°,Á≤æÂìÅËΩ¶ÂÜµ,ÂéüÁâàÊó†‰∫ãÊïÖ,ÊâãÁª≠ÈΩêÂÖ®,ÈöèÊó∂ËøáÊà∑„ÄÇ\n", "label": "Â∏ïËê®Áâπ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ¢ÖËµõÂæ∑ÊñØ-Â•îÈ©∞ÈïøËΩ¥Ë∑ùeÁ∫ßËΩ¶,Êúà‰ªòÊ¨æ899ÂÖÉËµ∑,ÊúÄÈ´ò6000ÂÖÉ‰øùÈô©ÊîØÊåÅ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËøôÂõΩ‰∫ß6Â∫ßsuvÊõæË¢´ÁúãË°∞,Â¶Ç‰ªäËøûÁª≠2‰∏™ÊúàÈîÄÈáèÁ†¥‰∏á,ÂêàËµÑÁúãÂà∞‰πüÊå†Â§¥\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n3999ÂÖÉmagic4ÊãçÁÖßÁ¨¨‰∏Ä?‰∏çË¶ÅËØØ‰ºö,ÈÇ£ÊòØÊåá7999ÂÖÉÁöÑmagic4Ëá≥ËáªÁâà\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n2022Âπ¥1Êúà1Êó•Ëµ∑,ÊàëÂõΩÂ∞ÜÂèñÊ∂à‰πòÁî®ËΩ¶Âà∂ÈÄ†Â§ñËµÑËÇ°ÊØîÂèäÂêå‰∏ÄÂ§ñÂïÜÂè™ÂÖÅËÆ∏Âª∫Á´ã‰∏§ÂÆ∂Âèä‰ª•‰∏ãËΩ¶‰ºÅÁöÑÈôêÂà∂„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ∑ùÂ¥éÂ§ßÊéíÊñ∞ÂìÅ,ÂèåÁº∏4ÁßíÁ†¥Áôæ,ÊûÅÈÄü200km/h,Êñ∞Ê¨æÂîÆ76600ÂÖÉ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰π∞ËΩ¶‰πüÊúâÂÖ´‰∏™ÊúàÁöÑÊó∂Èó¥,ÂºÄ‰∫Ü6500ÂÖ¨Èáå,gl6ÊúÄËÆ©ÊàëÊª°ÊÑèÁöÑÂ∞±ÊòØÂÆÉÁöÑÂ§ñËßÇËÆæËÆ°ÂíåÁ©∫Èó¥Ë°®Áé∞,Êó¢Êó∂Â∞ö‰∏™ÊÄßÂèàÊúâÂïÜÂä°ËΩ¶ÁöÑÊÑüËßâ,ËÆ©‰∫∫ÁúºÊô¥‰∏Ä‰∫Æ„ÄÇ\n", "label": "gl6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶Â±ïÂçèÂä©240/Â§©  ÂïÜÂú∫‰øÉÈîÄ220/Â§©(ÊàêÈÉΩË∂ÖÂÖºÂêõ4Êúà4Êó•Âèä‰ª•ÂêéÂÖºËÅåÊõ¥Êñ∞\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁé∞Ê¨æct6ÊåáÂØº‰ª∑‰∏∫39.97-48.97‰∏áÂÖÉ,‰ªéÂõΩÂÜÖÂ∏ÇÂú∫Êù•Áúã,ct6Â∞ΩÁÆ°ÂÖ•Èó®ËΩ¶ÂûãÊåáÂØº‰ª∑Âú®‰ºòÊÉ†ÂÆåÂêéÁõ¥ÈÄº30‰∏áÂÖÉÂ§ßÂÖ≥,‰ΩÜÂπ≥ÂùáÊúàÈîÄÈáè‰πüÂè™ÊúâÂçÉËæÜÂ∑¶Âè≥ÊÉÖÂÜµ‰∏çÂÆπ‰πêËßÇ„ÄÇ\n", "label": "ct6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÆòÂÆ£‰∏®ÂÖ®Êñ∞Á¶èÁâπÊé¢Èô©ËÄÖÊ≠£Âºè‰∏äÂ∏Ç,ÈÖç4‰ª£2.3tÂºïÊìé+10at,Âçñ33.98‰∏á\n", "label": "Êé¢Èô©ËÄÖ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂπøÊ±Ω‰∏∞Áî∞Ê±âÂÖ∞Ëææ Ê≤°‰π∞ËΩ¶ÁöÑÊúâÁ¶èÂï¶,Ê±âÂÖ∞ËææÊä•‰ª∑Êñ∞È≤úÂá∫ÁÇâ,ËæìÂÖ•ÊâãÊú∫Âè∑Âç≥ÂèØÊü•ËØ¢Â∫ï‰ª∑!\n", "label": "Ê±âÂÖ∞Ëææ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂõæ‰∏∫2020Âπ¥ÁßãÂ≠£Â∑°Â±ïÁé∞Âú∫Âú∫ÊôØ Áî±‰∫éÂ¢ûÈïøÂäøÂ§¥Â§öÂπ¥‰øùÊåÅËøÖÁåõÊÄÅÂäø,‰∏âÂõõÁ∫ßÂ∏ÇÂú∫‰∏ÄÁõ¥Â§áÂèó‰∏öÁïåÁöÑÂÖ≥Ê≥®,‰πüÊòØËøëÂá†Âπ¥Êù•È¢á‰∏∫ÈáçË¶ÅÁöÑÁÉ≠Èó®ËØùÈ¢ò„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁéãÁÖúÂÖ®:teslaÁöÑËá™Âä®È©æÈ©∂‰ªäÂπ¥Â∞±Ë¶ÅÊù•‰∫Ü?Âà´ÊÄ•,ÂÖàÁúãÁúãÊàëÁöÑËøô‰ªΩÂàõÊñ∞Âú∞Âõæ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂõ†Ê≠§,ÁùÄÈáç‰∫éÂä®ÂäõÁ†îÂèëËÄåÂøΩËßÜÂ§ñËßÇËÆæËÆ°,‰ºº‰πé‰πüÂú®ÊÉÖÁêÜ‰πã‰∏≠„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶Â∞æÈÉ®ÂàÜ,Êï¥‰ΩìËÆæËÆ°È•±Êª°ÂéöÈáç,Êï¥‰∏™È£éÊ†º‰æùÁÑ∂Ëµ∞ÁöÑÊòØÊ≤âÁ®≥Ë∑ØÁ∫ø,‰∏ÄÊù°Èì∂Ëâ≤È•∞Êù°Â∞Ü‰∏§‰æßÂ∞æÁÅØËøû‰∫ÜËµ∑Êù•,‰∏éct6Â¶ÇÂá∫‰∏ÄËæô;\n", "label": "ct6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂèëÂä®Êú∫ÂÖÖÂàÜÊåñÊéòÂçï‰∏™Ê∞îÁº∏ÁöÑÊΩúËÉΩ,ÈÄöËøáÊô∫ËÉΩÂ§öÁ∫ßÊéßÂà∂ÈÄâÂèñÊúÄ‰Ω≥ÁöÑÊ∞îÈó®ÂçáÁ®ãÈÄÇÊó∂ÂàáÊç¢Âá∫‚ÄúÂõõÁº∏È´òÊÄßËÉΩÊ®°Âºè‚Äù„ÄÅ‚ÄúÂõõÁº∏ÁªèÊµéÊ®°Âºè‚Äù„ÄÅ‚Äú‰∏§Áº∏Ë∂ÖÁªèÊµéÊ®°Âºè‚Äù‰∏âÁßçÂ∑•‰ΩúÊ®°Âºè,Â†™Áß∞ÂèØÁõêÂèØÁîú,Áî±48vÁîµÊú∫„ÄÅ48vÁîµÊ±†„ÄÅÁîµÊµÅÂèòÂéãÊ®°ÂùóÂíåÊ∑∑ÂêàÂä®ÂäõÊéßÂà∂ÂçïÂÖÉÁªÑÊàêÁöÑËΩªÊ∑∑Á≥ªÁªü‰∏çÂÖâËÆ©Êñ∞Ê¨æxt4Ê≤πËÄóÈôç‰Ωé5-6%,ËøòËøõ‰∏ÄÊ≠•ËÆ©Âä®ÂäõËæìÂá∫Êõ¥Âä†Êô∫ËÉΩÂíåÈöèÂøÉ,Ëµ∑Ê≠•„ÄÅÊèêÈÄü„ÄÅÂä†ÈÄüË∂ÖËΩ¶Êõ¥Âä†Âú∞ÊµÅÁïÖ„ÄÇ\n", "label": "xt4"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêËìùÁõõÁü•ËØÜÂ†Ç„ÄëÈ©¨ÊñØÂÖã:Â∞ÜÂú®2024Âπ¥Â∞ÜÁâπÊñØÊãâ‰ªéÁîµÊ±†ËΩ¨ÂêëÊ∞¢ËÉΩ, Á¨¨1ËæÜÁâπÊñØÊãâÊ∞¢ÁáÉÊñôÁîµÊ±†Ê±ΩËΩ¶‰∏∫\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂèà‰∏ÄË±™Âçésuv‚ÄúÂ¶•Âçè‚Äù‰∫Ü!‰ªé28‰∏áÈôçËá≥16‰∏á,Áõ¥Èôç12‰∏áËøòË¶ÅÂï•ÈÄîÊòÇ\n", "label": "ÈÄîÊòÇ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËøôÂè∞2.0tÊ±ΩÊ≤πÂèëÂä®Êú∫ÈùûÂ∏∏ÊòæËëóÁöÑÁâπÁÇπÊòØÂú®Èôç‰ΩéÁáÉÊ≤πÁöÑÊÉÖÂÜµ‰∏ãÂ¢ûÂä†Âä®ÂäõËæìÂá∫,Êõ¥Âä†ÈÄÇÂêàÂ±ÖÂÆ∂‰ΩøÁî®,2.0tÂä®ÂäõËøòÊòØË∂≥Â§üÂπ≥Â∏∏Êå•Èúç,Âõ†‰∏∫ÂÆÉÊê≠ËΩΩ‰∫ÜÂèØÂèòÊ∞îÈó®ÊéßÂà∂‰ª•ÂèäÂèåÊ∂°ËΩÆÂ¢ûÂéãÂíå48‰ºèÁîµÂä®Á≥ªÁªü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁ©∂ÊûÅÂ••‰πâÂ§ßÊùÄÊãõ!Ê≠§ËΩ¶‰∏ÄÁú®Áúº31‰∏áÂ∞±Ë∑åÊàê‰∫Ü16.7‰∏á,ÈÄîËßÇlÈÄîËßÇxÊÄùÁª™‰∏áÂçÉ,Â£ÆÂ£´Êñ≠ËÖï\n", "label": "ÈÄîËßÇl"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏∞Áî∞Èõ∑Âáå Âπ∏‰∫èÊ≤°‰π∞Êó©!‰∏∞Áî∞Èõ∑Âáå‰ºòÊÉ†‰∫Ü!Áé∞Âú®‰π∞ËÉΩÁúÅÂ•ΩÂá†‰∏á,‰∏ÄÈîÆËé∑ÂèñÂ∫ï‰ª∑!\n", "label": "Èõ∑Âáå"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËßÜÁ∫øÁßªËá≥ËΩ¶ÂÜÖ,ÂÖ®Ê∂≤Êô∂‰ª™Ë°®Âíå‰∏≠ÊéßÂ§öÂ™í‰ΩìÁöÑÂèåÂ§ßÂ±èÈÖçÂ§á,Âä†‰πãÁâ©ÁêÜÊåâÈîÆÂèòÊõ¥ÊàêËß¶ÊéßÂºèÁöÑËÆæËÆ°ÂíåÁîµÂ≠êÊå°Êää,ÁßëÊäÄÊÑüÊñπÈù¢‰πüÊ≤°ÊúâËêΩ‰∫é‰∏ãÈ£éÁöÑË∂ãÂäø„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊãçÊëÑÂà∞ÁöÑÂ±ïËΩ¶‰∏∫È¢ÑÂîÆ‰ª∑52‰∏áÂÖÉÁöÑeditiononeËâ∫ÂàõÂÖ∏ËóèÁâà,Âë®Ë∫´ÊúâÂ§ßÈáèÈªëËâ≤ËøêÂä®Ë£ÖÈ•∞Â•ó‰ª∂,21Ëã±ÂØ∏rsdesign‰∏ìÂ±ûËΩÆÂúà‰πüÈùûÂ∏∏ÊÉπÁúº„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰º†ÁªüÁöÑ‰∏≠ÊéßÂ±è‰πüÊç¢Êàê‰∫ÜËøôÁßçÊÇ¨ÊµÆÂºèÁöÑÁªìÊûÑ,ÂåÖÊã¨Á©∫Ë∞ÉÂá∫È£éÂè£‰ª•ÂèäÊåâÈîÆÂå∫ÈÉΩÂÅö‰∫ÜÈáçÊñ∞Â§ÑÁêÜ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁî±‰∫éÊ≤°ÊúâÂèëÂä®Êú∫,ÂºïÊìéËà±ÂèòË∫´ÂâçÂ§áÂé¢,Âπ∂‰∏îËøô‰∏™ÂâçÂ§áÂé¢Êã•ÊúâËøë400lÁöÑÂÇ®Áâ©Á©∫Èó¥,ÈÖçÂêàÂ∞æÈÉ®ËΩ¶Êñó,Êï¥ËΩ¶ÁöÑË£ÖËΩΩÂÇ®Áâ©ËÉΩÂäõÂçÅÂàÜÂèØËßÇ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂπøÊ±ΩÊ≠£ÂºèÊâìÂìçÁ¨¨‰∏ÄÊû™!ÂõΩ‰∫ß‚Äúq5\"Ê≠£Âºè‰∏äÂ∏Ç,Êñ∞ËΩ¶ÂîÆ‰ª∑‰∏çË∂≥6‰∏áËµ∑,3.9ÁßíÁ†¥Áôæ,Ê∫úËÉåÂºèËΩ¶Ë∫´ÊØîÂç°ÂÆ¥Â∏ÖÊ∞î\n", "label": "q5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈõ™ÈìÅÈæôc3-xr 2019Ê¨æ 230thp ÂèåÁ¶ªÂêàË∂äÈ¢ÜÁâà ÂõΩviÁöÑÂ∞∫ÂØ∏ÊòØ4282/1748/1557mm,ËΩ¥Ë∑ù‰∏∫2655mm,ËΩ¶‰æßÁÅµÂä®,ÊµÅÁïÖÁöÑÁ∫øÊù°ËÆæËÆ°Áªô‰∫∫‰∏ÄÁßçÂçèË∞ÉÁöÑÁæéÊÑü„ÄÇ\n", "label": "Èõ™ÈìÅÈæôc3-xr"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁ©∫Ê∞îÊª§ËäØ: Á©∫Ê∞îÊª§ËäØÁöÑ‰∏ªË¶Å‰ΩúÁî®ÊòØÈòªÈöîÂèëÂä®Êú∫Âú®ËøõÊ∞îËøáÁ®ã‰∏≠Âê∏ÂÖ•ÁöÑÁ≤âÂ∞òÂíåÈ¢óÁ≤í,Â¶ÇÊûúÊª§ÁΩëÈïøÊúüÂæó‰∏çÂà∞Ê∏ÖÊ¥ÅÂíåÊõ¥Êç¢,Â∞±Êó†Ê≥ïÂ∞ÜÁÅ∞Â∞òÂíåÂºÇÁâ©Êãí‰πãÈó®Â§ñ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÂ§©Ê¥•ÂíåÂáålexus|Ê¥ªÂä®ÊãõÂãü„ÄëÊò•Êó•Êò•Ëµ∑Ëâ≤ ËôéÂπ¥ËôéÁîüÂ®Å‚Äî‚Äî Êò•Â≠£ÈáçÁÇπËΩ¶ÂûãÂìÅÈâ¥‰ºö\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊúÄÈ´òÁª≠Ëà™610km! Êê≠31Ëã±ÂØ∏Â®±‰πêÂ±è ÂÆùÈ©¨ÂÖ®Êñ∞Á∫ØÁîµÂä®i7ÂÆòÂõæÊõùÂÖâ\n", "label": "i7"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÆãmaxÂÜÖÈ•∞ÊòæÂæóÂçÅÂàÜÂπ¥ËΩª,‰∏≠ÊéßÂè∞‰ΩøÁî®‰∫ÜÂ§ßÈù¢ÁßØÁöÑÈì∂Ëâ≤È•∞ÊùøËøõË°åË£ÖÈ•∞,ÁúãËµ∑Êù•ÊØîËæÉÊó∂Â∞ö„ÄÇ\n", "label": "ÂÆãmax"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊØî‰∫öËø™ÂÆãplusÊï¥ËΩ¶ÊºÜËÜúÂπ≥ÂùáÂéöÂ∫¶Á∫¶‰∏∫105.9 Œºm,Êï∞ÊçÆÂ±ÇÈù¢Â∑≤Ë∂ÖËøá‰∏≠Á∫ßËΩ¶Ê†áÂáÜÂÄº(‚â•90Œºm),ËôΩÁÑ∂‰∏éÈ¢ÜÂÖã01Áõ∏ÊØî‰ªçÊúâ‰∏çÂ∞ëÂ∑ÆË∑ù,‰ΩÜË°®Áé∞‰∏≠ËßÑ‰∏≠Áü©,Âü∫Êú¨Á¨¶ÂêàÈ¢ÑÊúü„ÄÇ\n", "label": "ÊØî‰∫öËø™ÂÆãplus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶ÂÜÖÁöÑËÆæËÆ°ÈÅµÂæ™‰∫ÜËΩ¶Ë∫´ÁöÑÈ´òÁßëÊäÄÁÆÄÊ¥ÅÈ£éÊ†º,ÈááÁî®‰∫ÜÁéØÊä±ÂºèÈ©æËà±ËÆæËÆ°‰æß,ÈÖçÂêà‰∏≠ÊéßÂè∞ÁÆÄÊ¥ÅÁöÑÁ∫øÊù°‰ª•ÂèäÂèåËâ≤ÂÜÖÈ•∞Ëâ≤Ë∞É,‰∏∫ËΩ¶ÂÜÖÊèê‰æõ‰∫ÜÊûÅÂÖ∑Â±ÇÊ¨°ÊÑüÁöÑËßÜËßâÊïàÊûú„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËÄÅÂ§™Â§™È´òÂØø,Â§ßÂÑøÂ≠êÂºÄÂ•îÈ©∞,‰∫åÂÑøÂ≠êÂºÄÂÆùÈ©¨,Á©∑Â•≥Â©øÊâìÁîµËØùÈóÆ:ÊàëÈ£ûÊú∫ÂÅúÂì™Èáå\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞ÂìÅ‰∏äÂ∏Ç|‰∏≠ÂûãÁÇâ‚Äú‰∏≠Â∞Ü‚Äùzx-1Âº∫ÂäøÂá∫Âáª\n", "label": "zx-1"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÆÉÁöÑÂâçËÑ∏ÈÖçÂ§á‰∫ÜÂÖ®Êñ∞ÂÆ∂ÊóèÊ†∑ÂºèÁöÑËøõÊ∞îÊ†ºÊ†Ö,Âπ∂Âú®ÂÖ∂‰∏≠Âä†ÂÖ•‰∫ÜÁÜèÈªëÁªáÁΩëÂíåÂúÜÂΩ¢ÁÅØÂÖ∑„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁúüÊ≠£ÁöÑ\"Êó•Á≥ªÂ•ΩËΩ¶\",Êï¥ËΩ¶ËøõÂè£Ë∫´‰ªΩ,ÊìçÊéßÂ¶ÇÂêå‰∫∫ËΩ¶Âêà‰∏Ä\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂØπ‰∏çËµ∑,Êàë‰ª¨Êù•Êôö‰∫Ü,‰∏ÄÊ±Ω-Â§ß‰ºóid.4 crozzÊó•‰æõ59ÂÖÉ,ÁîµÂä®suvÂºÄÂõûÂÆ∂ËØïÈ©æÂæó150ÂÖÉÂ•ΩÁ§º\n", "label": "‰∏ÄÊ±Ω-Â§ß‰ºóid.4 crozz"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÁîµÊñ∞„ÄëÁâπÊñØÊãâ4680Â§ßÂúÜÊü±ÁîµÊ±†ËÉΩÂê¶ÂºïÈ¢Ü‰∏ã‰∏Ä‰ª£ÊäÄÊúØÊñπÂêë?‚Äî‚ÄîÂä®ÂäõÁîµÊ±†Êñ∞ÊäÄÊúØÂ±ïÊúõÁ≥ªÂàóÊä•Âëä‰∫å(ÊÆ∑‰∏≠Êû¢/ÈÉùÈ™û/ÈªÑÂ∏ÖÊñå\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÁß¶ÁöáÂ≤õÈïøÊ∫±¬∑5Âë®Âπ¥„ÄëÂπøÊ±Ω‰º†Á•∫ÈïøÊ∫±Â∫ó5Âë®Âπ¥Â∫óÂ∫Ü,ÈíúÊÉ†‰∏çÊñ≠!Ë±™Á§º‰∏çÊñ≠\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞Ê¨æds7Âú®ÂÜÖÈ•∞ÈÖçÁΩÆ‰∏äÊîπÂä®ÂπÖÂ∫¶ËæÉÂ§ß,‰∏çÁÆ°ÊòØÊ°£Ê¨°‰∫¶ÊàñÊòØÁßëÊäÄÊ∞¥ÂáÜÈÉΩÊúâÁùÄÊòéÊòæÊèêÂçá„ÄÇ\n", "label": "ds7"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞‰∏Ä‰ª£ÈïøËΩ¥Ë∑ùeÁ∫ßËΩøËΩ¶‰ª•ÂÖ®Êñ∞ÁõæÂΩ¢Ê†ºÊ†ÖËÆæËÆ°Êê≠ÈÖçÁªèÂÖ∏Á´ãÊ†á,Ê†ºÊ†ÖÈááÁî®Êõ¥Âä†Âá∏ÊòæÁßëÊäÄÊÑüÁöÑÂúÜËßíËÆæËÆ°,Êó¢‰ºòÈõÖÂèà‰∏çÂ§±Ê¥ªÂäõ,ÈÖçÂêàÊ∫ê‰∫éËøàÂ∑¥Ëµ´sÁ∫ßËΩøËΩ¶ÁöÑË¥ØÁ©øÂºèÂâçÂåÖÂõ¥ËÆæËÆ°,ËÆ©ËΩ¶Â§¥ËßÜËßâÊïàÊûú‰∏äÊâ¨,Ëá™‰ø°‰πãÂßøÂ∞ΩÊòæÁ•ûÈáá‰∏çÂá°,‰∏∞ÂØåÈïÄÈì¨Ë£ÖÈ•∞ÁöÑËøêÁî®,Â∞ÜÁ≤æËá¥ÂíåË±™ÂçéËøõ‰∏ÄÊ≠•ÂçáÁ∫ß„ÄÇ\n", "label": "ËøàÂ∑¥Ëµ´sÁ∫ßÔºõeÁ∫ß"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nbj60ËøòÈÖçÂ§áË∂äÈáéÁâπËâ≤Êô∫ËÉΩÈ©æÈ©∂ËæÖÂä©,‰ª•ÂèäË∂äÈáéÁâπËâ≤Êô∫ËÉΩÁΩëËÅîÊäÄÊúØ,ÂÜÖÈ•∞ÊñπÈù¢Êê≠ËΩΩ‰∫Ü10.25Ëã±ÂØ∏Ê∂≤Êô∂‰ª™Ë°®ÂíåhudÊä¨Â§¥ÊòæÁ§∫Â±è,12.8Ëã±ÂØ∏‰∏≠ÊéßÂ±èÂÜÖÁΩÆÊô∫ËÉΩËØ≠Èü≥„ÄÅatsÈ©æÈ©∂ÁïåÈù¢„ÄÅÂ§öÂ™í‰ΩìÂ®±‰πêÁ≥ªÁªü„ÄÅÂØºËà™‰ª•ÂèäÂá∫Ë°åÊúçÂä°Á≠â,Âè¶Â§ñËøòÊîØÊåÅÊï¥ËΩ¶fotaÂçáÁ∫ß„ÄÇ\n", "label": "bj60"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰Ωú‰∏∫‰∏ÄÊ¨æÁ∫ØÁîµËΩ¶Âûã,ÂÖ®Êñ∞bmwi3ÊëÜËÑ±‰∫Ü‰º†ÁªüÁöÑÊéíÊ∞îÁÆ°ÂíåÊï£ÁÉ≠ÈôêÂà∂,ËøôËÆ©ËÆæËÆ°Â∏à‰ª¨ÊúâÊú∫‰ºöÂú®ÂèçÂÖâÁÅØ‰∏ãÂä†ÂÖ•‰∫ÜÊõ¥Âä†ÊâÅÂπ≥ÂÆΩÂ§ßÁöÑÂ∞æÈÉ®Êâ©Êï£Âô®,Ëê•ÈÄ†Á°¨ÊúóÈ•±Êª°ÁöÑËßÜËßâÂÜ≤Âáª,ÂêåÊó∂Â∏ÆÂä©Á©∫Ê∞îÂø´ÈÄüÈÄöËøáÂΩ¢ÊàêÂº∫Â§ß‰∏ãÂéãÂäõ,Â∞ÜÈ´òÈÄüË°åÈ©∂ÁöÑËΩ¶Ë∫´Áâ¢Áâ¢‚ÄúÈíâ‚ÄùÂú®Ë∑ØÈù¢,Â∏¶Êù•ÊûÅËá¥ÁöÑÈ©æÈ©∂‰ΩìÈ™å,ÂÜç‰∏ÄÊ¨°‰∏∫ËÆæËÆ°Ëµã‰∫à‰∫ÜÂÆûÈôÖÁöÑÂäüËÉΩÊÑè‰πâ„ÄÇ\n", "label": "bmwi3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊØîÊ≤°ckdÁöÑ790Ëøò‰æøÂÆú,ktm 890 duke r Ê≠£ÂºèÂèëÂ∏É\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËÄå‰∏î‰∏§‰æßÁöÑÂ§ßÁÅØÁªÑÈÄ†ÂûãÂæàÊºÇ‰∫Æ,ÂΩìÂ§úÈó¥ÁÇπ‰∫ÆÊó∂ÂºÄÂá∫ÂéªÂõûÂ§¥ÁéáÁàÜÈ´ò„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂæÄÊúüÁ≤æÂΩ©ÁÇπÂáª‰∏äÊñπÂÖ≥Ê≥®Ê±ΩËΩ¶‰πãÂÆ∂ÂÖ¨‰ºóÂè∑dsÂìÅÁâåÊóó‰∏ãÁöÑËΩ¶ÂûãÈÉΩÈùûÂ∏∏ÊúâÁâπËâ≤,‰ªäÂ§©Ë¶ÅÁªôÂ§ßÂÆ∂‰ªãÁªçÁöÑÊòØ2021Ê¨æds3Êñ∞ËÉΩÊ∫ê,‰Ωú‰∏∫Â∞èÂûãÊñ∞ËÉΩÊ∫êsuvÂ∏ÇÂú∫ÈáåÁöÑ‰∏Ä‰ªΩÂ≠ê,ÂÆÉÂêÑÊñπÈù¢ÁöÑÁªºÂêàË°®Áé∞ËøòÊòØ‰∏çÈîôÁöÑ„ÄÇ\n", "label": "ds3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÂæêÂ∑ûÂ∞äÁî∞„ÄëÂÖ®Êñ∞Á¨¨Âõõ‰ª£Ê±âÂÖ∞Ëææ‚Äú5+2+7‚ÄùhighÁîüÊ¥ª‚Äî‚ÄîÊ≠¶Ê±âÁ´ô\n", "label": "Ê±âÂÖ∞Ëææ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§ßÁÅØÁöÑÈÄ†ÂûãËæÉ‰∏∫Êñ∞È¢ñ,Ê®™Ë¥ØÁöÑledÁÅØÂ∏¶Â∞ÜÁÅØËÖîÂàÜ‰∏∫‰∏ä‰∏ã‰∏§Â±Ç,‰∏äÊñπ‰∏∫Âõõ‰∏™ÊñπÂΩ¢Ê†∑ÂºèÁªÑÊàêÁöÑÁü©ÈòµÁÅØÁªÑ,‰∏ãÊñπÂàô‰∏∫ÂúÜÂΩ¢Â§ßÁÅØ,ÂèØÊîØÊåÅËá™Âä®ÂºÄÈó≠ÂäüËÉΩ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞Êâã‰∏äË∑Ø!‰π∞suvÁöÑÂèØ‰ª•ÁúãÂÆÉ;ËΩ¶Èïø5Á±≥2ÊØîÊôÆÊãâÂ§öÈú∏Ê∞î;2;0tÂÖ®Êó∂ÂõõÈ©±\n", "label": "ÊôÆÊãâÂ§ö"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ±ΩËΩ¶‰∫ß‰∏öÂú®ÂõΩÂÜÖÊúÄËì¨ÂãÉÂèëÂ±ïÁöÑ‰∏âÂçÅ‰ΩôÂπ¥Èáå,‰∏ÄÁõ¥‰ª•‰º†Áªü4sÂ∫óÊ®°Âºè‰∏∫‰∏ªË¶ÅÁªàÁ´ØÈîÄÂîÆÊîØÊíë,‰ΩÜÈïøÊ≠§‰ª•ÂæÄ,4sÂ∫óÊ®°ÂºèÂá∫Áé∞ÁöÑ‰ª∑Ê†º‰∏çÈÄèÊòé„ÄÅÂîÆÂêéÊúçÂä°ÊÄÅÂ∫¶Â∑Æ„ÄÅÁªèÈîÄÂïÜÂ∫ìÂ≠òÂéãÂäõÂ§ßÁ≠âÂºäÁ´ØÂºÄÂßãÊòæÁé∞„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nix1xdrive30ÈááÁî®ÂâçÂêéÂèåÁîµÊú∫È©±Âä®,ÊúÄÂ§ßÂäüÁéáËææÂà∞230ÂçÉÁì¶„ÄÅÂ≥∞ÂÄºÊâ≠Áü©494Áâõ¬∑Á±≥,0-100ÂÖ¨Èáå/Â∞èÊó∂ÁöÑÂä†ÈÄüÊó∂Èó¥‰∏∫5.7Áßí,wltpÂ∑•ÂÜµ‰∏ãÁ∫ØÁîµÁª≠Ëà™ÈáåÁ®ã‰∏∫413-438ÂÖ¨Èáå,Âø´ÂÖÖÊ®°Âºè‰∏ã(10%-80%)ÁöÑÂÖÖÁîµÊó∂Èó¥‰∏∫29ÂàÜÈíü„ÄÇ\n", "label": "ix1"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ••Ëø™Áªà‰∫éÊàêÂäü‰∫Ü!‰∫∫Áß∞Â∞èÂè∑q7,ÊØîÂÆùÈ©¨x3Â§ßÊ∞î,30Â§©ÁãÇÁî©1.5‰∏áËæÜÂãáÂ§∫ÈîÄÂÜ†\n", "label": "q7ÔºõÂÆùÈ©¨x3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ≠§Â§ñ,graphcoreËøòÊñ∞Â¢û‰∫ÜËØ≠Èü≥ËΩ¨ÂΩïÊ®°Âûãrnn-tÁöÑÊèê‰∫§„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÊ≤≥ÂçóÂçéÊ≥Ω„ÄëËøô‰∏™ÂõΩÂ∫Ü,ËÆ©Êàë‰ª¨ÂºÄÁùÄÂçöË∂äËµ∞ÂêëÊ¢¶ÊÉ≥‰πãÂú∞\n", "label": "ÂçöË∂ä"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nhermes„ÄÅomegaÈÉΩÊòØÂÆÉÁöÑÂø†ÂÆûÁî®Êà∑,ÊàëÁöÑÁêÜÊÉ≥ÂûãwaldmannÁªà‰∫éÊù•‰∫Ü\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏∫‰∫ÜÁºìËß£‰∫§ÈÄöÂéãÂäõ,ÊúâÊ∂àÊÅØÁß∞Êñ∞ÁâàÂõΩÊ†áÁ∫¢ÁªøÁÅØÂ∞ÜÂÖ®Èù¢ÊäïÂÖ•Â∫îÁî®„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‚Äú‰∏çÂ∞ÜÂ∞±‚ÄùÁöÑÁ∫ØÁîµÂæÆÂûãËΩ¶,Â•îÂ•îe-starÊ≠£Âºè‰∏äÂ∏Ç\n", "label": "Â•îÂ•îe-star"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÜçËßÅ!Êî∂Ë¥πÁöÑxshell,ÊàëÊîπÁî®ÂõΩ‰∫ßËâØÂøÉÂ∑•ÂÖ∑\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂπøÊ±Ω‰º†Á•∫m6ÈááÁî®\\Âáå‰∫ëÁøº3.0\\\"+\\\"ÂÖâÂΩ±ÈõïÂ°ë3.0\\\"ÁöÑËÆæËÆ°ÁêÜÂøµ,Âú®ÊúÄÈáçË¶ÅÁöÑËøõÊ∞îÊ†ºÊ†ÖËÆæËÆ°‰∏ä,ÈïÄÈì¨Ë£ÖÈ•∞ÂíåÂÜÖ‰æßÁÜèÈªëÁöÑËÆæËÆ°‰ΩøÂæóÊï¥‰ΩìÂú®‰ΩìÁé∞Ë±™ÂçéÊÑüÁöÑÂêåÊó∂,ËûçÂÖ•‰∫ÜÂπ¥ËΩªÂåñÂÖÉÁ¥†,Â±ïÁé∞Âá∫Â§ßÈπèÂ±ïÁøºÁöÑÂÖâÂΩ±„ÄÇ\"\n", "label": "‰º†Á•∫m6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËÄå17Ëã±ÂØ∏ÁÜèÈªëÈìùÂêàÈáëËΩÆÊØÇ„ÄÅÈì∂Ëâ≤ÈáëÂ±ûË¥®ÊÑüÂ§ñÂêéËßÜÈïúÂíåÂèåÊéíÊ∞îÁÆ°,ÂàôËøõ‰∏ÄÊ≠•‰∏∫xr-vÂ¢ûÂä†‰∫ÜÂπ¥ËΩª‰∫∫ÈÉΩÁà±ÁöÑËøêÂä®ÊÑü„ÄÇ\n", "label": "xr-v"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊç∑Ëæævs7ÂÖ®Á≥ªÊ†áÈÖçÁîµÂ≠êÊâãÂàπ,Ëá™Âä®È©ªËΩ¶,ÂÆöÈÄüÂ∑°Ëà™,ËÉéÂéãÁõëÊµã, espÊ±ΩËΩ¶ÁîµÂ≠êÁ®≥ÂÆöÊéßÂà∂Á≥ªÁªü,‰∏äÂù°ËæÖÂä©Á≥ªÁªü,ÂâçÂêéÈ©ªËΩ¶Èõ∑ËææÁ≠âÈ©æÈ©∂ËæÖÂä©Á≥ªÁªü„ÄÇ\n", "label": "Êç∑Ëæævs7"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂè¶‰∏ÄÊñπÈù¢,ÈÉ®ÂàÜÂìÅÁâåÁöÑËΩ¶ÂûãËæÉÊ∑∑‰π±,ÂÆö‰ΩçÈáçÂ§ç,ÂÜÖÈÉ®Â≠òÂú®Êó†ÊïàÁ´û‰∫â„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ∫ï‰ª∑Áõ¥ÂîÆ,‰π∞ËΩ¶Êõ¥‰æøÂÆú! Êñ∞Ê¨æÂÆùÈ©¨x3ÂèàÈôç‰ª∑‰∫Ü!ËæìÂÖ•ÊâãÊú∫Âè∑!Á´ãÂç≥Êü•ÁúãÊñ∞ËΩ¶Â∫ï‰ª∑ ÊòìËΩ¶\n", "label": "ÂÆùÈ©¨x3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂØπ‰∫éÂæÆÂûãÊñ∞ËÉΩÊ∫êÊ±ΩËΩ¶Êù•ËØ¥,Áî±‰∫éËΩ¶Ë∫´ËΩª‰∏îÂ®áÂ∞è,Âõ†Ê≠§ÂæàÂ§ö‰∫∫ÈÉΩ‰∏çÊîæÂøÉÊ±ΩËΩ¶ÁöÑÂä®ÂäõÊÄßËÉΩ,ËÄåÂ•áÁëûÂ∞èËöÇËöÅÂàπËΩ¶ÈááÁî®‰∫ÜÂâçÁõòÂêéÈºìÁöÑÂàπËΩ¶ÈÖçÁΩÆ,Ê≠§Â§ñ,ËøôÊ¨æÊ±ΩËΩ¶ËøòÊúâ‰∏§Â§ßÂàπËΩ¶ËæÖÂä©,ÂàÜÂà´ÊòØabsÈò≤Êä±Ê≠ªÂà∂Âä®Á≥ªÁªü‰ª•ÂèäebdÂà∂Âä®ÂäõÂàÜÈÖçÁ≥ªÁªü,ËøôÊ†∑ÁöÑÂàπËΩ¶ÈÖçÁΩÆ,ÂèØ‰ª•ÈùûÂ∏∏Â•ΩÂú∞ÂÆàÊä§Ë°åËΩ¶ÁöÑÂÆâÂÖ®„ÄÇ\n", "label": "Â∞èËöÇËöÅ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nË•øÈó®Â≠ês120Êä•f7900‰∏éf7902Âå∫Âà´\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂõûÈ°æ‰∏Ä‰∏ã,‰ªäÂ§©ÂèëÂîÆÁöÑxc40Âíåc40rechargeËΩ¶ÂûãËµ∑Ê∫ê‰∫éÊúÄÂàù‰∏∫ÂÜÖÁáÉÊú∫Ê±ΩËΩ¶ÂºÄÂèëÁöÑÂπ≥Âè∞„ÄÇ\n", "label": "c40rechargeÔºõxc40"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËôΩÁÑ∂Âä®ÂäõÂèÇÊï∞ÂíåÂä†ÈÄüËÉΩÂäõÂπ∂Êú™ÈöèÁº∏Êï∞ÂíåÊéíÈáèÁöÑÂáèÂ∞ëÂèóÂ§™Â§öÂΩ±Âìç,‰ΩÜÁéõËééÊãâËíÇÊúÄÊ†∏ÂøÉÁöÑÂ£∞Êµ™ÊñπÈù¢Âç¥Êâì‰∫Ü‰∏ÄÂÆöÊäòÊâ£,Ê≤°Êúâ‰∫ÜËø∑‰∫∫Â£∞Êµ™ÁöÑÁéõËééÊãâËíÇ,Áõ∏ÂΩì‰∫éÂ§±Âéª‰∫ÜÁÅµÈ≠Ç?\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n31‰∏áËµ∑;v8.7atÁàÜ406Âåπ;ÊãñÊõ≥ËÉΩÂäõËææ8500Á£Ö.2021Ê¨æÊó•‰∫ßÈÄî‰πê‰∫ÆÁõ∏\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ≠§Â§ñ,ËΩ¶Ë∫´Á∫øÊù°ÂíåÂ∫ïÁõòÈÉ®ÂàÜÂùáÊúâ‰∏•ÂØÜÁöÑÁ©∫Ê∞îÂä®ÂäõÂ≠¶‰ºòÂåñËÆæËÆ°,ÁúãËµ∑Êù•ÂæàÊúâË∂ÖË∑ëÁöÑÁã¨ÁâπÁæéÊÑü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‚Äúl‚ÄùÂûãÊ†áÂøóË¢´ÂêéÈù¢ÁöÑ‚Äúlexus‚ÄùÂèñ‰ª£,f sport ËΩ¶ÂûãÂú®ÂêéÈÉ®Â¢ûÂä†‰∫Ü torsen ÈôêÊªëÂ∑ÆÈÄüÂô®,Âπ∂ÂØπÂáèÈúáÂô®ËøõË°å‰∫ÜË∞ÉÊï¥„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËß£Êîæ2.6‰∏áËæÜ ÈáçÊ±ΩÁã¨Ê∂®7.3% Â§ßËøêÁ®≥ÂùêÁ¨¨ÂÖ≠ 1ÊúàÈáçÂç°ÈîÄ9.5‰∏áËæÜ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ£éË°åt5 evo„ÄÅÈïøÂÆâcs75 plus„ÄÅÂìàÂºóh6,Ë∞ÅÊâçÊòØÊΩÆÊµÅÂπ¥ËΩª‰∫∫ÁöÑËèú\n", "label": "ÈïøÂÆâcs75 plusÔºõÈ£éË°åt5 evoÔºõÂìàÂºóh6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂè™ËßÅ‰∏ÄÊï¥Ê†ã6Â±ÇÂ§ßÊ•ºÈÉΩË¢´Ê∂ÇË£ÖÊàê‰∫ÜÁÅ∞Ëâ≤,ÂÖ®Êñ∞bydÊ†áËØÜÊòæÂæóÊ†ºÂ§ñÊó∂Â∞öÈÜíÁõÆ,‰∏ÄÊéíÈæôÈ≥ûÁ∫πÁ´ãÂ∏ÜÊùøÂ∏¶Âá∫ÊµìÈÉÅÁöÑ‚Äú‰∏≠ÂõΩÁ∫¢‚Äù,ÊòæÂæóÂæàÂñúÂ∫Ü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰Ωú‰∏∫ÂèÇËÄÉ,Áé∞Ê¨æct6ÈïøÂÆΩÈ´òÂàÜÂà´‰∏∫5223/1879/1492mm,ËΩ¥Ë∑ù3109mm„ÄÇ\n", "label": "ct6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ••Ëø™Á∫ØÁîµÂä®suv q4 e-tronÈ¶ñÊâπÂàõ‰∫´ÂÆòÊãõÂãü,‰∏ì‰∫´È¶ñÊâπÊèêËΩ¶Âàõ‰∫´ÊùÉÁõä\n", "label": "q4 e-tron"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ©æÈ©∂Âå∫ÈÉ®ÂàÜ,Âì™ÂêíuÊòØÈÖçÂ§á‰∫Ü‰∏Ä‰∏™Âπ≥Â∫ïÂºèÊñπÂêëÁõò,ÈááÁî®ÁúüÁöÆÊùêË¥®Ë¶ÜÁõñ,Êè°ÊåÅË¥®ÊÑüÊØîËæÉÁªÜËÖªËàíÈÄÇ„ÄÇ\n", "label": "Âì™Âêíu"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏≠ÊéßÂ§ßÂ∞∫ÂØ∏Ëß¶Â±è‰∏§‰æßÊòØÁ´ñÁΩÆÁöÑÁ©∫Ë∞ÉÂá∫È£éÂè£,‰∏ãÊñπÊåâÈîÆÂå∫ÂüüÂàíÂàÜÊØîËæÉËßÑÊï¥,ÁÆÄÊ¥Å‰∏îÂÆûÁî®„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊûóËÇØÂÜíÈô©ÂÆ∂,Á§ºÈÅáÈ©æÂà∞Â∞ä‰∫´Ë¥≠ËΩ¶0È¶ñ‰ªò,5Âπ¥ÂéüÂéÇË¥®‰øùÁ≠âË±™ÂçéÁ§ºÈÅá\n", "label": "ÂÜíÈô©ÂÆ∂"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊÉäÂæóÂÆùÈ©¨x3Â•îÈ©∞glcÂìáÂìáÂ§ßÂè´,ËøôËΩ¶‰∏ÄÂè£Ê∞î‰ªé59‰∏áÈôçÂà∞31.3‰∏á,ÊäÑÂ∫ïÂ•ΩÊó∂Êú∫!„ÄêÊèêËΩ¶ËÆ∞(857Êúü)„Äë\n", "label": "Â•îÈ©∞glcÔºõÂÆùÈ©¨x3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËØ•ËΩ¶ÂûãÂä®ÂäõÈÖçÂ§áÂú®ÂÆ∂Áî®ËΩøËΩ¶‰∏≠Â†™Áß∞‚ÄúÁñØÁãÇ‚Äù,Êê≠ËΩΩ‰∫ÜÁî±‰∏ÄÊ±ΩÈõÜÂõ¢Ëá™‰∏ªÁ†îÂèëÁöÑ2.0tÊ∂°ËΩÆÂ¢ûÂéãÂèëÂä®Êú∫,ÂäüÁéá165kw,Â≥∞ÂÄºÊâ≠Áü©340 n¬∑m,Èõ∂ÁôæÂä†ÈÄü‰ªÖ7.86Áßí„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n10Êúà9Êó•,ËøàÂáØ‰º¶Êóó‰∏ãÂÖ®Êñ∞Ë∂ÖË∑ëËΩ¶Âûã‚Äî‚ÄîËøàÂáØ‰º¶arturaÊ≠£Âºè‰∏äÂ∏Ç,Êñ∞ËΩ¶‰ªÖÊé®Âá∫1Ê¨æÈÖçÁΩÆËΩ¶Âûã,ÂÆòÊñπÊåáÂØº‰ª∑‰∏∫238‰∏áÂÖÉ„ÄÇ\n", "label": "ËøàÂáØ‰º¶artura"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊØîÂõΩ‰∫ßËΩ¶Ëøò‰æøÂÆú!ÁßëÊ≤ÉÂÖπË£∏ËΩ¶‰ªÖÈúÄ5.49‰∏á,ÈÖç6atÂèòÈÄüÁÆ±,Ê≤πËÄó4.9Âçá\n", "label": "ÁßëÊ≤ÉÂÖπ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËøôÂç°ÂùèÊéâÂêéÂ∞±‰ºöÂØºËá¥ÁâπÊñØÊãâ‰∏Ä‰∫õÂäüËÉΩÊïÖÈöú,ÊâÄ‰ª•Âè¨ÂõûÊõ¥Êç¢„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊúÄÊñ∞Ê¨æzc20-dÂûãÊï∞Â≠óÁ†ÇÊµÜÂõûÂºπ‰ª™ÁöÑÊìç‰Ωú‰ΩøÁî®ÊñπÊ≥ï\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊÄª‰ª∑ÂÄº910‰∏áÂÖÉ!ÂÆÅÊ≥¢‰∏ÄÂ§ßÊâπÊ∂àË¥πÂà∏ÂèëÊîæ‰∏≠!ËøòÊúâ300‰∏áÂÖÉÁöÑË¥≠ËΩ¶Ë°•Ë¥¥\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰Ωú‰∏∫‰∏ÄÂè∞ÂÅèÂêëÂ±ÖÂÆ∂ÁöÑËΩ¶Âûã,ÁêÜÊÉ≥oneÂú®Â∫ïÁõòË∞ÉÊ†°‰∏äÈùûÂ∏∏ÊâéÂÆû,Á¥ßËá¥ÁöÑË∞ÉÊ†°ËÆ©ÂÆÉÂºÄ‰∏äÂéªÂæàÊúâÈüßÊÄß,Âç≥‰æøÁªèËøá‰∏Ä‰∫õÂ§ßÊ≤üÂùéÊó∂‰πü‰∏ç‰ºöÊúâÂ§ö‰ΩôÁöÑË∑≥Âä®,Áõ∏ÊØîÂêåÁ∫ßËΩ¶ÂûãÁöÑÂ∫ïÁõòÊúâÈ´òÁ∫ßÊÑü„ÄÇ\n", "label": "ÁêÜÊÉ≥one"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰π∞aion y,3Âπ¥ÁúÅ6‰∏á ÂìÅÁâåÂêçÁß∞\n", "label": "aion y"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂèØ‰∏äÁªøÁâåÁöÑcr-v! ÁßëÊäÄËµãËÉΩ,‰∏ÄÂàáÂ∞ΩÂú®cr-vÊèíÁîµÊ∑∑ÂêàÂä®ÂäõÁâà,È¶ñ‰ªò5ÊàêËµ∑,Â∞ä‰∫´24Êúü0ÊÅØ\n", "label": "cr-vÔºõcr-vÊèíÁîµÊ∑∑ÂêàÂä®ÂäõÁâà"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ºóÁ≠π|pentax k-3 mark iii jet blackÂíåj limited ÁúüÁî∞Á∫ΩÊâãÂ∏¶Âú®Êó•Êú¨‰∏äÁ∫ø\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞ËΩ¶ÈááÁî®ÂèåËâ≤ËΩ¶Ë∫´,Èô§‰∫ÜÈªëËâ≤ËΩ¶È°∂Â§ñ,ÂÆÉÁöÑÂêéËßÜÈïúÂ£≥„ÄÅÈó®ÊääÊâãÈÉΩÊòØÈªëËâ≤Â§ÑÁêÜ,Âú®‰æßËæπÊúÄ‰∏ãÁ´ØËøòÊúâ‰∏ÄÊù°ÈªëËâ≤ÁöÑË£ÖÈ•∞Êù°,ÊèêÂçáÊï¥‰ΩìËßÜËßâÊïàÊûú„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁî±‰∫éÂä†ÂÖ•‰∫ÜÂèëÂä®Êú∫,Ê±âdm-iÁöÑÂâçÊ†ºÊ†ÖËøõË°å‰∫ÜÂä†Â§ß,Â§ßÂò¥ÂâçÊ†ºÊ†ÖÈááÁî®ÁÇπÈòµÂºèËÆæËÆ°,ÂâçÂ§ßÁÅØ‰∏éÂâçÊ†ºÊ†ÖÁõ∏Ëøû„ÄÇ\n", "label": "Ê±âdm-i"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏≠Â§ÆÊéßÂà∂Âè∞ÈÖçÊúâ7Ëã±ÂØ∏ÁöÑÂΩ©Ëâ≤Â±èÂπïÂíåÂÜ≤ÂéãÊú∫Ê¢∞ÊåâÈíÆ,12.3Ëã±ÂØ∏Ê∂≤Êô∂Â±èÂíåÁîµÂä®Â§©Á™ó„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁé∞Âú®30‰∏áÂ∞±ËÉΩ‰π∞ÂáÜÊñ∞a6?‰Ωé‰ª∑ÂÖ•ÊâãË±™ËΩ¶‰∏çÊòØÊ¢¶\n", "label": "a6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞Â∫∑‰ºóÂ∏ÉÂ±ÄËΩªËøûÈîÅ„ÄÅÂ§ßÂîõÂÖªËΩ¶Âπ∂Ë¥≠ËΩ¶Ëá™‰∏ª,ÂêéÂ∏ÇÂú∫Êâ©Âº†Ë¶Å‚ÄúÂè¶ËæüËπäÂæÑ‚Äù?|Ê±ΩÊúçÊúàÊä•\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÂ••Ëø™e-tron„Äë ‰∏∫‰Ω†ÊâìÂºÄÊú™Êù•ÁöÑÈí•Âåô\n", "label": "Â••Ëø™e-tron"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n2022Ê¨æÈïøÂÆâÂáØÁ®ãf70ÁöÑËá™Âä®Êå°‰∏ÄÂÖ±ÊúâÂõõÊ¨æËΩ¶Âûã,‰∏§Ê¨æ‰∏§È©±„ÄÅ‰∏§Ê¨æÂõõÈ©±„ÄÇ\n", "label": "ÂáØÁ®ãf70"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊçÆÊüêÊ±ΩËΩ¶ÁªèÈîÄÂïÜÈÄèÈú≤,ÁõÆÂâçÂêçÁàµzsË¥≠ËΩ¶ÊöÇÊó†‰ºòÊÉ†,7.88‰∏áÂÖÉËµ∑ÂîÆ,ÂêÑÂú∞Âå∫Èó®Â∫óÁöÑÂÖ∑‰ΩìËêΩÂú∞‰ª∑‰ºöÊúâÊâÄÂ∑ÆÂºÇ‰ªÖ‰æõÂèÇËÄÉ„ÄÇ\n", "label": "ÂêçÁàµzs"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n6Êúà30Êó•,Âá†‰ΩïÊ±ΩËΩ¶Êóó‰∏ãÈùíÊò•Á≤æÂìÅÁ∫ØÁîµsuvÂá†‰ΩïeÊ≠£Âºè‰∏äÂ∏Ç„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏äÁªøÁâå,0È¶ñ‰ªò,‰∏äÊ±ΩrÊ±ΩËΩ¶Êñ∞Âä®Áâàer6620kmË∂ÖÈïøÁª≠Ëà™ÂÖÖÁîµ‰∏ÄÊ¨°,ÈÄöÂã§‰∏§Âë®„ÄÇ\n", "label": "Êñ∞Âä®Áâàer6"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÁ¶èÂ∑û4.13„ÄëÂêâÊ≤ÉÂòâÂπ¥Âçé ÂêâÂà©ÂÖ±Áõ∏‰º¥!\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰æßÈù¢ÁöÑËÖ∞Á∫øË¥ØÁ©øËΩ¶Ë∫´Âπ∂Âª∂‰º∏Ëá≥Â∞æÈÉ®,‰ΩøÂæóÊï¥‰∏™ËΩ¶Â≠êÊòæÂæóÁâπÂà´‰øÆÈïø,ËΩ¶Â≠êÂºÄËµ∑Êù•Âêé,ËøôËΩÆÊØÇÊÑüËßâÂ∞±ÊòØ‰∏™È£éÁÅ´ËΩÆ;\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰ªÖÁôæÊù•‰∏™,Ëøô‰∏™Áâõb,‰∏ì‰∏öÂèëÂªäÁ∫ß!Â§ßÂäüÁéá1600w,Ë¥üÁ¶ªÂ≠êÂêπÈ£éÊú∫,Âéü\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÆÉÁöÑÊúÄÂ∞èÁ¶ªÂú∞Èó¥Èöô‰∏∫400mm,ËÄådf604mÊúÄÂ∞èÁ¶ªÂú∞Èó¥Èöô‰∏∫430mm,Áõ∏ÊØî‰πã‰∏ã604mÊú∫ÂûãÁ¶ªÂú∞Èó¥ÈöôÂ§ß,Áî∞Èó¥ÈÄöËøáÊÄßÊõ¥Â•Ω„ÄÇ\n", "label": "df604m"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂíåbbaÁöÑÂêåÁ∫ßÂà´ËΩ¶ÂûãÁîöËá≥ÊòØÂÖ∂‰ªñ‰∏Ä‰∫õË±™ÂçéÂìÅÁâåÁöÑÁ´ûÂìÅËΩ¶Âûã‰∏çÂêå,ÂáØËø™ÊãâÂÖãct5ÂÖ®Á≥ªÊ†áÈÖç‰∫Ü‰∏ÄÂ•ó2.0t+10atÂä®ÂäõÊÄªÊàê,ÂèØ‰ª•ÁàÜÂèëÂá∫Êõ¥Âº∫È©¨ÂäõÂíåÂ≥∞ÂÄºÊâ≠Áü©,Âπ∂Â∏¶Êù•‚ÄúÂõõÁº∏È´òÊÄßËÉΩÊ®°Âºè‚Äù‚ÄúÂõõÁº∏ÁªèÊµéÊ®°Âºè‚Äù‚Äú‰∏§Áº∏Ë∂ÖÁªèÊµéÊ®°Âºè‚Äù‰∏âÁßçÂ∑•‰ΩúÊ®°Âºè,‰ΩøÂæóÁôæÂÖ¨ÈáåÊ≤πËÄó‰ΩéËá≥6.9Âçá„ÄÇ\n", "label": "ÂáØËø™ÊãâÂÖãct5"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈô§‰∫Ü‰ª•‰∏ä‰∏âÂÆ∂ËΩ¶‰ºÅÂ§ñ,‰∏úÈ£éÊó•‰∫ßÊú¨ÊúàÁöÑË°®Áé∞‰πü‰∏çÂ§ß‰πêËßÇ,6Êúà‰ªΩÈõ∂ÂîÆÈáèË∑åÂπÖ‰∏∫19.0%,7Êúà‰ªΩË∑åÂπÖÂêåÊ†∑ËææÂà∞‰∫Ü20.3%„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈÄöÂã§Âá∫Ë°å‰∫´Ëá™Áî± ÊûÅÁãêÈòøÂ∞îÊ≥ïs,0È¶ñ‰ªò\n", "label": "ÊûÅÁãêÈòøÂ∞îÊ≥ïs"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∫åÂçÅ‰∫î‰∏áÂ∑¶Âè≥ËêΩÂú∞suv,Â§ßÁ©∫Èó¥ËßÜÈáéÂ•Ω‰∏Ä‰∫õ,‰πòËΩ¶‰∫∫ÊôïËΩ¶,ÂêéÂ§áÁÆ±ÈúÄÊîæËΩÆÊ§ÖÂíåÂá†‰∏™Êî∂Á∫≥ÁÆ±,2.0t‰ª•‰∏äÂõõÈ©±,Â∏ÆÂøôÊé®ËçêÂá†Ê¨æ(ÂºÄÊãìËÄÖÊÄé‰πàÊ†∑)\n", "label": "ÂºÄÊãìËÄÖ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞ËΩ¶‰æùÊóßÈÖçÂ§á‰∫ÜledÊó•Èó¥Ë°åËΩ¶ÁÅØ,ÁÇπ‰∫ÆÂêéÂÖ∑Êúâ‰∏çÈîôÁöÑËßÜËßâÊïàÊûú,Â¶ÇÂêåÂ§ßÁúºÁùõ‰∏ÄËà¨,ÈÄ†ÂûãÂçÅÂàÜÂèØÁà±„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n[unk]Êó†ËÆ∫ÊòØÈÉäÂ§ñÈíìÈ±º,ËøòÊòØÂ±±È°∂Èú≤Ëê•,Ê¨ßÂ∞öx7plusÊê≠ËΩΩËìùÈ≤∏Êñ∞‰∏Ä‰ª£ne1.5tÈ´òÂéãÁõ¥Âñ∑ÂèëÂä®Êú∫ÂíåËìùÈ≤∏7ÈÄüÊπøÂºèÂèåÁ¶ªÂêàÂèòÈÄüÂô®,ËÉΩÂ§üÂÆûÁé∞ÊúÄÂ§ßÂäüÁéá138kw,ÊúÄÂ§ßÊâ≠Áü©ÂèØËææ300n¬∑m,Ë∂≥‰ª•‰ªéÂÆπÂ∫îÂØπÊóÖÈÄî‰∏≠Â§öÁßçÂú∫ÊôØ‰∏ãÁöÑ‰ΩøÁî®ÈúÄÊ±Ç,Â∏ÆÂä©Áî®Êà∑Êõ¥Â•ΩÂú∞ÈÇÇÈÄÖËØóÂíåËøúÊñπ„ÄÇ\n", "label": "Ê¨ßÂ∞öx7plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏éÊåáÁ∫π„ÄÅËôπËÜúÁ≠âÁîüÁâ©‰ø°ÊÅØÁõ∏ÊØî,‚Äú‰∫∫ËÑ∏‚ÄùÂèàÂÖ∑ÊúâÂº±ÈöêÁßÅÊÄß,‰∏çËÉΩÊÄªË¢´ÈÅÆËîΩ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ®Êñ∞‰∏Ä‰ª£nx‰∏®ËÆ©ÁæéËøõÂåñ,Êõ¥ÂêëÊú™Êù•ËøõÂèë\n", "label": "nx"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏ÄÁîµÂ§öËΩ¶„ÄÅÊåâÈúÄÁßüÁîµ„ÄÅÂèØÂÖÖÂèØÊç¢,ÂÆÅÂæ∑Êó∂‰ª£ÂèëÂ∏ÉÊç¢ÁîµÂìÅÁâåevogo-evËßÜÁïå\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊòüÊ†∏Âä®Âäõet-iÊòØ‰∏ÄÂ•óÊèíÁîµÂºèÊ∑∑ÂêàÂä®ÂäõÁ≥ªÁªü,Â∞ÜÈ¶ñÂÖàÁî®‰∫éÊòüÈÄîËøΩÈ£éet-i„ÄÇ\n", "label": "ÊòüÈÄîËøΩÈ£éet-i"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂõ†Á∫øÊùüËøáÂ∫¶Á£®Êçü,ÈÄ†ÊàêÂêåËΩ¥ÁîµÁºÜÁöÑÂÜÖËäØÂàÜÁ¶ª,ÂÄíËΩ¶ÂΩ±ÂÉèÊó†Ê≥ïÊ≠£Â∏∏Â∑•‰Ωú,ÁâπÊñØÊãâÂè¨ÂõûËøë20‰∏ámodel 3ÁîµÂä®Ê±ΩËΩ¶\n", "label": "model 3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËÄåÊ†πÊçÆÊµ∑Â§ñÂ∑≤ÁªèÊî∂Âà∞ÁöÑÊñ∞Ê¨æmodel sÁöÑËΩ¶‰∏ªÂèçÈ¶à,‰ªñ‰ª¨ÁöÑÊñ∞ËΩ¶‰∏≠ÊéßÂ±èÂπ∂Ê≤°Êúâ‰ªª‰ΩïÂèØ‰ª•ÂÄæÊñúÁöÑÂäüËÉΩ,ËÄåËøô‰πüÂç∞ËØÅ‰∫ÜÁâπÊñØÊãâÂÆòÁΩëÂØπ‰∫éÊñ∞ËΩ¶ÈÖçÁΩÆ‰ø°ÊÅØÊõ¥Êñ∞Á°ÆÂÆûÂèñÊ∂à‰∫ÜËØ•ÂäüËÉΩ„ÄÇ\n", "label": "model s"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÂæ∑ÂõΩËøõÂè£¬∑20000ÂÖ¨ÈáåÊç¢Ê≤π„Äë‰ªÖ259ÂÖÉÊä¢‚ÄúÂ∑¥ÊñØÈæôÊ∏ÖÂáÄÊ∂¶ÊªëÊú∫Ê≤π‚Äù,136Âπ¥Âæ∑ÂõΩËÄÅÂìÅÁâå!ÂÄºÂæó‰ø°Ëµñ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n12.3Ëã±ÂØ∏ÁöÑÂ§öÂ™í‰Ωì‰∏≠ÊéßÊòæÁ§∫Â±èÂÖ®Á≥ªÊ†áÈÖç,ÁïåÈù¢ÁÆÄÂçïÊòé‰∫Ü,Êìç‰ΩúÊµÅÁïÖ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞Ê¨æxc60Â∞ÜÂÖ®Á≥ªÈááÁî®ÈöêËóèÂºèÁöÑÊéíÊ∞îËÆæËÆ°,Âç≥‰ΩøÊòØËøêÂä®ÁâàËΩ¶Âûã‰πüÂè™ÊòØÂä†ÂÖ•‰∫Ü‰∏éÂâçÂåÖÂõ¥Áõ∏ÂëºÂ∫îÁöÑÁªÜËäÇÂàªÁîª,Áõ∏ÊØîÁé∞Ê¨æÂú®ÂîÆËΩ¶ÂûãËøêÂä®Ê∞îÂú∫ÊúâÊâÄÈôç‰Ωé„ÄÇ\n", "label": "xc60"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÅöÂ∑•Áî®ÊñôÂ∞±Êõ¥‰∏çÁî®ËØ¥‰∫Ü,Â•îÈ©∞‰∏ÄË¥ØÁöÑË±™Âçé„ÄÅÂ•¢‰æà,‰∏ªË¢´Âä®ÂÆâÂÖ®ÈÖçÁΩÆ‰πüÂçÅÂàÜ‰∏∞ÂØå,ÂâçÂõõÂêéÂõõ‰∏ÄÂÖ±ÂÖ´‰∏™Ë∂ÖÂ£∞Ê≥¢Èõ∑Ëææ,Â∏¶Êù•ÂÆâÂÖ®„ÄÅËàíÂøÉÁöÑÈ©æ‰πò‰ΩìÈ™å„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n2013Âπ¥‰∏äÁâå,Âè™Êúâ7.3‰∏áÂÖ¨ÈáåÁöÑÊâãÂä®Êå°rav4‰πüÂæà‰∏çÈîô„ÄÇ\n", "label": "rav4"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÁîòËÇÉÊ∞ëÈÄöÈïøÂÆâ„ÄëÊúâË∂£ÁöÑÁÅµÈ≠Ç‚Äî‚ÄîÈïøÂÆâÊñ∞cs75ÊéÄËµ∑Êô∫ËÉΩÈ£éÊö¥\n", "label": "ÈïøÂÆâÊñ∞cs75"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÂä®Âäõ„ÄëËΩ¶ÁöÑÂä®ÂäõËøòÊòØÂèØ‰ª•ÁöÑ,Ëá™Â∑±ÂØπÂÆÉÁöÑÂä®Âäõ‰ø°ÂøÉËøòÊòØÊúâÁöÑ,ÊèêÈÄüÊØîËæÉÂø´,Ë∏©ËÑöÊ≤πÈó®,ËΩ¶ÁöÑÂÜ≤‰∫ÜÂá∫Âéª,Ë∂ÖËΩ¶‰∏äÈ´òÈÄüÁöÑ‰∏ç‰∫å‰πãÈÄâ,ËøôÂØπÂñúÊ¨¢ÈÄüÂ∫¶ÁöÑÊàëÈùûÂ∏∏ÂñúÁà±,ÂÆÉÁöÑÊèêÈÄüÁªôÁöÑÊé®ËÉåÊÑü‰πüÊØîËæÉÂº∫ÁÉà,‰Ω†ËÉΩÊÑüÂèóÂà∞ÈÇ£ÁßçÈÄüÂ∫¶ÁöÑÊøÄÊÉÖ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÜçÊù•ÁúãÂä®Âäõ,‰∏É‰ª£‰ºäÂÖ∞Áâπ‰ΩøÁî®ÁöÑÊòØ1.5l+cvtÊàñ1.4t+7dctÁöÑÂä®ÂäõÊÄªÊàê„ÄÇ\n", "label": "‰ºäÂÖ∞Áâπ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ®Êñ∞ÁæéËßÑÁâàÈú∏ÈÅì‰ªÖ24‰∏áËµ∑ÂîÆ,Êê≠ËΩΩ4.0lv6ÂºïÊìé+ÂõõÈ©±,Â§ñËßÇÊ≤âÁ®≥Èú∏Ê∞î\n", "label": "Èú∏ÈÅì"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËÄåÂú®Ââ©‰∏ã1%ÁöÑÊÉÖÂÜµ‰∏ã,Â∞±ÊòØÂèëÂä®Êú∫Áõ¥Êé•È©±Âä®ËΩ¶ËæÜ‰ª•ÂèäÂèëÂä®Êú∫ÂíåÁîµÊú∫‰∏ÄËµ∑Âêà‰ΩúÈ©±Âä®ËΩ¶ËæÜÁöÑhevÂπ∂ËÅîÊ®°Âºè„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ•¢ÈÄÇËøõÂåñ,Ê≤âÊµ∏ÊÑâÊÇ¶ÊóÖÁ®ãÂîØÊÑüÂÆòÂΩìÂÖà,Êñ∞bmwx3Â§öÈáçÂìÅË¥®ÁªÜËäÇÊÑâÊÇ¶ÊÑüÂÆò,ËÆ©ÊØè‰∏ÄÁ®ãÈÉΩÊÑàÊòæÈùûÂá°„ÄÇ\n", "label": "bmwx3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶Ë∫´‰æßÈù¢ÊúÄÂê∏ÂºïÁöÑÁªùÂØπÊòØÊ∫úËÉåÈ£éÊ†º,‰ªécÊü±ÂºÄÂßã‰∏ãÂéãÁöÑÁ∫øÊù°Âª∂Áª≠Âà∞ËΩ¶Â∞æ,ÊµÅÁïÖ‰∏îËá™ÁÑ∂,ËÆ©Êï¥ËΩ¶Êúâ‰∏ÄÁßçËìÑÂäøÂæÖÂèëÁöÑÊÑüËßâ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩªÊùæÊéÄÁøªÈôÜÊîæÊèΩÂ¢É,ËøôËΩ¶‰ªé43‰∏á‰∏ãÊé¢Ëá≥20.4‰∏á,Ê≠ªÊù†ÂêåË°å!„ÄêÁî®ËΩ¶‰ΩìÈ™å(279Êúü)„Äë\n", "label": "ÊèΩÂ¢ÉÔºõÈôÜÊîæ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ¨ßÂ∞öx7 plus‰∫íÂä®Êô∫ËÅîÁ§º ‰∏ãËÆ¢Ê¨ßÂ∞öx7 plus ÈïøÂÆâÊ¨ßÂ∞öÊ±ΩËΩ¶\n", "label": "Ê¨ßÂ∞öx7 plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈÄöËøá‰∏çÊñ≠ÂçáÁ∫ß‰ºòÂåñ,Âà©Áî®‰∏ìÂ±ûÂ∑•Ëâ∫Âº∫ÂåñÂêéÊÇ¨Êû∂ÁªÑ‰ª∂ÁöÑÊîØÊíëÂàöÊÄß„ÄÅÊäóÊâ≠ÂàöÂ∫¶ÂíåÊ®™ÂêëÂàöÂ∫¶,‰ºòÂåñ‰∏ªÁº∏ÂíåÂçáÂéãÊú∫ÂÜÖÈÉ®ÁªìÊûÑ(Ê∑∑Âä®ÁâàËΩ¶Âûã‰ºòÂåñÁîµÂ≠êÊéßÂà∂Âà∂Âä®Á≥ªÁªü,ÊèêÈ´òÂà∂Âä®ÂèØÊéßÊÄß),ÊîπÂñÑÂà∂Âä®Ë∏èÊùøÁ©∫Á®ãË°®Áé∞,‰ª§Êñ∞esÊã•ÊúâÁÑïÁÑ∂‰∏ÄÊñ∞ÁöÑÈ©æ‰πò‰ΩìÈ™å,Â∞Ω‰∫´Âπ≥Á®≥ËàíÈÄÇÂíåÊ∏∏ÂàÉÊúâ‰ΩôÁöÑÈ©æÊéßÊÑüÂèó„ÄÇ\n", "label": "es"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂõ†Áñ´ÊÉÖ‰∏çÂèØÊäóÂäõÂõ†Á¥†ÂØºËá¥Â±ï‰ºöÂª∂ÊúüÁöÑÂèòÂä®ÁªôÊÇ®ÈÄ†ÊàêÁöÑ‰∏ç‰æø,Êàë‰ª¨Ê∑±Ë°®Ê≠âÊÑè!\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêÂÖ∞Â∑ûÂàõÂíåÂòâÁëû„Äëuni-tÂÆûÊãçÁªÜËäÇ\n", "label": "uni-t"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËøôÊ¨æËá™‰∏ªmpvÁªà‰∫éË¢´ËÆ§ÂèØ,Ëµ∑Ê≠•‰ª∑‰∏çË∂≥8‰∏áÈÖç2.0lÂºïÊìé,ÊØîËâæÂäõÁªÖÂÆΩÊïû\n", "label": "ËâæÂäõÁªÖ"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‚óè1852mmËΩ¶Ë∫´ÂÆΩÂ∫¶‚óè1520mmËΩ¶ÂÜÖÊ®™ÂêëÁ©∫Èó¥‚óè980mmÂêéÊéíÁ©∫Èó¥‰º†Á•∫gs4ÂçáÁ∫ßÂÆåÊàê,ÂéüËΩ¶Âç§Á¥†ÁÅØ„ÄÅÈÖçÁöÑÂçïÂÖâÈÄèÈïú„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰º†Á•∫gs3ÈïøÂÆâcs35ËøôÊ¨°ÂéãÂäõÂ±±Â§ß,Ê≠§ËΩ¶‰ªé16‰∏á‰∏ÄÂè£Ê∞îÂ∞±ÈôçËá≥7.8‰∏á,ÂîÆ‰ª∑Ë∑≥Ê∞¥!„ÄêÁî®ËΩ¶ÂàÜ‰∫´(355Êúü)„Äë\n", "label": "ÈïøÂÆâcs35Ôºõ‰º†Á•∫gs3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊà∑Â§ñÂê¨Ê≠åÂ•Ω‰ºô‰º¥,Ê∏∏Â±±Áé©Ê∞¥Â∞è‰º¥‰æ£,sanag x6 pro maxËìùÁâôÈü≥ÁÆ±‰∏äÊâã\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏érav4Áõ∏ÊØî,ÂÆÉÊõ¥ÂÖ∑Èú∏Ê∞î!\n", "label": "rav4"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁî®ËΩ¶ÊåáÂçó:2021‰∏∞Áî∞ÊôÆÊãâÂ§öÁªà‰∫éÂà∞Â∫ó!ÊØîË∑ØËôéËøòÈú∏ÈÅì,ÂÆùÈ©¨x5ÈÉΩÈù†Ëæπ\n", "label": "ÂÆùÈ©¨x5ÔºõÊôÆÊãâÂ§ö"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∫åÊòØÂÆö‰Ωç‰πüÈ´ò‰∫éa3Âíåa6,ÂêåÊ†∑ÊòØÊó†ÂΩ¢ÁöÑ„ÄÇ\n", "label": "a6Ôºõa3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞‰∏Ä‰ª£ÂêõÂ®ÅËøôÊ¨æËΩ¶ÈááÁî®ÁéØÊä±ÂºèÂÜÖÈ•∞ËÆæËÆ°,ÂÜÖÈ•∞Êï¥‰ΩìËΩØÊÄßÊùêÊñôË¶ÜÁõñÁéáË∂ÖËøá‰∫Ü80%,‰πòÂùêÁöÑËàíÈÄÇÂ∫¶ËøòÊòØÈùûÂ∏∏È´òÁöÑ‰∫Ü,ÈüµÂä®ÁöÑÊµÅÁ∫ø‰ªéÈ©æÈ©∂Â∏≠ÂºÄÂßãÂêëÂ∫ßËà±‰∏§‰æßÂª∂‰º∏,Êñ∞Ê¨æËΩ¶ÂûãËøòÂú®ÂâçÊéíÊääusbÊé•Âè£Â¢ûÂä†‰∏∫‰∏§‰∏™,ÈùûÂ∏∏ÁöÑÊñπ‰æø„ÄÇ\n", "label": "ÂêõÂ®Å"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰º†Á•∫gs4ÂÜÖÈ•∞ÁöÑ‰∏≠ÊéßËÆæËÆ°ÈááÁî®‰∫ÜÂèå12.3Ëã±ÂØ∏Â±èÂπïËÆæËÆ°,ÈÖçÂêà‰∏≠ÊéßÂè∞Âå∫ÂüüÁöÑÂèå‚Äúx‚ÄùÂûãÂÖÉÁ¥†„ÄÅÈöêËóèÂºèÊú∫Ê¢∞Á©∫Ë∞ÉÂá∫È£éÂè£,ÁßëÊäÄÊÑü‰∏Ä‰∏ãÂ≠êÂ∞±ÂëàÁé∞Âá∫Êù•‰∫Ü„ÄÇ\n", "label": "‰º†Á•∫gs4"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈïøÂÆâÂèàÊàêÂäü‰∫Ü;Êñ∞ÈïøÂÆâcs35;plusÊØîÂ••Ëø™q5lÊºÇ‰∫Æ;11‰∏áÁúãÂï•Êú¨Áî∞Áº§Êô∫\n", "label": "ÈïøÂÆâcs35;plusÔºõÂ••Ëø™q5lÔºõÁº§Êô∫"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂç≥ÂàªÂí®ËØ¢‚Äú0È¶ñ‰ªò‚ÄùÈ£éÂÖâ580ÊòüÁâà,Â§ß‰∏ÉÂ∫ßsuv‰∏âËÉéÂÆ∂Â∫≠Á¶èÈü≥,ÂÖ®ÂÆ∂Âá∫Ë°åÊõ¥ËàíÈÄÇ!\n", "label": "È£éÂÖâ580ÊòüÁâà"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÄíÊ¢ØÂΩ¢ÂºèÁöÑËøõÊ∞îÊ†ºÊ†ÖÈááÁî®‰∫ÜÁÇπÈòµÂºèÁöÑÁÇπÁºÄ,ÈÖçÂêà‰∏≠Èó¥Â∞èÁãÆÂ≠êÁöÑÊ†áÂøó,Áúã‰∏äÂéªÈùûÂ∏∏ÁöÑÊó∂Â∞ö„ÄÅÁ≤æËá¥„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ®Êñ∞glcsuvÂÖºÂÖ∑Âá∫‰ºóÁöÑÈ©æÈ©∂ÊÄßËÉΩÂíåËÉΩÊïàË°®Áé∞„ÄÇ\n", "label": "glc"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n28Â≤ÅÂ∞èÂßëÂ®òÂñúÊèêÂÆùÈ©¨125i,ÂÖ®Ê¨æËêΩÂú∞Êâç21‰∏áÂ§ö,2.0tÂ†™Áß∞Â∞èÈí¢ÁÇÆ\n", "label": "ÂÆùÈ©¨125i"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ∞æÈÉ®ËÆæËÆ°‰πüÊ£±ËßíÂàÜÊòé,‰∏éÊûÅÂØå‰∏™ÊÄßÂåñÁöÑÂâçËÑ∏Áõ∏ÂæóÁõäÂΩ∞„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈô§‰∫ÜÂÆåÊàêÊç¢ÂøÉÂ§ñ,Êñ∞Ê¨æ‰º†Á•∫gs8Âú®ËÆæËÆ°‰∏ä‰πüËøéÊù•ÊîπÂèò,Êñ∞ËΩ¶ÈááÁî®Êú∫Áî≤ËÆæËÆ°ÁêÜÂøµ,È£éÊ†º‰∏äÊõ¥Âä†Ê£±ËßíÂàÜÊòé,Âº∫Âåñ‰∫ÜÂπ¥ËΩªÊ∞îÊÅØ,Âπ∂‰∏î‰∏≠ÁΩëÁöÑÂ∞∫ÂØ∏‰πüÊõ¥Â§ß‰∫Ü,ÈÖçÂêàÂÖ®Êñ∞ÂºèÊ†∑ÁöÑÊ†ºÊ†Ö,Â∏¶Êù•Êñ∞È≤úÊÑü‰∏éÂæàÈ´òÁöÑËæ®ËØÜÂ∫¶,Â§ßÁÅØÁªÑÁöÑÈÄ†Âûã‰πüÂæàÂ§∏Âº†,Âê∏ÂºïÁúºÁêÉ„ÄÇ\n", "label": "‰º†Á•∫gs8"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‚Äùevgartx3090tiÂºÄÂçñ:1.67‰∏áÂÖÉÈÄÅ1600wÁîµÊ∫êevgaÂ∑≤ÁªèÂèëÂ∏Ékingpinrtx3090ti,ÂîÆ‰ª∑È´òËææ2499.99ÁæéÂÖÉ(Á∫¶Âêà‰∫∫Ê∞ëÂ∏Å1.67‰∏áÂÖÉ),ÂêåÊó∂ËøòÁôΩÈÄÅ‰∏Ä‰∏™1600wÁöÑÁîµÊ∫ê„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n01bmwËã±ÈõÑËÅîÁõüÊâãÊ∏∏ÊåëÊàòËµõkingofgloryÊØîËµõÈ°πÁõÆ|Ëã±ÈõÑËÅîÁõüÊâãÊ∏∏ÊØîËµõÊó∂Èó¥|7Êúà8Êó•-7Êúà9Êó•ÊØîËµõÂú∞ÁÇπ|ÂçóÊòåÁéãÂ∫ú‰∫ï‰∏ÄÊ•º‰∏≠Â∫≠\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊØî‰∫öËø™ÂîêÊñ∞ËÉΩÊ∫êÂ§öÂ∞ëÈí±ËÉΩÂºÄÂõûÂÆ∂?ËæìÂÖ•ÊâãÊú∫Âè∑Âç≥ÂèØÊü•ËØ¢ËêΩÂú∞‰ª∑! ÊòìËΩ¶\n", "label": "ÂîêÊñ∞ËÉΩÊ∫ê"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈ¶ñÂÖàËØ•ËΩ¶ÈááÁî®‰∫ÜÊ∂≤Êô∂ÁöÑ‰∏≠ÊéßÂ±è‰ª•ÂèäÊ∂≤Êô∂ÁöÑ‰ª™Ë°®ÁõòËÆæËÆ°,ËÆ©ÂÖ∂ÈùûÂ∏∏ÁöÑÊòæÊ°£Ê¨°„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÜÖÈ•∞ÁöÑËÆæËÆ°ÈááÁî®Á∫¢Ëâ≤ÁöÑÊê≠ÈÖç,ÊÑüËßâÂà∞ÈùûÂ∏∏ÁöÑÊ∏©È¶®ÂèØÁà±,Êúâ‰∏ÄÁßçÂÆ∂ÁöÑÊÑüËßâ,ÂÜÖÈ•∞ÁöÑÂÖ∂‰ªñÂú∞ÊñπËÆæËÆ°‰πüÈùûÂ∏∏ÁöÑ‰∫∫ÊÄßÂåñ,Â§ßÂ§öÂú∞ÊñπÈÉΩÁî®‰∫ÜËΩØÂåÖÊù•Â§ÑÁêÜ,ÈùûÂ∏∏ÁöÑÂú∞ÈÅì„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ§ß‰ºóÂèà‰∏ÄÁéãÁâåsuvÊù•Ë¢≠!ÊØî‰øùÊó∂Êç∑Èú∏Ê∞î,2.0tÁàÜÂèë305È©¨Âäõ,Êàñ12‰∏á\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂú®ËøêÂä®Ê®°Âºè‰∏ãÂèëÂä®Êú∫ÁöÑ‰ªãÂÖ•Êõ¥ÁßØÊûÅ,‰∏çËÆ∫ÊòØÂüéÂ∏ÇÈÅìË∑ØËøòÊòØÈ´òÈÄüË°åÈ©∂,Á≥ªÁªüÂü∫Êú¨‰∏äÂ§Ñ‰∫éÊ∑∑ÂêàÂä®ÂäõÊ®°Âºè„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ®Êñ∞5008ÈÖçÁΩÆ‰∫ÜÊù•Ëá™Ê≥ïÂõΩÁöÑÂõΩÂÆùÁ∫ßÁöÑfocalÂä≤Êµ™Èü≥ÂìçÁ≥ªÁªü,ÂÖ∑Â§á10Â£∞ÈÅìËæìÂá∫,ÊÄªËæìÂá∫ÂäüÁéáËææÂà∞‰∫Ü500‰∏á„ÄÇ\n", "label": "5008"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂéâÂÆ≥‰∫Ü!È©¨‰∫ëÈÄ†ËΩ¶ÊàêÂäü‰∫Ü!Êñ∞ËΩ¶ÂîÆ‰ª∑‰∏çË∂≥7‰∏áËµ∑,30ÁßíËÆ¢Âá∫4180Âè∞,ÂÖ≥ÈîÆÁªàË∫´ÂÖçË¥πÁª¥‰øù\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n‰∏∫‰∫ÜÂΩ∞ÊòæÊΩÆÊµÅÊ∞îË¥®,xr-vÊèê‰æõ‰∫Ü8ÁßçËΩ¶Ë∫´È¢úËâ≤ÂèØ‰æõÈÄâÊã©,‰ª•Êª°Ë∂≥Âπ¥ËΩªÁî®Êà∑ÂØπËâ≤ÂΩ©ÁöÑ‰∏™ÊÄßÂåñÈúÄÊ±Ç„ÄÇ\n", "label": "xr-v"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂ¶Ç‰ªäÂæàÂ§öËΩ¶ÂûãÁöÑËΩ¶ÂÜÖÁ©∫Èó¥ÈÉΩ‰∏çËÉΩÁÆÄÂçïÁöÑÁî®Á∫ßÂà´Êù•Âà§Êñ≠,Êúâ‰∫õËΩ¶ÂûãËôΩÁÑ∂ÂÆö‰ΩçÊòØÁ¥ßÂáëÂûãsuv,‰ΩÜÊòØÂÖ∂ËΩ¶ÂÜÖÁ©∫Èó¥Â∑≤ÁªèÊù•Âà∞‰∫ÜÂ™≤Áæé‰∏≠ÂûãsuvÁöÑÁ®ãÂ∫¶,ÂΩìÁÑ∂‰∫Ü,Ëøô‰πüÊòØ‰ªéÊ∂àË¥πËÄÖÁöÑÂÆûÈôÖÈúÄÊ±ÇÂá∫ÂèëÁöÑ,ÊØïÁ´üÂæàÂ§öÂÆ∂Â∫≠Âá∫Ë°åÈÉΩ‰∏çÂñúÊ¨¢È©æÈ©∂‰∏§ËæÜÊ±ΩËΩ¶,Â¶ÇÊûú‰∏ÄÊ¨æËΩ¶ÂûãÂ∞±ËÉΩËß£ÂÜ≥,ÈÇ£Ëá™ÁÑ∂ÊòØÊõ¥Â•ΩÁöÑ,Ëøô‰πüÊòØÂæàÂ§öÊñ∞ËΩ¶‰∏çÊñ≠Âä†ÈïøÊàñËÄÖÊé®Âá∫plusËΩ¶ÂûãÁöÑÂéüÂõ†,ËÄå‰ªäÂ§©Ë¶ÅËØ¥ÁöÑËøôÊ¨æËΩ¶ÂûãËôΩÁÑ∂ÁöÑËΩ¶Ë∫´Â∞∫ÂØ∏‰∏ÄËà¨,‰ΩÜÊòØÂÖ∂ËΩ¥Ë∑ùÁõ∏ÂΩìÂá∫Ëâ≤,ÊâìÁ†¥Á¥ßÂáëÂûãsuvÁ©∫Èó¥‚ÄúÊûÅÈôê‚Äù,ËΩ¥Ë∑ù2Á±≥78ÈÖçÂÖ®ÊôØ,ÊúâÁúüÁöÆ‰∏çÊÄïÊ≤°Ê°£Ê¨°„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞Ê¨æÈìÉÊú®ÂêâÂßÜÂ∞ºÊèêËΩ¶,ËêΩÂú∞21‰∏á,1.5lËá™Âê∏+5Êå°ÊâãÂä®,ÊØîÁâßÈ©¨‰∫∫Â∏ÖÊ∞î\n", "label": "ÂêâÂßÜÂ∞ºÔºõÁâßÈ©¨‰∫∫"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nopen|Á¶èÁâπÈáéÈ©¨Âèò„ÄåÁîµÈ©¨„ÄçÊπñÂçóÈ¶ñËæÜÂÖàÈîãÁ∫ØÁîµsuv:mustang mach-eÊÉäÁé∞‰∫ëÁé∫ÊΩÆÊ±á\n", "label": "mustang mach-eÔºõÁ¶èÁâπÈáéÈ©¨ÔºõÁîµÈ©¨"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂú®ÂçÅÂπ¥Ââç,Â¶ÇÊûúÂΩìÊó∂‰Ω†‰π∞‰∫Ü‰∏ÄÂè∞ÂõΩ‰∫ßÊ±ΩËΩ¶,Èô§ÂéªÊîØÊåÅÂõΩ‰∫ßËøô‰∏™Âõ†Á¥†Â§ñ,ÊàñËÆ∏ÊòØËá™Â∑±ÁöÑÈ¢ÑÁÆó‰∏çÂ§™Â§ü,Êé•Âèó‰∏ç‰∫ÜÂêàËµÑËΩ¶ÂûãÂÅèÈ´òÁöÑÂîÆ‰ª∑„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÈó®ÊääÊâã‰πüÊòØ‰∏ÄÂ§ß‰∫ÆÁÇπ,‰ªîÁªÜÁúãÂÉèÊòØ‰∏Ä‰∏™ÂÄíÊîæÁöÑÂ≠óÊØçi,ÊöóÂê´ÂÆùÈ©¨iÂÆ∂ÊóèÊóóËà∞savÁöÑË∫´‰ªΩ„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁÑ∂Âêé,ÂÜçÈÖç‰ª•‰∏§‰æßÈÄ†ÂûãÁã≠ÈïøÁöÑÂ§ßÁÅØÁªÑËÆæËÆ°,Â§úÈó¥ÁÇπ‰∫ÆÂêéÊúâÁùÄ‰∏çÈîôÁöÑÁÖßÊòéÊïàÊûú,ÊØîÂáØÁæéÁëûÂá∫Ëâ≤„ÄÇ\n", "label": "ÂáØÁæéÁëû"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂñúÊ¨¢Â••Ëø™q5lÁöÑËµöÂ§ß‰∫Ü,ÊúÄÊñ∞Êàê‰∫§‰ª∑ÂàöÂàöÂÖ¨Â∏É,ËæìÂÖ•ÊâãÊú∫Âè∑ÂèØÊü•ËØ¢! Ê±ΩËΩ¶Êä•‰ª∑Â§ßÂÖ®\n", "label": "Â••Ëø™q5l"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊ≤ÉÂ∞îÊ≤ÉÊñ∞ËΩ¶ÂÅáÊÉ≥Âõæ ÊçÆÊÇâ,Êñ∞ËΩ¶Â∞Ü‰ºöÊòØÁ¨¨‰∏ÄÊ¨æÂü∫‰∫éÂêâÂà©ÂÖ®Êñ∞‚ÄúÂºÄÊ∫ê‚ÄùÊû∂ÊûÑ‚Äî‚ÄîseaÂπ≥Âè∞‰∏äÊâìÈÄ†ÁöÑÊ≤ÉÂ∞îÊ≤ÉËΩ¶Âûã,seaÊû∂ÊûÑÂèØ‰ª•ÂåπÈÖç‰ºóÂ§öË±™ÂçéÁßëÊäÄÈÖçÁΩÆ,‰æãÂ¶ÇÁ©∫Ê∞îÊÇ¨Êû∂„ÄÅÈù¢ÈÉ®ËØÜÂà´„ÄÅÊó†Á∫øotaÁ≠â„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\n„ÄêËΩ¨ÂèëÈìæÊé•„ÄëÊùÉÂ®ÅÂèëÂ∏É | Áî≥È¢ÜËΩªÂûãÁâµÂºïÊåÇËΩ¶ÂáÜÈ©æËΩ¶Âûã(c6)È©æÈ©∂ËØÅÊåáÂçó\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nËΩ¶Â§¥‰∏äËÆæËÆ°‰∫ÜÈ≤®È±ºÂò¥Ê†∑ÂºèÁöÑËøõÊ∞îÂè£,ÂÜÖÈÉ®ÁÇπÁºÄÁùÄÂ§ßÈáèÊ®™ÂêëÁöÑÁ∫øÊù°,Ë°¨ÊâòÂá∫ËΩ¶Â§¥ÁöÑÂ±ÇÊ¨°ÊÑü„ÄÇ\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁ≤æÁê¢ÁªÜÁ£®,ÂáùÁªÉÈùûÂá°Ë¥®ÊÑüÊòéÊó•È£éÊ†º,ÁªòÂ∞±Âà´Ê†∑ÈùíÊò•#2022Ê¨æcs35plusÊ≠§ÂàªÊÇ¶ÁõÆÂá∫Ë°ó,‰∏é‰Ω†È©≠ËßÅÊòéÊó•Êñ∞È£éÈáá\n", "label": "cs35plus"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÁé∞‰ª£ÈÄîËÉúlÊúÄÊñ∞Êä•‰ª∑Â∑≤Âá∫,‰∏çÁúãÂêéÊÇî‰∏ÄÂπ¥,Á´ãÂç≥Êü•ËØ¢Â∫ï‰ª∑!\n", "label": "ÈÄîËÉúl"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂÖ®Êñ∞Â§ß‰ºóÈ´òÂ∞îÂ§´ÁöÑËΩ¶Ë∫´Á∫øÊù°Êõ¥Âä†ÁöÑÊµÅÁïÖ,ËøêÂä®ÊÑüÂçÅË∂≥,ÂÆΩÂ§ßÁöÑcÊü±‰æùÊóß‰øùÁïô,‰∏çËøáÂÖ®Êñ∞Â••Ëø™a3Êõ¥Âä†Âπ¥ËΩªËøêÂä®,Âõ†‰∏∫ÂÆÉ‰ª¨ÊòØ‰∏Ä‰∏™Âπ≥Âè∞‰∏ãÊù•ÁöÑ‰∏§Ê¨æËΩ¶,‰πüÊúâ‰∫∫ËØ¥‰ªñ‰ª¨ÊòØ[unk]Â≠™ÁîüÂÖÑÂºü[unk],Âõ†‰∏∫ÂÆÉ‰ª¨ÁöÑÁõ∏‰ººÁ®ãÂ∫¶ÈùûÂ∏∏È´ò,Âä®ÂäõÊÄªÊàê‰∏ÄÊ†∑,ÂèØËÉΩÊúÄÂ§ßÁöÑ‰∏çÂêåÂ∞±ÊòØËΩ¶ÂÜÖË£ÖÈ•∞ÂíåËΩ¶Ê†á‰∫Ü„ÄÇ\n", "label": "È´òÂ∞îÂ§´ÔºõÂ••Ëø™a3"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÊñ∞ËΩ¶|Ê≠£ÂºèÂÆöÊ°£!Âù¶ÂÖã500Â∞Ü‰∫é3Êúà18Êó•Ê≠£Âºè‰∏äÂ∏Ç,‰∏äÂ∏ÇÂêéÂç≥ÂêØÂä®‰∫§‰ªò\n", "label": "Âù¶ÂÖã500"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂîÆÂêé|ËøòÂú®‰∏∫ËÆ°ÁÆóbmwÁöÑ‰øùÂÖªÂë®ÊúüËÄåËã¶ÊÅºÂêó\n", "label": "Êó†"}
{"input": "ËØ∑ÊèêÂèñ‰∏ãÂàóÊñáÁ´†‰∏≠ÂåÖÂê´ÁöÑËΩ¶Á≥ªÔºö\nÂΩìÂπ¥ÂîÆ‰ª∑11w,Â¶Ç‰ªä4.99wËΩªÊùæÂÖ•Êâã,Ê≤πËÄó5.1Âçá,ÂÖ≥ÈîÆËøòÊòØÂêàËµÑ\n", "label": "Êó†"}

</document_content>
</document>
<document index="20">
<source>./train/ds_zero2_no_offload.json</source>
<document_content>
{
    "fp16": {
        "enabled": "auto",
        "loss_scale": 0,
        "loss_scale_window": 100,
        "initial_scale_power": 16,
        "hysteresis": 2,
        "min_loss_scale": 1e-10
    },
    "zero_optimization": {
        "stage": 2,
        "allgather_partitions": true,
        "allgather_bucket_size": 1e8,
        "overlap_comm": true,
        "reduce_scatter": true,
        "reduce_bucket_size": 1e8,
        "contiguous_gradients": true
    },
    "gradient_accumulation_steps": "auto",
    "gradient_clipping": "auto",
    "steps_per_print": 10,
    "train_batch_size": "auto",
    "train_micro_batch_size_per_gpu": "auto",
    "wall_clock_breakdown": false
}
</document_content>
</document>
<document index="21">
<source>./train/ds_zero3_no_offload.json</source>
<document_content>
{
    "fp16": {
        "enabled": "auto",
        "loss_scale": 0,
        "loss_scale_window": 1000,
        "initial_scale_power": 16,
        "hysteresis": 2,
        "min_loss_scale": 1
    },
    "bf16": {
        "enabled": "auto"
    },

    "zero_optimization": {
        "stage": 3,
        "offload_optimizer": {
            "device": "none",
            "pin_memory": true
        },
        "offload_param": {
            "device": "none",
            "pin_memory": true
        },
        "overlap_comm": true,
        "contiguous_gradients": true,
        "sub_group_size": 1e9,
        "reduce_bucket_size": "auto",
        "stage3_prefetch_bucket_size": "auto",
        "stage3_param_persistence_threshold": "auto",
        "stage3_max_live_parameters": 1e9,
        "stage3_max_reuse_distance": 1e9,
        "stage3_gather_16bit_weights_on_model_save": true
    },

    "gradient_accumulation_steps": "auto",
    "gradient_clipping": "auto",
    "steps_per_print": 10,
    "train_batch_size": "auto",
    "train_micro_batch_size_per_gpu": "auto",
    "wall_clock_breakdown": false
}
</document_content>
</document>
<document index="22">
<source>./train/ds_zero3_offload.json</source>
<document_content>
{
    "fp16": {
        "enabled": "auto",
        "loss_scale": 0,
        "loss_scale_window": 1000,
        "initial_scale_power": 16,
        "hysteresis": 2,
        "min_loss_scale": 1
    },
    "bf16": {
        "enabled": "auto"
    },

    "zero_optimization": {
        "stage": 3,
        "offload_optimizer": {
            "device": "cpu",
            "pin_memory": true
        },
        "offload_param": {
            "device": "cpu",
            "pin_memory": true
        },
        "overlap_comm": true,
        "contiguous_gradients": true,
        "sub_group_size": 1e9,
        "reduce_bucket_size": "auto",
        "stage3_prefetch_bucket_size": "auto",
        "stage3_param_persistence_threshold": "auto",
        "stage3_max_live_parameters": 1e9,
        "stage3_max_reuse_distance": 1e9,
        "stage3_gather_16bit_weights_on_model_save": true
    },

    "gradient_accumulation_steps": "auto",
    "gradient_clipping": "auto",
    "steps_per_print": 10,
    "train_batch_size": "auto",
    "train_micro_batch_size_per_gpu": "auto",
    "wall_clock_breakdown": false
}
</document_content>
</document>
<document index="23">
<source>./train/ds_zero3_offload_no_auto.json</source>
<document_content>
{
    "fp16": {
        "enabled": false,
        "loss_scale": 0,
        "loss_scale_window": 1000,
        "initial_scale_power": 16,
        "hysteresis": 2,
        "min_loss_scale": 1
    },
    "bf16": {
        "enabled": true
    },

    "zero_optimization": {
        "stage": 3,
        "offload_optimizer": {
            "device": "cpu",
            "pin_memory": true
        },
        "overlap_comm": true,
        "contiguous_gradients": true,
        "sub_group_size": 1e9,
        "reduce_bucket_size": 1e8,
        "stage3_prefetch_bucket_size": 1e8,
        "stage3_param_persistence_threshold": 0,
        "stage3_max_live_parameters": 1e8,
        "stage3_max_reuse_distance": 1e8,
        "stage3_gather_16bit_weights_on_model_save": true
    },

    "gradient_accumulation_steps": 1,
    "gradient_clipping": "auto",
    "steps_per_print": 10,
    "train_micro_batch_size_per_gpu": 1,
    "wall_clock_breakdown": false
}
</document_content>
</document>
<document index="24">
<source>./train/merge_lora_weight.py</source>
<document_content>
# ÂØºÂÖ•ÊâÄÈúÄÁöÑÂ∫ì
from transformers import AutoModelForCausalLM  # Áî®‰∫éÂä†ËΩΩÈ¢ÑËÆ≠ÁªÉÁöÑËØ≠Ë®ÄÊ®°Âûã
from peft import LoraConfig, get_peft_model, PeftModel  # Áî®‰∫éÂ§ÑÁêÜLoRAÊùÉÈáç
import argparse  # Áî®‰∫éËß£ÊûêÂëΩ‰ª§Ë°åÂèÇÊï∞
import shutil  # Áî®‰∫éÊñá‰ª∂Êìç‰ΩúÔºåÂ¶ÇÂ§çÂà∂
import os  # Áî®‰∫éÊñá‰ª∂Ë∑ØÂæÑÊìç‰Ωú
import torch  # Áî®‰∫éÊ∑±Â∫¶Â≠¶‰π†Êìç‰Ωú

def main():
    # ÂàõÂª∫ÂèÇÊï∞Ëß£ÊûêÂô®
    parser = argparse.ArgumentParser()
    # Ê∑ªÂä†ÂëΩ‰ª§Ë°åÂèÇÊï∞
    parser.add_argument("--base_model_path", type=str, required=True, 
                        help="Path to pretrained model or model identifier from huggingface.co/models")
    parser.add_argument("--adapter_model_path", type=str, required=True, help="Path to adapter model")
    parser.add_argument("--output_path", type=str, required=True, help="Path to save the output model")
    parser.add_argument("--save_dtype", type=str, choices=['bf16', 'fp32', 'fp16'], 
                        default='fp32', help="In which dtype to save, fp32, bf16 or fp16.")
    # Ëß£ÊûêÂëΩ‰ª§Ë°åÂèÇÊï∞
    args = parser.parse_args()

    name2dtype = {'bf16': torch.bfloat16, 'fp32': torch.float32, 'fp16': torch.float16}
    # Âä†ËΩΩÂü∫Â∫ßÊ®°Âûã
    model = AutoModelForCausalLM.from_pretrained(
        args.base_model_path, device_map='cpu', 
        trust_remote_code=True, torch_dtype=name2dtype[args.save_dtype]
    )
    # Âú®Âü∫Â∫ßÊ®°ÂûãÁöÑÂü∫Á°Ä‰∏äÂä†ËΩΩ adapter ÊùÉÈáç
    model = PeftModel.from_pretrained(model, args.adapter_model_path, trust_remote_code=True)
    # ËûçÂêàÊ®°ÂûãÂíå adapter
    model = model.merge_and_unload()
    # ‰øùÂ≠òËûçÂêàÂêéÁöÑÊ®°ÂûãÊùÉÈáç
    model.save_pretrained(args.output_path, safe_serialization=False)

    # Êã∑Ë¥ù tokenizerÔºåconfig ÂíåÊ®°ÂûãÊñá‰ª∂
    shutil.copy(
        os.path.join(args.base_model_path, 'generation_config.json'), 
        os.path.join(args.output_path, 'generation_config.json')
    )
    shutil.copy(
        os.path.join(args.base_model_path, 'hy.tiktoken'), 
        os.path.join(args.output_path, 'hy.tiktoken')
    )
    shutil.copy(
        os.path.join(args.base_model_path, 'tokenizer_config.json'), 
        os.path.join(args.output_path, 'tokenizer_config.json')
    )
    shutil.copy(
        os.path.join(args.base_model_path, 'config.json'), 
        os.path.join(args.output_path, 'config.json')
    )
    shutil.copy(
        os.path.join(args.base_model_path, 'modeling_hunyuan.py'), 
        os.path.join(args.output_path, 'modeling_hunyuan.py')
    )
    shutil.copy(
        os.path.join(args.base_model_path, 'configuration_hunyuan.py'), 
        os.path.join(args.output_path, 'configuration_hunyuan.py')
    )
    shutil.copy(
        os.path.join(args.base_model_path, 'tokenization_hy.py'), 
        os.path.join(args.output_path, 'tokenization_hy.py')
    )

    print(f'Merged model weight is saved to {args.output_path}')
    
if __name__ == "__main__":
    main()

</document_content>
</document>
<document index="25">
<source>./train/train.py</source>
<document_content>
# Copyright 2024 Tencent Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Copyright 2022 EleutherAI and the HuggingFace Inc. team. All rights reserved.
#
# This code is based on EleutherAI's GPT-NeoX library and the GPT-NeoX
# and OPT implementations in this library. It has been modified from its
# original forms to accommodate minor architectural differences compared
# to GPT-NeoX and OPT used by the Meta AI team that trained the model.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import sys
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import json
import torch
import shutil
import logging
from dataclasses import dataclass, field
import deepspeed
from typing import Optional, Dict

import transformers
from torch.utils.data import Dataset
from transformers import Trainer, TrainerCallback
from peft import LoraConfig, get_peft_model, PeftModel
from transformers.trainer_utils import PREFIX_CHECKPOINT_DIR
from transformers.modeling_utils import unwrap_model


def print_args(args, name='arguments'):
    """Print arguments."""
    if torch.distributed.get_rank() == 0:
        print(f'------------------------ {name} ------------------------', flush=True)
        str_list = []
        for arg in vars(args):
            dots = '.' * (48 - len(arg))
            str_list.append('  {} {} {}'.format(arg, dots, getattr(args, arg)))
        for arg in sorted(str_list, key=lambda x: x.lower()):
            print(arg, flush=True)
        print(f'-------------------- end of {name} ---------------------', flush=True)


@dataclass
class ModelArguments:
    use_flash_attn: bool = field(
        default=False, 
        metadata={"help": "Enable FlashAttention-2 for faster training."}
    )
    use_lora: bool = field(default=False, metadata={"help": "Enable Lora for faster training."})
    hidden_size: int = field(default=2048, metadata={"help": "The hidden size of the model."})
    num_layers: int = field(default=24, metadata={"help": "The number of layers of the model."})
    num_attention_heads: int = field(default=16, metadata={"help": "The number of attention heads of the model."})
    intermediate_size: int = field(default=8192, metadata={"help": "The intermediate size of the model."})
    max_position_embeddings: int = field(
        default=2048, 
        metadata={"help": "The maximum sequence length that this model might ever be used with."}
    )
    vocab_size: int = field(default=50257, metadata={"help": "The vocabulary size of the model."})
    type_vocab_size: int = field(default=1, metadata={"help": "The vocabulary size of the model."})
    layer_norm_eps: float = field(
        default=1e-5, 
        metadata={"help": "The epsilon used by the layer normalization layers of the model."}
    )
    moe_topk: int = field(default=4, metadata={"help": "The topk for MOE."})
    num_experts: int = field(default=8, metadata={"help": "The number of experts for MOE."})
    num_key_value_heads: int = field(default=16, metadata={"help": "The number of key-value heads in GQA."})
    use_cla: bool = field(default=False, metadata={"help": "Whether to use CLA."})
    cla_share_factor: int = field(default=2, metadata={"help": "The share factor for CLA."})
    use_mixed_mlp_moe: bool = field(
        default=False, 
        metadata={"help": "Whether to use mixed MoE with shared expert."}
    )
    num_shared_expert: int = field(default=1, metadata={"help": "Number of shared experts."})
    use_qk_norm: bool = field(default=False, metadata={"help": "Whether to use qk norm."})
    tie_word_embeddings: bool = field(
        default=True, 
        metadata={"help": "Whether to tie the word embeddings of the encoder and the decoder."}
    )
    lora_rank: int = field(default=64, metadata={"help": "The rank of lora."})
    lora_alpha: int = field(default=8, metadata={"help": "Lora alpha"})
    lora_dropout: float = field(default=0.0, metadata={"help": "Lora dropout"})
    train_attention_params_only: bool = field(default=False, metadata={
        "help": "Whether to train attention parameters only."}
    )


@dataclass
class DataArguments:
    train_data_file: str = field(default=None, metadata={"help": "Path to the training data."})
    max_seq_length: int = field(
        default=2048, 
        metadata={"help": "The max sequence length of the model inputs after tokenization."}
    )
    complex_data: Optional[str] = field(default=None)
    use_dummy_data: bool = field(default=False, metadata={"help": "Use dummy data."})


@dataclass
class TrainingArguments(transformers.TrainingArguments):
    cache_dir: Optional[str] = field(default=None)
    optim: str = field(default="adamw_torch")
    model_max_length: int = field(
        default=2048,
        metadata={"help": "Maximum sequence length. Sequences will be right padded (and possibly truncated)."},
    )
    tokenizer_name_or_path: Optional[str] = field(default=None)
    model_name_or_path: Optional[str] = field(default=None)
    make_moe_param_leaf_module: bool = field(
        default=False, 
        metadata={"help": "Make MoE parameters zero-3 leaf module."}
    )
    min_lr: float = field(
        default=0.01, 
        metadata={"help": "The final learning rate at the end of the decay will be learning_rate * min_lr"}
    )


IGNORE_INDEX = -100


class DummyDataset(Dataset):
    def __init__(self, tokenizer, max_seq_length=512, length=1000):
        self.tokenizer = tokenizer
        self.max_seq_length = max_seq_length
        self.length = length
    
    def __len__(self):
        return self.length
    
    def __getitem__(self, index):
        tokens = torch.randint(0, self.tokenizer.vocab_size, (self.max_seq_length, ))
        return {'input_ids': tokens, 'labels': tokens}


class SFTDataset(Dataset):
    def __init__(self, data_file, tokenizer, max_seq_length = 2048, prompt_format = 'mplus'):
        self.tokenizer = tokenizer
        self.prompt_format = prompt_format
        self.max_seq_length = max_seq_length

        self.data_list = self.load_data(data_file)

    def __len__(self):
        return len(self.data_list)

    def load_data(self, data_file):
        logging.info('Loading data: {}'.format(data_file))
        with open(data_file, 'r', encoding='utf8') as f:
            data_list = f.readlines()
        logging.info("there are {} data in dataset".format(len(data_list)))
        return data_list

    def encode_data(self, data_dict):
        model_inputs = {}
        message_tokens = torch.tensor(self.tokenizer.apply_chat_template(data_dict['messages']))
        extra_0_token_id = self.tokenizer.convert_tokens_to_ids('<|extra_0|>')
        eos_token_id = self.tokenizer.convert_tokens_to_ids('<|eos|>')
        loss_token_begins = (message_tokens == extra_0_token_id).nonzero(as_tuple=True)[0].tolist()
        loss_token_ends = (message_tokens == eos_token_id).nonzero(as_tuple=True)[0].tolist()
        message_labels = torch.tensor([IGNORE_INDEX] * message_tokens.shape[0])
        for begin_idx, end_idx in zip(loss_token_begins, loss_token_ends):
            message_labels[begin_idx:end_idx + 1] = message_tokens[begin_idx:end_idx + 1]
        input_ids = message_tokens.to(torch.long)
        labels = message_labels.to(torch.long)

        input_ids = input_ids[:self.max_seq_length]
        labels = labels[:self.max_seq_length]
        attention_mask = [1 if val != self.tokenizer.pad_id else 0 for val in input_ids]
        model_inputs["input_ids"] = input_ids
        model_inputs["attention_mask"] = torch.tensor(attention_mask, dtype=torch.bool)
        model_inputs["labels"] = labels

        return model_inputs

    def __getitem__(self, index):
        data = self.data_list[index]
        data = json.loads(data)
        model_inputs = self.encode_data(data)

        return model_inputs


@dataclass
class DataCollatorForSupervisedDataset(object):
    """Collate examples for supervised fine-tuning."""

    tokenizer: transformers.PreTrainedTokenizer

    def __call__(self, instances):
        input_ids = [instance['input_ids'] for instance in instances]
        labels = [instance['labels'] for instance in instances]
        input_ids = torch.nn.utils.rnn.pad_sequence(input_ids, batch_first=True, padding_value=self.tokenizer.pad_id)
        labels = torch.nn.utils.rnn.pad_sequence(labels, batch_first=True, padding_value=IGNORE_INDEX)
        return dict(
            input_ids=input_ids,
            labels=labels,
            attention_mask=input_ids.ne(self.tokenizer.pad_id),
        )


def make_supervised_data_module(tokenizer, data_args) -> Dict:
    """Make dataset and collator for supervised fine-tuning."""
    if data_args.use_dummy_data:
        train_dataset = DummyDataset(tokenizer, data_args.max_seq_length)
    else:
        train_dataset = SFTDataset(
            tokenizer=tokenizer, 
            data_file=data_args.train_data_file, 
            max_seq_length=data_args.max_seq_length
        )
    data_collator = DataCollatorForSupervisedDataset(tokenizer=tokenizer)
    return dict(train_dataset=train_dataset, eval_dataset=None, data_collator=data_collator)


# full Ê®°ÂûãËÆ≠ÁªÉÊó∂ÔºåÈúÄË¶Å‰øÆÊîπ config.json ‰ª•ÂèäÊã∑Ë¥ùÊ®°Âûã‰∏éÈÖçÁΩÆÊñá‰ª∂ÊîØÊåÅ Auto load
class CustomSaveCallback(TrainerCallback):
    def on_save(self, args, state, control, **kwargs):
        if torch.distributed.get_rank() == 0:
            output_dir = os.path.join(args.output_dir, f"{PREFIX_CHECKPOINT_DIR}-{state.global_step}")

            # Êã∑Ë¥ùtokenizer, Ê®°ÂûãÂíåÈÖçÁΩÆÊñá‰ª∂
            model_path = os.path.join(args.model_name_or_path, 'modeling_hunyuan.py')
            config_path = os.path.join(args.model_name_or_path, 'configuration_hunyuan.py')
            shutil.copy(model_path, os.path.join(output_dir, 'modeling_hunyuan.py'))
            shutil.copy(config_path, os.path.join(output_dir, 'configuration_hunyuan.py'))
            shutil.copy(
                os.path.join(args.tokenizer_name_or_path, 'generation_config.json'), 
                os.path.join(output_dir, 'generation_config.json')
            )
            shutil.copy(
                os.path.join(args.tokenizer_name_or_path, 'hy.tiktoken'), 
                os.path.join(output_dir, 'hy.tiktoken')
            )
            shutil.copy(
                os.path.join(args.tokenizer_name_or_path, 'tokenizer_config.json'), 
                os.path.join(output_dir, 'tokenizer_config.json')
            )
            shutil.copy(
                os.path.join(args.tokenizer_name_or_path, 'tokenization_hy.py'), 
                os.path.join(output_dir, 'tokenization_hy.py')
            )

            # ‰øÆÊîπ config.jsonÔºåÂ¢ûÂä† auto_map
            if os.path.exists(os.path.join(output_dir, "config.json")):
                config = json.load(open(os.path.join(output_dir, "config.json"), 'r'))
                config['auto_map'] = {
                    "AutoConfig": "configuration_hunyuan.HunYuanConfig",
                    "AutoModel": "modeling_hunyuan.HunyuanModel",
                    "AutoModelForCausalLM": "modeling_hunyuan.HunYuanForCausalLM"
                }
                json.dump(config, open(os.path.join(output_dir, "config.json"), 'w'), indent=2)

        return control


def train():
    parser = transformers.HfArgumentParser((ModelArguments, DataArguments, TrainingArguments))
    model_args, data_args, training_args = parser.parse_args_into_dataclasses()
    print_args(model_args, 'model arguments')
    print_args(data_args, 'data arguments')
    print_args(training_args, 'training arguments')

    tokenizer = transformers.AutoTokenizer.from_pretrained(
        training_args.tokenizer_name_or_path,
        trust_remote_code = True
    )

    init_kwargs = {}
    if model_args.use_flash_attn:
        init_kwargs["attn_implementation"] = "flash_attention_2"
    if training_args.bf16:
        init_kwargs["torch_dtype"] = torch.bfloat16
    elif training_args.fp16:
        init_kwargs["torch_dtype"] = torch.float16

    if training_args.model_name_or_path is not None and os.path.exists(training_args.model_name_or_path):
        print(f"Initializing model from local file: {training_args.model_name_or_path}")
        model = transformers.AutoModelForCausalLM.from_pretrained(
            training_args.model_name_or_path,
            trust_remote_code=True,
            **init_kwargs
        )
    else:
        from models.modeling_hunyuan import HunYuanForCausalLM, HunYuanMoE
        from models.configuration_hunyuan import HunYuanConfig
        print(f"Model name or path does not exist: {training_args.model_name_or_path}, \
              use random initialized model instead.")
        # ÂÆö‰πâÊ®°Âûã
        config = HunYuanConfig(
            vocab_size=tokenizer.vocab_size,  # ËØçË°®Â§ßÂ∞è
            hidden_size=model_args.hidden_size,        # ÈöêËóèÂ±ÇÂ§ßÂ∞è
            intermediate_size=model_args.intermediate_size,  # FFN Â±ÇÂ§ßÂ∞è
            max_position_embeddings=training_args.model_max_length,   # ÊúÄÂ§ßÂ∫èÂàóÈïøÂ∫¶
            moe_topk=model_args.moe_topk,  # topk
            num_experts=model_args.num_experts,  # expert Êï∞Èáè
            num_attention_heads=model_args.num_attention_heads,  # Â§öÂ§¥Ê≥®ÊÑèÂäõÂ§¥Êï∞
            num_key_value_heads=model_args.num_key_value_heads,  # GQA Êó∂ÁöÑ key value Â§¥Êï∞
            num_hidden_layers=model_args.num_layers,    # Transformer Â±ÇÊï∞
            cla_share_factor=model_args.cla_share_factor,  # CLA Âõ†Â≠ê
            use_cla=model_args.use_cla,
            use_mixed_mlp_moe=model_args.use_mixed_mlp_moe,
            num_shared_expert=model_args.num_shared_expert,
            use_qk_norm=model_args.use_qk_norm,
            model_type='hunyuan',
            tie_word_embeddings=model_args.tie_word_embeddings,
            **init_kwargs
        )
        with deepspeed.zero.Init(dtype=init_kwargs["torch_dtype"], config_dict_or_path=training_args.deepspeed):
            model = HunYuanForCausalLM(config)
    
    if model_args.train_attention_params_only:
        for name, param in model.named_parameters():
            if 'self_attn' not in name:
                param.requires_grad = False

    if model_args.use_lora:
        # ÂÆö‰πâ Lora ÈÖçÁΩÆ
        lora_config = LoraConfig(
            r=model_args.lora_rank,
            lora_alpha=model_args.lora_alpha,
            lora_dropout=model_args.lora_dropout,
            target_modules=["q_proj", "k_proj", "v_proj", "o_proj"],
            bias="none",
            task_type="CAUSAL_LM",
        )
        model = get_peft_model(model, lora_config)
    
    # Áî® zero3 ÁöÑÊó∂ÂÄô‰∏çÂàáÂàÜ MoE ÂèÇÊï∞
    if model_args.num_experts > 0 \
        and training_args.make_moe_param_leaf_module and \
            training_args.deepspeed_plugin.zero_stage == 3:
        from deepspeed.utils import set_z3_leaf_modules
        set_z3_leaf_modules(model, [HunYuanMoE])

    data_module = make_supervised_data_module(tokenizer=tokenizer, data_args=data_args)
    # Tell Trainer not to attempt DataParallel
    model.is_parallelizable = True
    model.model_parallel = True

    training_args.lr_scheduler_kwargs = {
        'min_lr': training_args.min_lr,
    }

    trainer = Trainer(
        model=model, 
        tokenizer=tokenizer, 
        args=training_args,
        callbacks=[CustomSaveCallback],
        **data_module
    )
    model.config.use_cache = False

    trainer.train(resume_from_checkpoint=training_args.resume_from_checkpoint)


if __name__ == "__main__":
    train()

</document_content>
</document>
<document index="26">
<source>./inference/login_ssh.py</source>
<document_content>
import argparse
import paramiko
import subprocess

def setup_ssh_client(ip, password, port):
    # setup ssh client
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.connect(ip, port=port, username='root', password=password, look_for_keys=False, allow_agent=False)
    return client

def get_public_key(client):
    # ÂæóÂà∞ÂÖ¨ÂºÄÂØÜÈí•
    stdin, stdout, stderr = client.exec_command('cat ~/.ssh/id_rsa.pub')
    public_key = stdout.read().decode('utf-8').strip()
    return public_key

def distribute_public_key(client, public_key):
    # do distribute public key
    stdin, stdout, stderr = client.exec_command(f'echo "{public_key}" >> ~/.ssh/authorized_keys')
    exit_status = stdout.channel.recv_exit_status()  # Wait for the command to complete
    if exit_status == 0:
        return 0, stdout.read().decode('utf-8').strip()
    else:
        return exit_status, stderr.read().decode('utf-8').strip()

def get_host_fingerprint(ip, port):
    try:
        # ‰ΩøÁî® ssh-keyscan Ëé∑Âèñ‰∏ªÊú∫ÊåáÁ∫π
        result = subprocess.run(['ssh-keyscan', '-p', str(port), ip], capture_output=True, text=True)
        if result.returncode == 0:
            return result.stdout
        else:
            print(f'Failed to get fingerprint for {ip}')
            return None
    except Exception as e:
        # ÈîôËØØÂ§ÑÁêÜ
        print(f'Error getting fingerprint for {ip}: {e}')
        return None

def add_fingerprint_to_remote_known_hosts(client, fingerprint):
    # ÂêëËøúÁ®ãÂ∑≤Áü•‰∏ªÊú∫Ê∑ªÂä†‰ø°ÊÅØ
    try:
        stdin, stdout, stderr = client.exec_command(f'echo "{fingerprint}" >> ~/.ssh/known_hosts')
        exit_status = stdout.channel.recv_exit_status()  # Wait for the command to complete
        if exit_status == 0:
            print('Fingerprint added to remote known_hosts')
        else:
            print(f'Failed to add fingerprint to remote known_hosts: {stderr.read().decode("utf-8").strip()}')
    except Exception as e:
        # ÈîôËØØÂ§ÑÁêÜ
        print(f'Error adding fingerprint to remote known_hosts: {e}')

def config_nodes_mianmi(nodes, port, password):
    # config nodes ÂÖçÂØÜ
    public_keys = {}
    fingerprints = {}

    for node in nodes:
        client = setup_ssh_client(node, password, port)
        stdin, stdout, stderr = client.exec_command(
            'if [ ! -f ~/.ssh/id_rsa ]; then ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa; fi')
        public_keys[node] = get_public_key(client)
        fingerprints[node] = get_host_fingerprint(node, port)

        stdout.channel.recv_exit_status()  # Wait for the command to complete
        client.close()

    for node in nodes:
        client = setup_ssh_client(node, password, port)
        for ip, public_key in public_keys.items():
            exit_status, msg = distribute_public_key(client, public_key)
            print('distribute_public_key ', ip, 'result: ', exit_status, msg)
        for ip, fingerprint in fingerprints.items():
            if fingerprint:
                add_fingerprint_to_remote_known_hosts(client, fingerprint)
        client.close()

def main():
    parser = argparse.ArgumentParser(description='SSH Key Distributor')
    parser.add_argument('--ips', help='Comma-separated list of IP addresses', required=True)
    parser.add_argument('--password', default='hunyuan123', help='Root password for all machines')
    parser.add_argument('--port', type=int, default=56000, help='SSH port for all machines')

    args = parser.parse_args()

    ip_list = args.ips.split(',')

    machines = [{'ip': ip.strip(), 'password': args.password, 'port': args.port} for ip in ip_list]
    print('machines: ', machines)

    # Generate SSH keys on all machines if not already present
    for machine in machines:
        client = setup_ssh_client(machine['ip'], machine['password'], machine['port'])
        stdin, stdout, stderr = client.exec_command(
            'if [ ! -f ~/.ssh/id_rsa ]; then ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa; fi')
        stdout.channel.recv_exit_status()  # Wait for the command to complete
        client.close()

    # Collect public keys from all machines
    public_keys = {}
    for machine in machines:
        client = setup_ssh_client(machine['ip'], machine['password'], machine['port'])
        public_keys[machine['ip']] = get_public_key(client)
        client.close()
    print('public_keys: ', public_keys)

    # Collect fingerprints from all machines
    fingerprints = {}
    for machine in machines:
        fingerprints[machine['ip']] = get_host_fingerprint(machine['ip'], machine['port'])
    print('fingerprints: ', fingerprints)

    # Distribute all public keys and fingerprints to all machines
    for machine in machines:
        client = setup_ssh_client(machine['ip'], machine['password'], machine['port'])
        for ip, public_key in public_keys.items():
            exit_status, msg = distribute_public_key(client, public_key)
            print('distribute_public_key ', ip, 'result: ', exit_status, msg)
        for ip, fingerprint in fingerprints.items():
            if fingerprint:
                add_fingerprint_to_remote_known_hosts(client, fingerprint)
        client.close()

    # ÈÖçÁΩÆÂÖçÂØÜÊàêÂäü
    print("SSH keys and fingerprints have been distributed successfully.")

if __name__ == '__main__':
    main()

</document_content>
</document>
</documents>
